//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Irisking.DataBaseAccess
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'SqlControl' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.DataBaseAccess")]
    public sealed partial class SqlControl : ComplexObject
    {
        
        private string _connectionString;
        
        private bool _isOpen;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnConnectionStringChanging(string value);
        partial void OnConnectionStringChanged();
        partial void OnIsOpenChanging(bool value);
        partial void OnIsOpenChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SqlControl"/> class.
        /// </summary>
        public SqlControl()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ConnectionString' value.
        /// </summary>
        [DataMember()]
        public string ConnectionString
        {
            get
            {
                return this._connectionString;
            }
            set
            {
                if ((this._connectionString != value))
                {
                    this.OnConnectionStringChanging(value);
                    this.RaiseDataMemberChanging("ConnectionString");
                    this.ValidateProperty("ConnectionString", value);
                    this._connectionString = value;
                    this.RaiseDataMemberChanged("ConnectionString");
                    this.OnConnectionStringChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsOpen' value.
        /// </summary>
        [DataMember()]
        public bool IsOpen
        {
            get
            {
                return this._isOpen;
            }
            set
            {
                if ((this._isOpen != value))
                {
                    this.OnIsOpenChanging(value);
                    this.RaiseDataMemberChanging("IsOpen");
                    this.ValidateProperty("IsOpen", value);
                    this._isOpen = value;
                    this.RaiseDataMemberChanged("IsOpen");
                    this.OnIsOpenChanged();
                }
            }
        }
    }
}
namespace Irisking.Web.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'attend_for_leave' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class attend_for_leave : Entity
    {
        
        private double _actual_leave_days;
        
        private int _attend_for_leave_id;
        
        private int _is_leave_all_day;
        
        private DateTime _leave_end_time;
        
        private DateTime _leave_start_time;
        
        private int _leave_type_id;
        
        private string _memo;
        
        private DateTime _modify_time;
        
        private DateTime _operate_time;
        
        private string _operator_name;
        
        private int _person_id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onactual_leave_daysChanging(double value);
        partial void Onactual_leave_daysChanged();
        partial void Onattend_for_leave_idChanging(int value);
        partial void Onattend_for_leave_idChanged();
        partial void Onis_leave_all_dayChanging(int value);
        partial void Onis_leave_all_dayChanged();
        partial void Onleave_end_timeChanging(DateTime value);
        partial void Onleave_end_timeChanged();
        partial void Onleave_start_timeChanging(DateTime value);
        partial void Onleave_start_timeChanged();
        partial void Onleave_type_idChanging(int value);
        partial void Onleave_type_idChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onmodify_timeChanging(DateTime value);
        partial void Onmodify_timeChanged();
        partial void Onoperate_timeChanging(DateTime value);
        partial void Onoperate_timeChanged();
        partial void Onoperator_nameChanging(string value);
        partial void Onoperator_nameChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="attend_for_leave"/> class.
        /// </summary>
        public attend_for_leave()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'actual_leave_days' value.
        /// </summary>
        [DataMember()]
        public double actual_leave_days
        {
            get
            {
                return this._actual_leave_days;
            }
            set
            {
                if ((this._actual_leave_days != value))
                {
                    this.Onactual_leave_daysChanging(value);
                    this.RaiseDataMemberChanging("actual_leave_days");
                    this.ValidateProperty("actual_leave_days", value);
                    this._actual_leave_days = value;
                    this.RaiseDataMemberChanged("actual_leave_days");
                    this.Onactual_leave_daysChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_for_leave_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int attend_for_leave_id
        {
            get
            {
                return this._attend_for_leave_id;
            }
            set
            {
                if ((this._attend_for_leave_id != value))
                {
                    this.Onattend_for_leave_idChanging(value);
                    this.ValidateProperty("attend_for_leave_id", value);
                    this._attend_for_leave_id = value;
                    this.RaisePropertyChanged("attend_for_leave_id");
                    this.Onattend_for_leave_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_leave_all_day' value.
        /// </summary>
        [DataMember()]
        public int is_leave_all_day
        {
            get
            {
                return this._is_leave_all_day;
            }
            set
            {
                if ((this._is_leave_all_day != value))
                {
                    this.Onis_leave_all_dayChanging(value);
                    this.RaiseDataMemberChanging("is_leave_all_day");
                    this.ValidateProperty("is_leave_all_day", value);
                    this._is_leave_all_day = value;
                    this.RaiseDataMemberChanged("is_leave_all_day");
                    this.Onis_leave_all_dayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'leave_end_time' value.
        /// </summary>
        [DataMember()]
        public DateTime leave_end_time
        {
            get
            {
                return this._leave_end_time;
            }
            set
            {
                if ((this._leave_end_time != value))
                {
                    this.Onleave_end_timeChanging(value);
                    this.RaiseDataMemberChanging("leave_end_time");
                    this.ValidateProperty("leave_end_time", value);
                    this._leave_end_time = value;
                    this.RaiseDataMemberChanged("leave_end_time");
                    this.Onleave_end_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'leave_start_time' value.
        /// </summary>
        [DataMember()]
        public DateTime leave_start_time
        {
            get
            {
                return this._leave_start_time;
            }
            set
            {
                if ((this._leave_start_time != value))
                {
                    this.Onleave_start_timeChanging(value);
                    this.RaiseDataMemberChanging("leave_start_time");
                    this.ValidateProperty("leave_start_time", value);
                    this._leave_start_time = value;
                    this.RaiseDataMemberChanged("leave_start_time");
                    this.Onleave_start_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'leave_type_id' value.
        /// </summary>
        [DataMember()]
        public int leave_type_id
        {
            get
            {
                return this._leave_type_id;
            }
            set
            {
                if ((this._leave_type_id != value))
                {
                    this.Onleave_type_idChanging(value);
                    this.RaiseDataMemberChanging("leave_type_id");
                    this.ValidateProperty("leave_type_id", value);
                    this._leave_type_id = value;
                    this.RaiseDataMemberChanged("leave_type_id");
                    this.Onleave_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'modify_time' value.
        /// </summary>
        [DataMember()]
        public DateTime modify_time
        {
            get
            {
                return this._modify_time;
            }
            set
            {
                if ((this._modify_time != value))
                {
                    this.Onmodify_timeChanging(value);
                    this.RaiseDataMemberChanging("modify_time");
                    this.ValidateProperty("modify_time", value);
                    this._modify_time = value;
                    this.RaiseDataMemberChanged("modify_time");
                    this.Onmodify_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'operate_time' value.
        /// </summary>
        [DataMember()]
        public DateTime operate_time
        {
            get
            {
                return this._operate_time;
            }
            set
            {
                if ((this._operate_time != value))
                {
                    this.Onoperate_timeChanging(value);
                    this.RaiseDataMemberChanging("operate_time");
                    this.ValidateProperty("operate_time", value);
                    this._operate_time = value;
                    this.RaiseDataMemberChanged("operate_time");
                    this.Onoperate_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'operator_name' value.
        /// </summary>
        [DataMember()]
        public string operator_name
        {
            get
            {
                return this._operator_name;
            }
            set
            {
                if ((this._operator_name != value))
                {
                    this.Onoperator_nameChanging(value);
                    this.RaiseDataMemberChanging("operator_name");
                    this.ValidateProperty("operator_name", value);
                    this._operator_name = value;
                    this.RaiseDataMemberChanged("operator_name");
                    this.Onoperator_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.RaiseDataMemberChanging("person_id");
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaiseDataMemberChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._attend_for_leave_id;
        }
    }
    
    /// <summary>
    /// The 'attend_record_base' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class attend_record_base : Entity
    {
        
        private string _attend_day;
        
        private int _attend_record_id;
        
        private int _attend_times;
        
        private int _attend_type;
        
        private int _class_order_id;
        
        private short _dev_group;
        
        private int _in_id;
        
        private int _in_leave_type_id;
        
        private int _in_out_times;
        
        private string _in_well_time;
        
        private int _is_valid;
        
        private int _leave_type_id;
        
        private int _locate_rec_count;
        
        private string _memo;
        
        private int _modify_type;
        
        private int _out_id;
        
        private int _out_leave_type_id;
        
        private string _out_well_time;
        
        private int _person_id;
        
        private int _work_cnt;
        
        private int _work_time;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onattend_dayChanging(string value);
        partial void Onattend_dayChanged();
        partial void Onattend_record_idChanging(int value);
        partial void Onattend_record_idChanged();
        partial void Onattend_timesChanging(int value);
        partial void Onattend_timesChanged();
        partial void Onattend_typeChanging(int value);
        partial void Onattend_typeChanged();
        partial void Onclass_order_idChanging(int value);
        partial void Onclass_order_idChanged();
        partial void Ondev_groupChanging(short value);
        partial void Ondev_groupChanged();
        partial void Onin_idChanging(int value);
        partial void Onin_idChanged();
        partial void Onin_leave_type_idChanging(int value);
        partial void Onin_leave_type_idChanged();
        partial void Onin_out_timesChanging(int value);
        partial void Onin_out_timesChanged();
        partial void Onin_well_timeChanging(string value);
        partial void Onin_well_timeChanged();
        partial void Onis_validChanging(int value);
        partial void Onis_validChanged();
        partial void Onleave_type_idChanging(int value);
        partial void Onleave_type_idChanged();
        partial void Onlocate_rec_countChanging(int value);
        partial void Onlocate_rec_countChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onmodify_typeChanging(int value);
        partial void Onmodify_typeChanged();
        partial void Onout_idChanging(int value);
        partial void Onout_idChanged();
        partial void Onout_leave_type_idChanging(int value);
        partial void Onout_leave_type_idChanged();
        partial void Onout_well_timeChanging(string value);
        partial void Onout_well_timeChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();
        partial void Onwork_cntChanging(int value);
        partial void Onwork_cntChanged();
        partial void Onwork_timeChanging(int value);
        partial void Onwork_timeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="attend_record_base"/> class.
        /// </summary>
        public attend_record_base()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'attend_day' value.
        /// </summary>
        [DataMember()]
        public string attend_day
        {
            get
            {
                return this._attend_day;
            }
            set
            {
                if ((this._attend_day != value))
                {
                    this.Onattend_dayChanging(value);
                    this.RaiseDataMemberChanging("attend_day");
                    this.ValidateProperty("attend_day", value);
                    this._attend_day = value;
                    this.RaiseDataMemberChanged("attend_day");
                    this.Onattend_dayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_record_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int attend_record_id
        {
            get
            {
                return this._attend_record_id;
            }
            set
            {
                if ((this._attend_record_id != value))
                {
                    this.Onattend_record_idChanging(value);
                    this.ValidateProperty("attend_record_id", value);
                    this._attend_record_id = value;
                    this.RaisePropertyChanged("attend_record_id");
                    this.Onattend_record_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_times' value.
        /// </summary>
        [DataMember()]
        public int attend_times
        {
            get
            {
                return this._attend_times;
            }
            set
            {
                if ((this._attend_times != value))
                {
                    this.Onattend_timesChanging(value);
                    this.RaiseDataMemberChanging("attend_times");
                    this.ValidateProperty("attend_times", value);
                    this._attend_times = value;
                    this.RaiseDataMemberChanged("attend_times");
                    this.Onattend_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_type' value.
        /// </summary>
        [DataMember()]
        public int attend_type
        {
            get
            {
                return this._attend_type;
            }
            set
            {
                if ((this._attend_type != value))
                {
                    this.Onattend_typeChanging(value);
                    this.RaiseDataMemberChanging("attend_type");
                    this.ValidateProperty("attend_type", value);
                    this._attend_type = value;
                    this.RaiseDataMemberChanged("attend_type");
                    this.Onattend_typeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_order_id' value.
        /// </summary>
        [DataMember()]
        public int class_order_id
        {
            get
            {
                return this._class_order_id;
            }
            set
            {
                if ((this._class_order_id != value))
                {
                    this.Onclass_order_idChanging(value);
                    this.RaiseDataMemberChanging("class_order_id");
                    this.ValidateProperty("class_order_id", value);
                    this._class_order_id = value;
                    this.RaiseDataMemberChanged("class_order_id");
                    this.Onclass_order_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'dev_group' value.
        /// </summary>
        [DataMember()]
        public short dev_group
        {
            get
            {
                return this._dev_group;
            }
            set
            {
                if ((this._dev_group != value))
                {
                    this.Ondev_groupChanging(value);
                    this.RaiseDataMemberChanging("dev_group");
                    this.ValidateProperty("dev_group", value);
                    this._dev_group = value;
                    this.RaiseDataMemberChanged("dev_group");
                    this.Ondev_groupChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_id' value.
        /// </summary>
        [DataMember()]
        public int in_id
        {
            get
            {
                return this._in_id;
            }
            set
            {
                if ((this._in_id != value))
                {
                    this.Onin_idChanging(value);
                    this.RaiseDataMemberChanging("in_id");
                    this.ValidateProperty("in_id", value);
                    this._in_id = value;
                    this.RaiseDataMemberChanged("in_id");
                    this.Onin_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_leave_type_id' value.
        /// </summary>
        [DataMember()]
        public int in_leave_type_id
        {
            get
            {
                return this._in_leave_type_id;
            }
            set
            {
                if ((this._in_leave_type_id != value))
                {
                    this.Onin_leave_type_idChanging(value);
                    this.RaiseDataMemberChanging("in_leave_type_id");
                    this.ValidateProperty("in_leave_type_id", value);
                    this._in_leave_type_id = value;
                    this.RaiseDataMemberChanged("in_leave_type_id");
                    this.Onin_leave_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_out_times' value.
        /// </summary>
        [DataMember()]
        public int in_out_times
        {
            get
            {
                return this._in_out_times;
            }
            set
            {
                if ((this._in_out_times != value))
                {
                    this.Onin_out_timesChanging(value);
                    this.RaiseDataMemberChanging("in_out_times");
                    this.ValidateProperty("in_out_times", value);
                    this._in_out_times = value;
                    this.RaiseDataMemberChanged("in_out_times");
                    this.Onin_out_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_well_time' value.
        /// </summary>
        [DataMember()]
        public string in_well_time
        {
            get
            {
                return this._in_well_time;
            }
            set
            {
                if ((this._in_well_time != value))
                {
                    this.Onin_well_timeChanging(value);
                    this.RaiseDataMemberChanging("in_well_time");
                    this.ValidateProperty("in_well_time", value);
                    this._in_well_time = value;
                    this.RaiseDataMemberChanged("in_well_time");
                    this.Onin_well_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_valid' value.
        /// </summary>
        [DataMember()]
        public int is_valid
        {
            get
            {
                return this._is_valid;
            }
            set
            {
                if ((this._is_valid != value))
                {
                    this.Onis_validChanging(value);
                    this.RaiseDataMemberChanging("is_valid");
                    this.ValidateProperty("is_valid", value);
                    this._is_valid = value;
                    this.RaiseDataMemberChanged("is_valid");
                    this.Onis_validChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'leave_type_id' value.
        /// </summary>
        [DataMember()]
        public int leave_type_id
        {
            get
            {
                return this._leave_type_id;
            }
            set
            {
                if ((this._leave_type_id != value))
                {
                    this.Onleave_type_idChanging(value);
                    this.RaiseDataMemberChanging("leave_type_id");
                    this.ValidateProperty("leave_type_id", value);
                    this._leave_type_id = value;
                    this.RaiseDataMemberChanged("leave_type_id");
                    this.Onleave_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'locate_rec_count' value.
        /// </summary>
        [DataMember()]
        public int locate_rec_count
        {
            get
            {
                return this._locate_rec_count;
            }
            set
            {
                if ((this._locate_rec_count != value))
                {
                    this.Onlocate_rec_countChanging(value);
                    this.RaiseDataMemberChanging("locate_rec_count");
                    this.ValidateProperty("locate_rec_count", value);
                    this._locate_rec_count = value;
                    this.RaiseDataMemberChanged("locate_rec_count");
                    this.Onlocate_rec_countChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'modify_type' value.
        /// </summary>
        [DataMember()]
        public int modify_type
        {
            get
            {
                return this._modify_type;
            }
            set
            {
                if ((this._modify_type != value))
                {
                    this.Onmodify_typeChanging(value);
                    this.RaiseDataMemberChanging("modify_type");
                    this.ValidateProperty("modify_type", value);
                    this._modify_type = value;
                    this.RaiseDataMemberChanged("modify_type");
                    this.Onmodify_typeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'out_id' value.
        /// </summary>
        [DataMember()]
        public int out_id
        {
            get
            {
                return this._out_id;
            }
            set
            {
                if ((this._out_id != value))
                {
                    this.Onout_idChanging(value);
                    this.RaiseDataMemberChanging("out_id");
                    this.ValidateProperty("out_id", value);
                    this._out_id = value;
                    this.RaiseDataMemberChanged("out_id");
                    this.Onout_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'out_leave_type_id' value.
        /// </summary>
        [DataMember()]
        public int out_leave_type_id
        {
            get
            {
                return this._out_leave_type_id;
            }
            set
            {
                if ((this._out_leave_type_id != value))
                {
                    this.Onout_leave_type_idChanging(value);
                    this.RaiseDataMemberChanging("out_leave_type_id");
                    this.ValidateProperty("out_leave_type_id", value);
                    this._out_leave_type_id = value;
                    this.RaiseDataMemberChanged("out_leave_type_id");
                    this.Onout_leave_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'out_well_time' value.
        /// </summary>
        [DataMember()]
        public string out_well_time
        {
            get
            {
                return this._out_well_time;
            }
            set
            {
                if ((this._out_well_time != value))
                {
                    this.Onout_well_timeChanging(value);
                    this.RaiseDataMemberChanging("out_well_time");
                    this.ValidateProperty("out_well_time", value);
                    this._out_well_time = value;
                    this.RaiseDataMemberChanged("out_well_time");
                    this.Onout_well_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.RaiseDataMemberChanging("person_id");
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaiseDataMemberChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_cnt' value.
        /// </summary>
        [DataMember()]
        public int work_cnt
        {
            get
            {
                return this._work_cnt;
            }
            set
            {
                if ((this._work_cnt != value))
                {
                    this.Onwork_cntChanging(value);
                    this.RaiseDataMemberChanging("work_cnt");
                    this.ValidateProperty("work_cnt", value);
                    this._work_cnt = value;
                    this.RaiseDataMemberChanged("work_cnt");
                    this.Onwork_cntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_time' value.
        /// </summary>
        [DataMember()]
        public int work_time
        {
            get
            {
                return this._work_time;
            }
            set
            {
                if ((this._work_time != value))
                {
                    this.Onwork_timeChanging(value);
                    this.RaiseDataMemberChanging("work_time");
                    this.ValidateProperty("work_time", value);
                    this._work_time = value;
                    this.RaiseDataMemberChanged("work_time");
                    this.Onwork_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._attend_record_id;
        }
    }
    
    /// <summary>
    /// The 'backup_param' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class backup_param : Entity
    {
        
        private string _backup_destination;
        
        private string _concrete_time;
        
        private int _is_compress;
        
        private int _is_integrity;
        
        private int _period;
        
        private int _sub_period;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onbackup_destinationChanging(string value);
        partial void Onbackup_destinationChanged();
        partial void Onconcrete_timeChanging(string value);
        partial void Onconcrete_timeChanged();
        partial void Onis_compressChanging(int value);
        partial void Onis_compressChanged();
        partial void Onis_integrityChanging(int value);
        partial void Onis_integrityChanged();
        partial void OnperiodChanging(int value);
        partial void OnperiodChanged();
        partial void Onsub_periodChanging(int value);
        partial void Onsub_periodChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="backup_param"/> class.
        /// </summary>
        public backup_param()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'backup_destination' value.
        /// </summary>
        [DataMember()]
        public string backup_destination
        {
            get
            {
                return this._backup_destination;
            }
            set
            {
                if ((this._backup_destination != value))
                {
                    this.Onbackup_destinationChanging(value);
                    this.RaiseDataMemberChanging("backup_destination");
                    this.ValidateProperty("backup_destination", value);
                    this._backup_destination = value;
                    this.RaiseDataMemberChanged("backup_destination");
                    this.Onbackup_destinationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'concrete_time' value.
        /// </summary>
        [DataMember()]
        public string concrete_time
        {
            get
            {
                return this._concrete_time;
            }
            set
            {
                if ((this._concrete_time != value))
                {
                    this.Onconcrete_timeChanging(value);
                    this.RaiseDataMemberChanging("concrete_time");
                    this.ValidateProperty("concrete_time", value);
                    this._concrete_time = value;
                    this.RaiseDataMemberChanged("concrete_time");
                    this.Onconcrete_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_compress' value.
        /// </summary>
        [DataMember()]
        public int is_compress
        {
            get
            {
                return this._is_compress;
            }
            set
            {
                if ((this._is_compress != value))
                {
                    this.Onis_compressChanging(value);
                    this.RaiseDataMemberChanging("is_compress");
                    this.ValidateProperty("is_compress", value);
                    this._is_compress = value;
                    this.RaiseDataMemberChanged("is_compress");
                    this.Onis_compressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_integrity' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int is_integrity
        {
            get
            {
                return this._is_integrity;
            }
            set
            {
                if ((this._is_integrity != value))
                {
                    this.Onis_integrityChanging(value);
                    this.ValidateProperty("is_integrity", value);
                    this._is_integrity = value;
                    this.RaisePropertyChanged("is_integrity");
                    this.Onis_integrityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'period' value.
        /// </summary>
        [DataMember()]
        public int period
        {
            get
            {
                return this._period;
            }
            set
            {
                if ((this._period != value))
                {
                    this.OnperiodChanging(value);
                    this.RaiseDataMemberChanging("period");
                    this.ValidateProperty("period", value);
                    this._period = value;
                    this.RaiseDataMemberChanged("period");
                    this.OnperiodChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sub_period' value.
        /// </summary>
        [DataMember()]
        public int sub_period
        {
            get
            {
                return this._sub_period;
            }
            set
            {
                if ((this._sub_period != value))
                {
                    this.Onsub_periodChanging(value);
                    this.RaiseDataMemberChanging("sub_period");
                    this.ValidateProperty("sub_period", value);
                    this._sub_period = value;
                    this.RaiseDataMemberChanged("sub_period");
                    this.Onsub_periodChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._is_integrity;
        }
    }
    
    /// <summary>
    /// The 'depart' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class depart : Entity
    {
        
        private string _company_sn;
        
        private string _contact_phone;
        
        private string _create_time;
        
        private string _delete_time;
        
        private string _depart_auth;
        
        private string _depart_director;
        
        private int _depart_function_id;
        
        private int _depart_id;
        
        private string _depart_name;
        
        private string _depart_sn;
        
        private int _depart_work_place_id;
        
        private string _memo;
        
        private int _parent_depart_id;
        
        private string _update_time;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Oncompany_snChanging(string value);
        partial void Oncompany_snChanged();
        partial void Oncontact_phoneChanging(string value);
        partial void Oncontact_phoneChanged();
        partial void Oncreate_timeChanging(string value);
        partial void Oncreate_timeChanged();
        partial void Ondelete_timeChanging(string value);
        partial void Ondelete_timeChanged();
        partial void Ondepart_authChanging(string value);
        partial void Ondepart_authChanged();
        partial void Ondepart_directorChanging(string value);
        partial void Ondepart_directorChanged();
        partial void Ondepart_function_idChanging(int value);
        partial void Ondepart_function_idChanged();
        partial void Ondepart_idChanging(int value);
        partial void Ondepart_idChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Ondepart_snChanging(string value);
        partial void Ondepart_snChanged();
        partial void Ondepart_work_place_idChanging(int value);
        partial void Ondepart_work_place_idChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onparent_depart_idChanging(int value);
        partial void Onparent_depart_idChanged();
        partial void Onupdate_timeChanging(string value);
        partial void Onupdate_timeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="depart"/> class.
        /// </summary>
        public depart()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'company_sn' value.
        /// </summary>
        [DataMember()]
        public string company_sn
        {
            get
            {
                return this._company_sn;
            }
            set
            {
                if ((this._company_sn != value))
                {
                    this.Oncompany_snChanging(value);
                    this.RaiseDataMemberChanging("company_sn");
                    this.ValidateProperty("company_sn", value);
                    this._company_sn = value;
                    this.RaiseDataMemberChanged("company_sn");
                    this.Oncompany_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'contact_phone' value.
        /// </summary>
        [DataMember()]
        public string contact_phone
        {
            get
            {
                return this._contact_phone;
            }
            set
            {
                if ((this._contact_phone != value))
                {
                    this.Oncontact_phoneChanging(value);
                    this.RaiseDataMemberChanging("contact_phone");
                    this.ValidateProperty("contact_phone", value);
                    this._contact_phone = value;
                    this.RaiseDataMemberChanged("contact_phone");
                    this.Oncontact_phoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'create_time' value.
        /// </summary>
        [DataMember()]
        public string create_time
        {
            get
            {
                return this._create_time;
            }
            set
            {
                if ((this._create_time != value))
                {
                    this.Oncreate_timeChanging(value);
                    this.RaiseDataMemberChanging("create_time");
                    this.ValidateProperty("create_time", value);
                    this._create_time = value;
                    this.RaiseDataMemberChanged("create_time");
                    this.Oncreate_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'delete_time' value.
        /// </summary>
        [DataMember()]
        public string delete_time
        {
            get
            {
                return this._delete_time;
            }
            set
            {
                if ((this._delete_time != value))
                {
                    this.Ondelete_timeChanging(value);
                    this.RaiseDataMemberChanging("delete_time");
                    this.ValidateProperty("delete_time", value);
                    this._delete_time = value;
                    this.RaiseDataMemberChanged("delete_time");
                    this.Ondelete_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_auth' value.
        /// </summary>
        [DataMember()]
        public string depart_auth
        {
            get
            {
                return this._depart_auth;
            }
            set
            {
                if ((this._depart_auth != value))
                {
                    this.Ondepart_authChanging(value);
                    this.RaiseDataMemberChanging("depart_auth");
                    this.ValidateProperty("depart_auth", value);
                    this._depart_auth = value;
                    this.RaiseDataMemberChanged("depart_auth");
                    this.Ondepart_authChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_director' value.
        /// </summary>
        [DataMember()]
        public string depart_director
        {
            get
            {
                return this._depart_director;
            }
            set
            {
                if ((this._depart_director != value))
                {
                    this.Ondepart_directorChanging(value);
                    this.RaiseDataMemberChanging("depart_director");
                    this.ValidateProperty("depart_director", value);
                    this._depart_director = value;
                    this.RaiseDataMemberChanged("depart_director");
                    this.Ondepart_directorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_function_id' value.
        /// </summary>
        [DataMember()]
        public int depart_function_id
        {
            get
            {
                return this._depart_function_id;
            }
            set
            {
                if ((this._depart_function_id != value))
                {
                    this.Ondepart_function_idChanging(value);
                    this.RaiseDataMemberChanging("depart_function_id");
                    this.ValidateProperty("depart_function_id", value);
                    this._depart_function_id = value;
                    this.RaiseDataMemberChanged("depart_function_id");
                    this.Ondepart_function_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int depart_id
        {
            get
            {
                return this._depart_id;
            }
            set
            {
                if ((this._depart_id != value))
                {
                    this.Ondepart_idChanging(value);
                    this.ValidateProperty("depart_id", value);
                    this._depart_id = value;
                    this.RaisePropertyChanged("depart_id");
                    this.Ondepart_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_sn' value.
        /// </summary>
        [DataMember()]
        public string depart_sn
        {
            get
            {
                return this._depart_sn;
            }
            set
            {
                if ((this._depart_sn != value))
                {
                    this.Ondepart_snChanging(value);
                    this.RaiseDataMemberChanging("depart_sn");
                    this.ValidateProperty("depart_sn", value);
                    this._depart_sn = value;
                    this.RaiseDataMemberChanged("depart_sn");
                    this.Ondepart_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_work_place_id' value.
        /// </summary>
        [DataMember()]
        public int depart_work_place_id
        {
            get
            {
                return this._depart_work_place_id;
            }
            set
            {
                if ((this._depart_work_place_id != value))
                {
                    this.Ondepart_work_place_idChanging(value);
                    this.RaiseDataMemberChanging("depart_work_place_id");
                    this.ValidateProperty("depart_work_place_id", value);
                    this._depart_work_place_id = value;
                    this.RaiseDataMemberChanged("depart_work_place_id");
                    this.Ondepart_work_place_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'parent_depart_id' value.
        /// </summary>
        [DataMember()]
        public int parent_depart_id
        {
            get
            {
                return this._parent_depart_id;
            }
            set
            {
                if ((this._parent_depart_id != value))
                {
                    this.Onparent_depart_idChanging(value);
                    this.RaiseDataMemberChanging("parent_depart_id");
                    this.ValidateProperty("parent_depart_id", value);
                    this._parent_depart_id = value;
                    this.RaiseDataMemberChanged("parent_depart_id");
                    this.Onparent_depart_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'update_time' value.
        /// </summary>
        [DataMember()]
        public string update_time
        {
            get
            {
                return this._update_time;
            }
            set
            {
                if ((this._update_time != value))
                {
                    this.Onupdate_timeChanging(value);
                    this.RaiseDataMemberChanging("update_time");
                    this.ValidateProperty("update_time", value);
                    this._update_time = value;
                    this.RaiseDataMemberChanged("update_time");
                    this.Onupdate_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._depart_id;
        }
    }
    
    /// <summary>
    /// The 'DeviceInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class DeviceInfo : Entity
    {
        
        private string _dev_function;
        
        private string _dev_sn;
        
        private int _dev_type;
        
        private IEnumerable<string> _dev_type_List;
        
        private string _dev_type_string;
        
        private string _dev_type_strings;
        
        private bool _isSelected;
        
        private string _place;
        
        private string _start_time;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Ondev_functionChanging(string value);
        partial void Ondev_functionChanged();
        partial void Ondev_snChanging(string value);
        partial void Ondev_snChanged();
        partial void Ondev_typeChanging(int value);
        partial void Ondev_typeChanged();
        partial void Ondev_type_ListChanging(IEnumerable<string> value);
        partial void Ondev_type_ListChanged();
        partial void Ondev_type_stringChanging(string value);
        partial void Ondev_type_stringChanged();
        partial void Ondev_type_stringsChanging(string value);
        partial void Ondev_type_stringsChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void OnplaceChanging(string value);
        partial void OnplaceChanged();
        partial void Onstart_timeChanging(string value);
        partial void Onstart_timeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceInfo"/> class.
        /// </summary>
        public DeviceInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'dev_function' value.
        /// </summary>
        [DataMember()]
        public string dev_function
        {
            get
            {
                return this._dev_function;
            }
            set
            {
                if ((this._dev_function != value))
                {
                    this.Ondev_functionChanging(value);
                    this.RaiseDataMemberChanging("dev_function");
                    this.ValidateProperty("dev_function", value);
                    this._dev_function = value;
                    this.RaiseDataMemberChanged("dev_function");
                    this.Ondev_functionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'dev_sn' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string dev_sn
        {
            get
            {
                return this._dev_sn;
            }
            set
            {
                if ((this._dev_sn != value))
                {
                    this.Ondev_snChanging(value);
                    this.ValidateProperty("dev_sn", value);
                    this._dev_sn = value;
                    this.RaisePropertyChanged("dev_sn");
                    this.Ondev_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'dev_type' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int dev_type
        {
            get
            {
                return this._dev_type;
            }
            set
            {
                if ((this._dev_type != value))
                {
                    this.Ondev_typeChanging(value);
                    this.ValidateProperty("dev_type", value);
                    this._dev_type = value;
                    this.RaisePropertyChanged("dev_type");
                    this.Ondev_typeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'dev_type_List' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<string> dev_type_List
        {
            get
            {
                return this._dev_type_List;
            }
            set
            {
                if ((this._dev_type_List != value))
                {
                    this.Ondev_type_ListChanging(value);
                    this.RaiseDataMemberChanging("dev_type_List");
                    this.ValidateProperty("dev_type_List", value);
                    this._dev_type_List = value;
                    this.RaiseDataMemberChanged("dev_type_List");
                    this.Ondev_type_ListChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'dev_type_string' value.
        /// </summary>
        [DataMember()]
        public string dev_type_string
        {
            get
            {
                return this._dev_type_string;
            }
            set
            {
                if ((this._dev_type_string != value))
                {
                    this.Ondev_type_stringChanging(value);
                    this.RaiseDataMemberChanging("dev_type_string");
                    this.ValidateProperty("dev_type_string", value);
                    this._dev_type_string = value;
                    this.RaiseDataMemberChanged("dev_type_string");
                    this.Ondev_type_stringChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'dev_type_strings' value.
        /// </summary>
        [DataMember()]
        public string dev_type_strings
        {
            get
            {
                return this._dev_type_strings;
            }
            set
            {
                if ((this._dev_type_strings != value))
                {
                    this.Ondev_type_stringsChanging(value);
                    this.RaiseDataMemberChanging("dev_type_strings");
                    this.ValidateProperty("dev_type_strings", value);
                    this._dev_type_strings = value;
                    this.RaiseDataMemberChanged("dev_type_strings");
                    this.Ondev_type_stringsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'place' value.
        /// </summary>
        [DataMember()]
        public string place
        {
            get
            {
                return this._place;
            }
            set
            {
                if ((this._place != value))
                {
                    this.OnplaceChanging(value);
                    this.RaiseDataMemberChanging("place");
                    this.ValidateProperty("place", value);
                    this._place = value;
                    this.RaiseDataMemberChanged("place");
                    this.OnplaceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'start_time' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string start_time
        {
            get
            {
                return this._start_time;
            }
            set
            {
                if ((this._start_time != value))
                {
                    this.Onstart_timeChanging(value);
                    this.ValidateProperty("start_time", value);
                    this._start_time = value;
                    this.RaisePropertyChanged("start_time");
                    this.Onstart_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._dev_sn == null) 
                        || (this._start_time == null)))
            {
                return null;
            }
            return EntityKey.Create(this._dev_sn, this._dev_type, this._start_time);
        }
    }
    
    /// <summary>
    /// The 'FestivalInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class FestivalInfo : Entity
    {
        
        private string _begin_time;
        
        private string _end_time;
        
        private int _festival_id;
        
        private bool _isSelected;
        
        private string _memo;
        
        private string _name;
        
        private string _shiftHoliday;
        
        private IEnumerable<DateTime> _shiftHolidayList;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onbegin_timeChanging(string value);
        partial void Onbegin_timeChanged();
        partial void Onend_timeChanging(string value);
        partial void Onend_timeChanged();
        partial void Onfestival_idChanging(int value);
        partial void Onfestival_idChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void OnShiftHolidayChanging(string value);
        partial void OnShiftHolidayChanged();
        partial void OnShiftHolidayListChanging(IEnumerable<DateTime> value);
        partial void OnShiftHolidayListChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FestivalInfo"/> class.
        /// </summary>
        public FestivalInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'begin_time' value.
        /// </summary>
        [DataMember()]
        public string begin_time
        {
            get
            {
                return this._begin_time;
            }
            set
            {
                if ((this._begin_time != value))
                {
                    this.Onbegin_timeChanging(value);
                    this.RaiseDataMemberChanging("begin_time");
                    this.ValidateProperty("begin_time", value);
                    this._begin_time = value;
                    this.RaiseDataMemberChanged("begin_time");
                    this.Onbegin_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'end_time' value.
        /// </summary>
        [DataMember()]
        public string end_time
        {
            get
            {
                return this._end_time;
            }
            set
            {
                if ((this._end_time != value))
                {
                    this.Onend_timeChanging(value);
                    this.RaiseDataMemberChanging("end_time");
                    this.ValidateProperty("end_time", value);
                    this._end_time = value;
                    this.RaiseDataMemberChanged("end_time");
                    this.Onend_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'festival_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int festival_id
        {
            get
            {
                return this._festival_id;
            }
            set
            {
                if ((this._festival_id != value))
                {
                    this.Onfestival_idChanging(value);
                    this.ValidateProperty("festival_id", value);
                    this._festival_id = value;
                    this.RaisePropertyChanged("festival_id");
                    this.Onfestival_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'name' value.
        /// </summary>
        [DataMember()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.RaiseDataMemberChanging("name");
                    this.ValidateProperty("name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("name");
                    this.OnnameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShiftHoliday' value.
        /// </summary>
        [DataMember()]
        public string ShiftHoliday
        {
            get
            {
                return this._shiftHoliday;
            }
            set
            {
                if ((this._shiftHoliday != value))
                {
                    this.OnShiftHolidayChanging(value);
                    this.RaiseDataMemberChanging("ShiftHoliday");
                    this.ValidateProperty("ShiftHoliday", value);
                    this._shiftHoliday = value;
                    this.RaiseDataMemberChanged("ShiftHoliday");
                    this.OnShiftHolidayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShiftHolidayList' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<DateTime> ShiftHolidayList
        {
            get
            {
                return this._shiftHolidayList;
            }
            set
            {
                if ((this._shiftHolidayList != value))
                {
                    this.OnShiftHolidayListChanging(value);
                    this.RaiseDataMemberChanging("ShiftHolidayList");
                    this.ValidateProperty("ShiftHolidayList", value);
                    this._shiftHolidayList = value;
                    this.RaiseDataMemberChanged("ShiftHolidayList");
                    this.OnShiftHolidayListChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._festival_id;
        }
    }
    
    /// <summary>
    /// The 'LeaveType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class LeaveType : Entity
    {
        
        private string _attend_sign;
        
        private string _create_time;
        
        private short _delete_info;
        
        private short _is_normal_attend;
        
        private string _is_normal_attendStr;
        
        private int _is_schedule;
        
        private string _is_scheduleStr;
        
        private bool _isSelected;
        
        private short _leave_type_class;
        
        private int _leave_type_id;
        
        private string _leave_type_name;
        
        private string _memo;
        
        private int _priority;
        
        private int _system_defined;
        
        private string _update_time;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onattend_signChanging(string value);
        partial void Onattend_signChanged();
        partial void Oncreate_timeChanging(string value);
        partial void Oncreate_timeChanged();
        partial void Ondelete_infoChanging(short value);
        partial void Ondelete_infoChanged();
        partial void Onis_normal_attendChanging(short value);
        partial void Onis_normal_attendChanged();
        partial void Onis_normal_attendStrChanging(string value);
        partial void Onis_normal_attendStrChanged();
        partial void Onis_scheduleChanging(int value);
        partial void Onis_scheduleChanged();
        partial void Onis_scheduleStrChanging(string value);
        partial void Onis_scheduleStrChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void Onleave_type_classChanging(short value);
        partial void Onleave_type_classChanged();
        partial void Onleave_type_idChanging(int value);
        partial void Onleave_type_idChanged();
        partial void Onleave_type_nameChanging(string value);
        partial void Onleave_type_nameChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void OnpriorityChanging(int value);
        partial void OnpriorityChanged();
        partial void Onsystem_definedChanging(int value);
        partial void Onsystem_definedChanged();
        partial void Onupdate_timeChanging(string value);
        partial void Onupdate_timeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaveType"/> class.
        /// </summary>
        public LeaveType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'attend_sign' value.
        /// </summary>
        [DataMember()]
        public string attend_sign
        {
            get
            {
                return this._attend_sign;
            }
            set
            {
                if ((this._attend_sign != value))
                {
                    this.Onattend_signChanging(value);
                    this.RaiseDataMemberChanging("attend_sign");
                    this.ValidateProperty("attend_sign", value);
                    this._attend_sign = value;
                    this.RaiseDataMemberChanged("attend_sign");
                    this.Onattend_signChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'create_time' value.
        /// </summary>
        [DataMember()]
        public string create_time
        {
            get
            {
                return this._create_time;
            }
            set
            {
                if ((this._create_time != value))
                {
                    this.Oncreate_timeChanging(value);
                    this.RaiseDataMemberChanging("create_time");
                    this.ValidateProperty("create_time", value);
                    this._create_time = value;
                    this.RaiseDataMemberChanged("create_time");
                    this.Oncreate_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'delete_info' value.
        /// </summary>
        [DataMember()]
        public short delete_info
        {
            get
            {
                return this._delete_info;
            }
            set
            {
                if ((this._delete_info != value))
                {
                    this.Ondelete_infoChanging(value);
                    this.RaiseDataMemberChanging("delete_info");
                    this.ValidateProperty("delete_info", value);
                    this._delete_info = value;
                    this.RaiseDataMemberChanged("delete_info");
                    this.Ondelete_infoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_normal_attend' value.
        /// </summary>
        [DataMember()]
        public short is_normal_attend
        {
            get
            {
                return this._is_normal_attend;
            }
            set
            {
                if ((this._is_normal_attend != value))
                {
                    this.Onis_normal_attendChanging(value);
                    this.RaiseDataMemberChanging("is_normal_attend");
                    this.ValidateProperty("is_normal_attend", value);
                    this._is_normal_attend = value;
                    this.RaiseDataMemberChanged("is_normal_attend");
                    this.Onis_normal_attendChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_normal_attendStr' value.
        /// </summary>
        [DataMember()]
        public string is_normal_attendStr
        {
            get
            {
                return this._is_normal_attendStr;
            }
            set
            {
                if ((this._is_normal_attendStr != value))
                {
                    this.Onis_normal_attendStrChanging(value);
                    this.RaiseDataMemberChanging("is_normal_attendStr");
                    this.ValidateProperty("is_normal_attendStr", value);
                    this._is_normal_attendStr = value;
                    this.RaiseDataMemberChanged("is_normal_attendStr");
                    this.Onis_normal_attendStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_schedule' value.
        /// </summary>
        [DataMember()]
        public int is_schedule
        {
            get
            {
                return this._is_schedule;
            }
            set
            {
                if ((this._is_schedule != value))
                {
                    this.Onis_scheduleChanging(value);
                    this.RaiseDataMemberChanging("is_schedule");
                    this.ValidateProperty("is_schedule", value);
                    this._is_schedule = value;
                    this.RaiseDataMemberChanged("is_schedule");
                    this.Onis_scheduleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_scheduleStr' value.
        /// </summary>
        [DataMember()]
        public string is_scheduleStr
        {
            get
            {
                return this._is_scheduleStr;
            }
            set
            {
                if ((this._is_scheduleStr != value))
                {
                    this.Onis_scheduleStrChanging(value);
                    this.RaiseDataMemberChanging("is_scheduleStr");
                    this.ValidateProperty("is_scheduleStr", value);
                    this._is_scheduleStr = value;
                    this.RaiseDataMemberChanged("is_scheduleStr");
                    this.Onis_scheduleStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'leave_type_class' value.
        /// </summary>
        [DataMember()]
        public short leave_type_class
        {
            get
            {
                return this._leave_type_class;
            }
            set
            {
                if ((this._leave_type_class != value))
                {
                    this.Onleave_type_classChanging(value);
                    this.RaiseDataMemberChanging("leave_type_class");
                    this.ValidateProperty("leave_type_class", value);
                    this._leave_type_class = value;
                    this.RaiseDataMemberChanged("leave_type_class");
                    this.Onleave_type_classChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'leave_type_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int leave_type_id
        {
            get
            {
                return this._leave_type_id;
            }
            set
            {
                if ((this._leave_type_id != value))
                {
                    this.Onleave_type_idChanging(value);
                    this.ValidateProperty("leave_type_id", value);
                    this._leave_type_id = value;
                    this.RaisePropertyChanged("leave_type_id");
                    this.Onleave_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'leave_type_name' value.
        /// </summary>
        [DataMember()]
        public string leave_type_name
        {
            get
            {
                return this._leave_type_name;
            }
            set
            {
                if ((this._leave_type_name != value))
                {
                    this.Onleave_type_nameChanging(value);
                    this.RaiseDataMemberChanging("leave_type_name");
                    this.ValidateProperty("leave_type_name", value);
                    this._leave_type_name = value;
                    this.RaiseDataMemberChanged("leave_type_name");
                    this.Onleave_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'priority' value.
        /// </summary>
        [DataMember()]
        public int priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                if ((this._priority != value))
                {
                    this.OnpriorityChanging(value);
                    this.RaiseDataMemberChanging("priority");
                    this.ValidateProperty("priority", value);
                    this._priority = value;
                    this.RaiseDataMemberChanged("priority");
                    this.OnpriorityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'system_defined' value.
        /// </summary>
        [DataMember()]
        public int system_defined
        {
            get
            {
                return this._system_defined;
            }
            set
            {
                if ((this._system_defined != value))
                {
                    this.Onsystem_definedChanging(value);
                    this.RaiseDataMemberChanging("system_defined");
                    this.ValidateProperty("system_defined", value);
                    this._system_defined = value;
                    this.RaiseDataMemberChanged("system_defined");
                    this.Onsystem_definedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'update_time' value.
        /// </summary>
        [DataMember()]
        public string update_time
        {
            get
            {
                return this._update_time;
            }
            set
            {
                if ((this._update_time != value))
                {
                    this.Onupdate_timeChanging(value);
                    this.RaiseDataMemberChanging("update_time");
                    this.ValidateProperty("update_time", value);
                    this._update_time = value;
                    this.RaiseDataMemberChanged("update_time");
                    this.Onupdate_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._leave_type_id;
        }
    }
    
    /// <summary>
    /// The 'operator_info' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class operator_info : Entity
    {
        
        private string _logname;
        
        private int _operator_id;
        
        private int _operator_type;
        
        private string _password;
        
        private string _realityname;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnlognameChanging(string value);
        partial void OnlognameChanged();
        partial void Onoperator_idChanging(int value);
        partial void Onoperator_idChanged();
        partial void Onoperator_typeChanging(int value);
        partial void Onoperator_typeChanged();
        partial void OnpasswordChanging(string value);
        partial void OnpasswordChanged();
        partial void OnrealitynameChanging(string value);
        partial void OnrealitynameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="operator_info"/> class.
        /// </summary>
        public operator_info()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'logname' value.
        /// </summary>
        [DataMember()]
        public string logname
        {
            get
            {
                return this._logname;
            }
            set
            {
                if ((this._logname != value))
                {
                    this.OnlognameChanging(value);
                    this.RaiseDataMemberChanging("logname");
                    this.ValidateProperty("logname", value);
                    this._logname = value;
                    this.RaiseDataMemberChanged("logname");
                    this.OnlognameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'operator_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int operator_id
        {
            get
            {
                return this._operator_id;
            }
            set
            {
                if ((this._operator_id != value))
                {
                    this.Onoperator_idChanging(value);
                    this.ValidateProperty("operator_id", value);
                    this._operator_id = value;
                    this.RaisePropertyChanged("operator_id");
                    this.Onoperator_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'operator_type' value.
        /// </summary>
        [DataMember()]
        public int operator_type
        {
            get
            {
                return this._operator_type;
            }
            set
            {
                if ((this._operator_type != value))
                {
                    this.Onoperator_typeChanging(value);
                    this.RaiseDataMemberChanging("operator_type");
                    this.ValidateProperty("operator_type", value);
                    this._operator_type = value;
                    this.RaiseDataMemberChanged("operator_type");
                    this.Onoperator_typeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'password' value.
        /// </summary>
        [DataMember()]
        public string password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnpasswordChanging(value);
                    this.RaiseDataMemberChanging("password");
                    this.ValidateProperty("password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("password");
                    this.OnpasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'realityname' value.
        /// </summary>
        [DataMember()]
        public string realityname
        {
            get
            {
                return this._realityname;
            }
            set
            {
                if ((this._realityname != value))
                {
                    this.OnrealitynameChanging(value);
                    this.RaiseDataMemberChanging("realityname");
                    this.ValidateProperty("realityname", value);
                    this._realityname = value;
                    this.RaiseDataMemberChanged("realityname");
                    this.OnrealitynameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._operator_id;
        }
    }
    
    /// <summary>
    /// The 'operator_potence' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class operator_potence : Entity
    {
        
        private int _depart_id;
        
        private int _operator_id;
        
        private int _operator_potence_id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Ondepart_idChanging(int value);
        partial void Ondepart_idChanged();
        partial void Onoperator_idChanging(int value);
        partial void Onoperator_idChanged();
        partial void Onoperator_potence_idChanging(int value);
        partial void Onoperator_potence_idChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="operator_potence"/> class.
        /// </summary>
        public operator_potence()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'depart_id' value.
        /// </summary>
        [DataMember()]
        public int depart_id
        {
            get
            {
                return this._depart_id;
            }
            set
            {
                if ((this._depart_id != value))
                {
                    this.Ondepart_idChanging(value);
                    this.RaiseDataMemberChanging("depart_id");
                    this.ValidateProperty("depart_id", value);
                    this._depart_id = value;
                    this.RaiseDataMemberChanged("depart_id");
                    this.Ondepart_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'operator_id' value.
        /// </summary>
        [DataMember()]
        public int operator_id
        {
            get
            {
                return this._operator_id;
            }
            set
            {
                if ((this._operator_id != value))
                {
                    this.Onoperator_idChanging(value);
                    this.RaiseDataMemberChanging("operator_id");
                    this.ValidateProperty("operator_id", value);
                    this._operator_id = value;
                    this.RaiseDataMemberChanged("operator_id");
                    this.Onoperator_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'operator_potence_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int operator_potence_id
        {
            get
            {
                return this._operator_potence_id;
            }
            set
            {
                if ((this._operator_potence_id != value))
                {
                    this.Onoperator_potence_idChanging(value);
                    this.ValidateProperty("operator_potence_id", value);
                    this._operator_potence_id = value;
                    this.RaisePropertyChanged("operator_potence_id");
                    this.Onoperator_potence_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._operator_potence_id;
        }
    }
    
    /// <summary>
    /// The 'operator_purview' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class operator_purview : Entity
    {
        
        private int _oper_purv_id;
        
        private int _operator_id;
        
        private int _purview_id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onoper_purv_idChanging(int value);
        partial void Onoper_purv_idChanged();
        partial void Onoperator_idChanging(int value);
        partial void Onoperator_idChanged();
        partial void Onpurview_idChanging(int value);
        partial void Onpurview_idChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="operator_purview"/> class.
        /// </summary>
        public operator_purview()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'oper_purv_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int oper_purv_id
        {
            get
            {
                return this._oper_purv_id;
            }
            set
            {
                if ((this._oper_purv_id != value))
                {
                    this.Onoper_purv_idChanging(value);
                    this.ValidateProperty("oper_purv_id", value);
                    this._oper_purv_id = value;
                    this.RaisePropertyChanged("oper_purv_id");
                    this.Onoper_purv_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'operator_id' value.
        /// </summary>
        [DataMember()]
        public int operator_id
        {
            get
            {
                return this._operator_id;
            }
            set
            {
                if ((this._operator_id != value))
                {
                    this.Onoperator_idChanging(value);
                    this.RaiseDataMemberChanging("operator_id");
                    this.ValidateProperty("operator_id", value);
                    this._operator_id = value;
                    this.RaiseDataMemberChanged("operator_id");
                    this.Onoperator_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'purview_id' value.
        /// </summary>
        [DataMember()]
        public int purview_id
        {
            get
            {
                return this._purview_id;
            }
            set
            {
                if ((this._purview_id != value))
                {
                    this.Onpurview_idChanging(value);
                    this.RaiseDataMemberChanging("purview_id");
                    this.ValidateProperty("purview_id", value);
                    this._purview_id = value;
                    this.RaiseDataMemberChanged("purview_id");
                    this.Onpurview_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._oper_purv_id;
        }
    }
    
    /// <summary>
    /// The 'OptionInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class OptionInfo : Entity
    {
        
        private bool _isNotifySuccess;
        
        private bool _isSuccess;
        
        private string _option_info;
        
        private int _option_info_id;
        
        private int _tag;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnisNotifySuccessChanging(bool value);
        partial void OnisNotifySuccessChanged();
        partial void OnisSuccessChanging(bool value);
        partial void OnisSuccessChanged();
        partial void Onoption_infoChanging(string value);
        partial void Onoption_infoChanged();
        partial void Onoption_info_idChanging(int value);
        partial void Onoption_info_idChanged();
        partial void OntagChanging(int value);
        partial void OntagChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionInfo"/> class.
        /// </summary>
        public OptionInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'isNotifySuccess' value.
        /// </summary>
        [DataMember()]
        public bool isNotifySuccess
        {
            get
            {
                return this._isNotifySuccess;
            }
            set
            {
                if ((this._isNotifySuccess != value))
                {
                    this.OnisNotifySuccessChanging(value);
                    this.RaiseDataMemberChanging("isNotifySuccess");
                    this.ValidateProperty("isNotifySuccess", value);
                    this._isNotifySuccess = value;
                    this.RaiseDataMemberChanged("isNotifySuccess");
                    this.OnisNotifySuccessChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSuccess' value.
        /// </summary>
        [DataMember()]
        public bool isSuccess
        {
            get
            {
                return this._isSuccess;
            }
            set
            {
                if ((this._isSuccess != value))
                {
                    this.OnisSuccessChanging(value);
                    this.RaiseDataMemberChanging("isSuccess");
                    this.ValidateProperty("isSuccess", value);
                    this._isSuccess = value;
                    this.RaiseDataMemberChanged("isSuccess");
                    this.OnisSuccessChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'option_info' value.
        /// </summary>
        [DataMember()]
        public string option_info
        {
            get
            {
                return this._option_info;
            }
            set
            {
                if ((this._option_info != value))
                {
                    this.Onoption_infoChanging(value);
                    this.RaiseDataMemberChanging("option_info");
                    this.ValidateProperty("option_info", value);
                    this._option_info = value;
                    this.RaiseDataMemberChanged("option_info");
                    this.Onoption_infoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'option_info_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int option_info_id
        {
            get
            {
                return this._option_info_id;
            }
            set
            {
                if ((this._option_info_id != value))
                {
                    this.Onoption_info_idChanging(value);
                    this.ValidateProperty("option_info_id", value);
                    this._option_info_id = value;
                    this.RaisePropertyChanged("option_info_id");
                    this.Onoption_info_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'tag' value.
        /// </summary>
        [DataMember()]
        public int tag
        {
            get
            {
                return this._tag;
            }
            set
            {
                if ((this._tag != value))
                {
                    this.OntagChanging(value);
                    this.RaiseDataMemberChanging("tag");
                    this.ValidateProperty("tag", value);
                    this._tag = value;
                    this.RaiseDataMemberChanged("tag");
                    this.OntagChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._option_info_id;
        }
    }
    
    /// <summary>
    /// The 'PersonStopIrisInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class PersonStopIrisInfo : Entity
    {
        
        private string _begin_time;
        
        private string _end_time;
        
        private int _index;
        
        private bool _isSelected;
        
        private int _person_disable_info_id;
        
        private int _person_id;
        
        private string _person_name;
        
        private string _policy;
        
        private string _work_sn;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onbegin_timeChanging(string value);
        partial void Onbegin_timeChanged();
        partial void Onend_timeChanging(string value);
        partial void Onend_timeChanged();
        partial void OnindexChanging(int value);
        partial void OnindexChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void Onperson_disable_info_idChanging(int value);
        partial void Onperson_disable_info_idChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();
        partial void Onperson_nameChanging(string value);
        partial void Onperson_nameChanged();
        partial void OnpolicyChanging(string value);
        partial void OnpolicyChanged();
        partial void Onwork_snChanging(string value);
        partial void Onwork_snChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonStopIrisInfo"/> class.
        /// </summary>
        public PersonStopIrisInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'begin_time' value.
        /// </summary>
        [DataMember()]
        public string begin_time
        {
            get
            {
                return this._begin_time;
            }
            set
            {
                if ((this._begin_time != value))
                {
                    this.Onbegin_timeChanging(value);
                    this.RaiseDataMemberChanging("begin_time");
                    this.ValidateProperty("begin_time", value);
                    this._begin_time = value;
                    this.RaiseDataMemberChanged("begin_time");
                    this.Onbegin_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'end_time' value.
        /// </summary>
        [DataMember()]
        public string end_time
        {
            get
            {
                return this._end_time;
            }
            set
            {
                if ((this._end_time != value))
                {
                    this.Onend_timeChanging(value);
                    this.RaiseDataMemberChanging("end_time");
                    this.ValidateProperty("end_time", value);
                    this._end_time = value;
                    this.RaiseDataMemberChanged("end_time");
                    this.Onend_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'index' value.
        /// </summary>
        [DataMember()]
        public int index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnindexChanging(value);
                    this.RaiseDataMemberChanging("index");
                    this.ValidateProperty("index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("index");
                    this.OnindexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_disable_info_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int person_disable_info_id
        {
            get
            {
                return this._person_disable_info_id;
            }
            set
            {
                if ((this._person_disable_info_id != value))
                {
                    this.Onperson_disable_info_idChanging(value);
                    this.ValidateProperty("person_disable_info_id", value);
                    this._person_disable_info_id = value;
                    this.RaisePropertyChanged("person_disable_info_id");
                    this.Onperson_disable_info_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.RaiseDataMemberChanging("person_id");
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaiseDataMemberChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_name' value.
        /// </summary>
        [DataMember()]
        public string person_name
        {
            get
            {
                return this._person_name;
            }
            set
            {
                if ((this._person_name != value))
                {
                    this.Onperson_nameChanging(value);
                    this.RaiseDataMemberChanging("person_name");
                    this.ValidateProperty("person_name", value);
                    this._person_name = value;
                    this.RaiseDataMemberChanged("person_name");
                    this.Onperson_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'policy' value.
        /// </summary>
        [DataMember()]
        public string policy
        {
            get
            {
                return this._policy;
            }
            set
            {
                if ((this._policy != value))
                {
                    this.OnpolicyChanging(value);
                    this.RaiseDataMemberChanging("policy");
                    this.ValidateProperty("policy", value);
                    this._policy = value;
                    this.RaiseDataMemberChanged("policy");
                    this.OnpolicyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_sn' value.
        /// </summary>
        [DataMember()]
        public string work_sn
        {
            get
            {
                return this._work_sn;
            }
            set
            {
                if ((this._work_sn != value))
                {
                    this.Onwork_snChanging(value);
                    this.RaiseDataMemberChanging("work_sn");
                    this.ValidateProperty("work_sn", value);
                    this._work_sn = value;
                    this.RaiseDataMemberChanged("work_sn");
                    this.Onwork_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._person_disable_info_id;
        }
    }
    
    /// <summary>
    /// The 'PrincipalInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class PrincipalInfo : Entity
    {
        
        private bool _isSelected;
        
        private string _memo;
        
        private string _principal_class;
        
        private int _principal_id;
        
        private string _principal_name;
        
        private int _principal_type_id;
        
        private string _principal_type_name;
        
        private int _principal_type_order;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onprincipal_classChanging(string value);
        partial void Onprincipal_classChanged();
        partial void Onprincipal_idChanging(int value);
        partial void Onprincipal_idChanged();
        partial void Onprincipal_nameChanging(string value);
        partial void Onprincipal_nameChanged();
        partial void Onprincipal_type_idChanging(int value);
        partial void Onprincipal_type_idChanged();
        partial void Onprincipal_type_nameChanging(string value);
        partial void Onprincipal_type_nameChanged();
        partial void Onprincipal_type_orderChanging(int value);
        partial void Onprincipal_type_orderChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PrincipalInfo"/> class.
        /// </summary>
        public PrincipalInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'principal_class' value.
        /// </summary>
        [DataMember()]
        public string principal_class
        {
            get
            {
                return this._principal_class;
            }
            set
            {
                if ((this._principal_class != value))
                {
                    this.Onprincipal_classChanging(value);
                    this.RaiseDataMemberChanging("principal_class");
                    this.ValidateProperty("principal_class", value);
                    this._principal_class = value;
                    this.RaiseDataMemberChanged("principal_class");
                    this.Onprincipal_classChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'principal_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int principal_id
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                if ((this._principal_id != value))
                {
                    this.Onprincipal_idChanging(value);
                    this.ValidateProperty("principal_id", value);
                    this._principal_id = value;
                    this.RaisePropertyChanged("principal_id");
                    this.Onprincipal_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'principal_name' value.
        /// </summary>
        [DataMember()]
        public string principal_name
        {
            get
            {
                return this._principal_name;
            }
            set
            {
                if ((this._principal_name != value))
                {
                    this.Onprincipal_nameChanging(value);
                    this.RaiseDataMemberChanging("principal_name");
                    this.ValidateProperty("principal_name", value);
                    this._principal_name = value;
                    this.RaiseDataMemberChanged("principal_name");
                    this.Onprincipal_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'principal_type_id' value.
        /// </summary>
        [DataMember()]
        public int principal_type_id
        {
            get
            {
                return this._principal_type_id;
            }
            set
            {
                if ((this._principal_type_id != value))
                {
                    this.Onprincipal_type_idChanging(value);
                    this.RaiseDataMemberChanging("principal_type_id");
                    this.ValidateProperty("principal_type_id", value);
                    this._principal_type_id = value;
                    this.RaiseDataMemberChanged("principal_type_id");
                    this.Onprincipal_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'principal_type_name' value.
        /// </summary>
        [DataMember()]
        public string principal_type_name
        {
            get
            {
                return this._principal_type_name;
            }
            set
            {
                if ((this._principal_type_name != value))
                {
                    this.Onprincipal_type_nameChanging(value);
                    this.RaiseDataMemberChanging("principal_type_name");
                    this.ValidateProperty("principal_type_name", value);
                    this._principal_type_name = value;
                    this.RaiseDataMemberChanged("principal_type_name");
                    this.Onprincipal_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'principal_type_order' value.
        /// </summary>
        [DataMember()]
        public int principal_type_order
        {
            get
            {
                return this._principal_type_order;
            }
            set
            {
                if ((this._principal_type_order != value))
                {
                    this.Onprincipal_type_orderChanging(value);
                    this.RaiseDataMemberChanging("principal_type_order");
                    this.ValidateProperty("principal_type_order", value);
                    this._principal_type_order = value;
                    this.RaiseDataMemberChanged("principal_type_order");
                    this.Onprincipal_type_orderChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._principal_id;
        }
    }
    
    /// <summary>
    /// The 'PrincipalTypeInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class PrincipalTypeInfo : Entity
    {
        
        private bool _isSelected;
        
        private string _memo;
        
        private int _principal_type_id;
        
        private string _principal_type_name;
        
        private int _principal_type_order;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onprincipal_type_idChanging(int value);
        partial void Onprincipal_type_idChanged();
        partial void Onprincipal_type_nameChanging(string value);
        partial void Onprincipal_type_nameChanged();
        partial void Onprincipal_type_orderChanging(int value);
        partial void Onprincipal_type_orderChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PrincipalTypeInfo"/> class.
        /// </summary>
        public PrincipalTypeInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'principal_type_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int principal_type_id
        {
            get
            {
                return this._principal_type_id;
            }
            set
            {
                if ((this._principal_type_id != value))
                {
                    this.Onprincipal_type_idChanging(value);
                    this.ValidateProperty("principal_type_id", value);
                    this._principal_type_id = value;
                    this.RaisePropertyChanged("principal_type_id");
                    this.Onprincipal_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'principal_type_name' value.
        /// </summary>
        [DataMember()]
        public string principal_type_name
        {
            get
            {
                return this._principal_type_name;
            }
            set
            {
                if ((this._principal_type_name != value))
                {
                    this.Onprincipal_type_nameChanging(value);
                    this.RaiseDataMemberChanging("principal_type_name");
                    this.ValidateProperty("principal_type_name", value);
                    this._principal_type_name = value;
                    this.RaiseDataMemberChanged("principal_type_name");
                    this.Onprincipal_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'principal_type_order' value.
        /// </summary>
        [DataMember()]
        public int principal_type_order
        {
            get
            {
                return this._principal_type_order;
            }
            set
            {
                if ((this._principal_type_order != value))
                {
                    this.Onprincipal_type_orderChanging(value);
                    this.RaiseDataMemberChanging("principal_type_order");
                    this.ValidateProperty("principal_type_order", value);
                    this._principal_type_order = value;
                    this.RaiseDataMemberChanged("principal_type_order");
                    this.Onprincipal_type_orderChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._principal_type_id;
        }
    }
    
    /// <summary>
    /// The 'purview' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class purview : Entity
    {
        
        private string _memo;
        
        private int _parent_purview_id;
        
        private int _purview_id;
        
        private string _purview_name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onparent_purview_idChanging(int value);
        partial void Onparent_purview_idChanged();
        partial void Onpurview_idChanging(int value);
        partial void Onpurview_idChanged();
        partial void Onpurview_nameChanging(string value);
        partial void Onpurview_nameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="purview"/> class.
        /// </summary>
        public purview()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'parent_purview_id' value.
        /// </summary>
        [DataMember()]
        public int parent_purview_id
        {
            get
            {
                return this._parent_purview_id;
            }
            set
            {
                if ((this._parent_purview_id != value))
                {
                    this.Onparent_purview_idChanging(value);
                    this.RaiseDataMemberChanging("parent_purview_id");
                    this.ValidateProperty("parent_purview_id", value);
                    this._parent_purview_id = value;
                    this.RaiseDataMemberChanged("parent_purview_id");
                    this.Onparent_purview_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'purview_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int purview_id
        {
            get
            {
                return this._purview_id;
            }
            set
            {
                if ((this._purview_id != value))
                {
                    this.Onpurview_idChanging(value);
                    this.ValidateProperty("purview_id", value);
                    this._purview_id = value;
                    this.RaisePropertyChanged("purview_id");
                    this.Onpurview_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'purview_name' value.
        /// </summary>
        [DataMember()]
        public string purview_name
        {
            get
            {
                return this._purview_name;
            }
            set
            {
                if ((this._purview_name != value))
                {
                    this.Onpurview_nameChanging(value);
                    this.RaiseDataMemberChanging("purview_name");
                    this.ValidateProperty("purview_name", value);
                    this._purview_name = value;
                    this.RaiseDataMemberChanged("purview_name");
                    this.Onpurview_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._purview_id;
        }
    }
    
    /// <summary>
    /// The 'system_param' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class system_param : Entity
    {
        
        private short _accident_time;
        
        private short _alert_time;
        
        private short _attend_max_early;
        
        private short _attend_max_minutes;
        
        private short _auto_attend_time;
        
        private string _auto_backup_path;
        
        private string _auto_backup_time;
        
        private int _auto_backup_type;
        
        private string _class_type_sn;
        
        private int _day_auto_backup;
        
        private string _device;
        
        private short _dup_time;
        
        private string _finance_begin_cal;
        
        private short _in_dup_recog;
        
        private int _is_multipled;
        
        private short _is_register;
        
        private short _out_dup_recog;
        
        private short _over_time;
        
        private short _phonate_time;
        
        private short _previous_night;
        
        private short _scan_sound_time;
        
        private int _sound_config;
        
        private string _styles_sn;
        
        private short _tertian_type;
        
        private short _true_accident_time;
        
        private int _week_auto_backup;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onaccident_timeChanging(short value);
        partial void Onaccident_timeChanged();
        partial void Onalert_timeChanging(short value);
        partial void Onalert_timeChanged();
        partial void Onattend_max_earlyChanging(short value);
        partial void Onattend_max_earlyChanged();
        partial void Onattend_max_minutesChanging(short value);
        partial void Onattend_max_minutesChanged();
        partial void Onauto_attend_timeChanging(short value);
        partial void Onauto_attend_timeChanged();
        partial void Onauto_backup_pathChanging(string value);
        partial void Onauto_backup_pathChanged();
        partial void Onauto_backup_timeChanging(string value);
        partial void Onauto_backup_timeChanged();
        partial void Onauto_backup_typeChanging(int value);
        partial void Onauto_backup_typeChanged();
        partial void Onclass_type_snChanging(string value);
        partial void Onclass_type_snChanged();
        partial void Onday_auto_backupChanging(int value);
        partial void Onday_auto_backupChanged();
        partial void OndeviceChanging(string value);
        partial void OndeviceChanged();
        partial void Ondup_timeChanging(short value);
        partial void Ondup_timeChanged();
        partial void Onfinance_begin_calChanging(string value);
        partial void Onfinance_begin_calChanged();
        partial void Onin_dup_recogChanging(short value);
        partial void Onin_dup_recogChanged();
        partial void Onis_multipledChanging(int value);
        partial void Onis_multipledChanged();
        partial void Onis_registerChanging(short value);
        partial void Onis_registerChanged();
        partial void Onout_dup_recogChanging(short value);
        partial void Onout_dup_recogChanged();
        partial void Onover_timeChanging(short value);
        partial void Onover_timeChanged();
        partial void Onphonate_timeChanging(short value);
        partial void Onphonate_timeChanged();
        partial void Onprevious_nightChanging(short value);
        partial void Onprevious_nightChanged();
        partial void Onscan_sound_timeChanging(short value);
        partial void Onscan_sound_timeChanged();
        partial void Onsound_configChanging(int value);
        partial void Onsound_configChanged();
        partial void Onstyles_snChanging(string value);
        partial void Onstyles_snChanged();
        partial void Ontertian_typeChanging(short value);
        partial void Ontertian_typeChanged();
        partial void Ontrue_accident_timeChanging(short value);
        partial void Ontrue_accident_timeChanged();
        partial void Onweek_auto_backupChanging(int value);
        partial void Onweek_auto_backupChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="system_param"/> class.
        /// </summary>
        public system_param()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'accident_time' value.
        /// </summary>
        [DataMember()]
        public short accident_time
        {
            get
            {
                return this._accident_time;
            }
            set
            {
                if ((this._accident_time != value))
                {
                    this.Onaccident_timeChanging(value);
                    this.RaiseDataMemberChanging("accident_time");
                    this.ValidateProperty("accident_time", value);
                    this._accident_time = value;
                    this.RaiseDataMemberChanged("accident_time");
                    this.Onaccident_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'alert_time' value.
        /// </summary>
        [DataMember()]
        public short alert_time
        {
            get
            {
                return this._alert_time;
            }
            set
            {
                if ((this._alert_time != value))
                {
                    this.Onalert_timeChanging(value);
                    this.RaiseDataMemberChanging("alert_time");
                    this.ValidateProperty("alert_time", value);
                    this._alert_time = value;
                    this.RaiseDataMemberChanged("alert_time");
                    this.Onalert_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_max_early' value.
        /// </summary>
        [DataMember()]
        public short attend_max_early
        {
            get
            {
                return this._attend_max_early;
            }
            set
            {
                if ((this._attend_max_early != value))
                {
                    this.Onattend_max_earlyChanging(value);
                    this.RaiseDataMemberChanging("attend_max_early");
                    this.ValidateProperty("attend_max_early", value);
                    this._attend_max_early = value;
                    this.RaiseDataMemberChanged("attend_max_early");
                    this.Onattend_max_earlyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_max_minutes' value.
        /// </summary>
        [DataMember()]
        public short attend_max_minutes
        {
            get
            {
                return this._attend_max_minutes;
            }
            set
            {
                if ((this._attend_max_minutes != value))
                {
                    this.Onattend_max_minutesChanging(value);
                    this.RaiseDataMemberChanging("attend_max_minutes");
                    this.ValidateProperty("attend_max_minutes", value);
                    this._attend_max_minutes = value;
                    this.RaiseDataMemberChanged("attend_max_minutes");
                    this.Onattend_max_minutesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'auto_attend_time' value.
        /// </summary>
        [DataMember()]
        public short auto_attend_time
        {
            get
            {
                return this._auto_attend_time;
            }
            set
            {
                if ((this._auto_attend_time != value))
                {
                    this.Onauto_attend_timeChanging(value);
                    this.RaiseDataMemberChanging("auto_attend_time");
                    this.ValidateProperty("auto_attend_time", value);
                    this._auto_attend_time = value;
                    this.RaiseDataMemberChanged("auto_attend_time");
                    this.Onauto_attend_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'auto_backup_path' value.
        /// </summary>
        [DataMember()]
        public string auto_backup_path
        {
            get
            {
                return this._auto_backup_path;
            }
            set
            {
                if ((this._auto_backup_path != value))
                {
                    this.Onauto_backup_pathChanging(value);
                    this.RaiseDataMemberChanging("auto_backup_path");
                    this.ValidateProperty("auto_backup_path", value);
                    this._auto_backup_path = value;
                    this.RaiseDataMemberChanged("auto_backup_path");
                    this.Onauto_backup_pathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'auto_backup_time' value.
        /// </summary>
        [DataMember()]
        public string auto_backup_time
        {
            get
            {
                return this._auto_backup_time;
            }
            set
            {
                if ((this._auto_backup_time != value))
                {
                    this.Onauto_backup_timeChanging(value);
                    this.RaiseDataMemberChanging("auto_backup_time");
                    this.ValidateProperty("auto_backup_time", value);
                    this._auto_backup_time = value;
                    this.RaiseDataMemberChanged("auto_backup_time");
                    this.Onauto_backup_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'auto_backup_type' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int auto_backup_type
        {
            get
            {
                return this._auto_backup_type;
            }
            set
            {
                if ((this._auto_backup_type != value))
                {
                    this.Onauto_backup_typeChanging(value);
                    this.ValidateProperty("auto_backup_type", value);
                    this._auto_backup_type = value;
                    this.RaisePropertyChanged("auto_backup_type");
                    this.Onauto_backup_typeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_sn' value.
        /// </summary>
        [DataMember()]
        public string class_type_sn
        {
            get
            {
                return this._class_type_sn;
            }
            set
            {
                if ((this._class_type_sn != value))
                {
                    this.Onclass_type_snChanging(value);
                    this.RaiseDataMemberChanging("class_type_sn");
                    this.ValidateProperty("class_type_sn", value);
                    this._class_type_sn = value;
                    this.RaiseDataMemberChanged("class_type_sn");
                    this.Onclass_type_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'day_auto_backup' value.
        /// </summary>
        [DataMember()]
        public int day_auto_backup
        {
            get
            {
                return this._day_auto_backup;
            }
            set
            {
                if ((this._day_auto_backup != value))
                {
                    this.Onday_auto_backupChanging(value);
                    this.RaiseDataMemberChanging("day_auto_backup");
                    this.ValidateProperty("day_auto_backup", value);
                    this._day_auto_backup = value;
                    this.RaiseDataMemberChanged("day_auto_backup");
                    this.Onday_auto_backupChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'device' value.
        /// </summary>
        [DataMember()]
        public string device
        {
            get
            {
                return this._device;
            }
            set
            {
                if ((this._device != value))
                {
                    this.OndeviceChanging(value);
                    this.RaiseDataMemberChanging("device");
                    this.ValidateProperty("device", value);
                    this._device = value;
                    this.RaiseDataMemberChanged("device");
                    this.OndeviceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'dup_time' value.
        /// </summary>
        [DataMember()]
        public short dup_time
        {
            get
            {
                return this._dup_time;
            }
            set
            {
                if ((this._dup_time != value))
                {
                    this.Ondup_timeChanging(value);
                    this.RaiseDataMemberChanging("dup_time");
                    this.ValidateProperty("dup_time", value);
                    this._dup_time = value;
                    this.RaiseDataMemberChanged("dup_time");
                    this.Ondup_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'finance_begin_cal' value.
        /// </summary>
        [DataMember()]
        public string finance_begin_cal
        {
            get
            {
                return this._finance_begin_cal;
            }
            set
            {
                if ((this._finance_begin_cal != value))
                {
                    this.Onfinance_begin_calChanging(value);
                    this.RaiseDataMemberChanging("finance_begin_cal");
                    this.ValidateProperty("finance_begin_cal", value);
                    this._finance_begin_cal = value;
                    this.RaiseDataMemberChanged("finance_begin_cal");
                    this.Onfinance_begin_calChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_dup_recog' value.
        /// </summary>
        [DataMember()]
        public short in_dup_recog
        {
            get
            {
                return this._in_dup_recog;
            }
            set
            {
                if ((this._in_dup_recog != value))
                {
                    this.Onin_dup_recogChanging(value);
                    this.RaiseDataMemberChanging("in_dup_recog");
                    this.ValidateProperty("in_dup_recog", value);
                    this._in_dup_recog = value;
                    this.RaiseDataMemberChanged("in_dup_recog");
                    this.Onin_dup_recogChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_multipled' value.
        /// </summary>
        [DataMember()]
        public int is_multipled
        {
            get
            {
                return this._is_multipled;
            }
            set
            {
                if ((this._is_multipled != value))
                {
                    this.Onis_multipledChanging(value);
                    this.RaiseDataMemberChanging("is_multipled");
                    this.ValidateProperty("is_multipled", value);
                    this._is_multipled = value;
                    this.RaiseDataMemberChanged("is_multipled");
                    this.Onis_multipledChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_register' value.
        /// </summary>
        [DataMember()]
        public short is_register
        {
            get
            {
                return this._is_register;
            }
            set
            {
                if ((this._is_register != value))
                {
                    this.Onis_registerChanging(value);
                    this.RaiseDataMemberChanging("is_register");
                    this.ValidateProperty("is_register", value);
                    this._is_register = value;
                    this.RaiseDataMemberChanged("is_register");
                    this.Onis_registerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'out_dup_recog' value.
        /// </summary>
        [DataMember()]
        public short out_dup_recog
        {
            get
            {
                return this._out_dup_recog;
            }
            set
            {
                if ((this._out_dup_recog != value))
                {
                    this.Onout_dup_recogChanging(value);
                    this.RaiseDataMemberChanging("out_dup_recog");
                    this.ValidateProperty("out_dup_recog", value);
                    this._out_dup_recog = value;
                    this.RaiseDataMemberChanged("out_dup_recog");
                    this.Onout_dup_recogChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'over_time' value.
        /// </summary>
        [DataMember()]
        public short over_time
        {
            get
            {
                return this._over_time;
            }
            set
            {
                if ((this._over_time != value))
                {
                    this.Onover_timeChanging(value);
                    this.RaiseDataMemberChanging("over_time");
                    this.ValidateProperty("over_time", value);
                    this._over_time = value;
                    this.RaiseDataMemberChanged("over_time");
                    this.Onover_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'phonate_time' value.
        /// </summary>
        [DataMember()]
        public short phonate_time
        {
            get
            {
                return this._phonate_time;
            }
            set
            {
                if ((this._phonate_time != value))
                {
                    this.Onphonate_timeChanging(value);
                    this.RaiseDataMemberChanging("phonate_time");
                    this.ValidateProperty("phonate_time", value);
                    this._phonate_time = value;
                    this.RaiseDataMemberChanged("phonate_time");
                    this.Onphonate_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'previous_night' value.
        /// </summary>
        [DataMember()]
        public short previous_night
        {
            get
            {
                return this._previous_night;
            }
            set
            {
                if ((this._previous_night != value))
                {
                    this.Onprevious_nightChanging(value);
                    this.RaiseDataMemberChanging("previous_night");
                    this.ValidateProperty("previous_night", value);
                    this._previous_night = value;
                    this.RaiseDataMemberChanged("previous_night");
                    this.Onprevious_nightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'scan_sound_time' value.
        /// </summary>
        [DataMember()]
        public short scan_sound_time
        {
            get
            {
                return this._scan_sound_time;
            }
            set
            {
                if ((this._scan_sound_time != value))
                {
                    this.Onscan_sound_timeChanging(value);
                    this.RaiseDataMemberChanging("scan_sound_time");
                    this.ValidateProperty("scan_sound_time", value);
                    this._scan_sound_time = value;
                    this.RaiseDataMemberChanged("scan_sound_time");
                    this.Onscan_sound_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sound_config' value.
        /// </summary>
        [DataMember()]
        public int sound_config
        {
            get
            {
                return this._sound_config;
            }
            set
            {
                if ((this._sound_config != value))
                {
                    this.Onsound_configChanging(value);
                    this.RaiseDataMemberChanging("sound_config");
                    this.ValidateProperty("sound_config", value);
                    this._sound_config = value;
                    this.RaiseDataMemberChanged("sound_config");
                    this.Onsound_configChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'styles_sn' value.
        /// </summary>
        [DataMember()]
        public string styles_sn
        {
            get
            {
                return this._styles_sn;
            }
            set
            {
                if ((this._styles_sn != value))
                {
                    this.Onstyles_snChanging(value);
                    this.RaiseDataMemberChanging("styles_sn");
                    this.ValidateProperty("styles_sn", value);
                    this._styles_sn = value;
                    this.RaiseDataMemberChanged("styles_sn");
                    this.Onstyles_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'tertian_type' value.
        /// </summary>
        [DataMember()]
        public short tertian_type
        {
            get
            {
                return this._tertian_type;
            }
            set
            {
                if ((this._tertian_type != value))
                {
                    this.Ontertian_typeChanging(value);
                    this.RaiseDataMemberChanging("tertian_type");
                    this.ValidateProperty("tertian_type", value);
                    this._tertian_type = value;
                    this.RaiseDataMemberChanged("tertian_type");
                    this.Ontertian_typeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'true_accident_time' value.
        /// </summary>
        [DataMember()]
        public short true_accident_time
        {
            get
            {
                return this._true_accident_time;
            }
            set
            {
                if ((this._true_accident_time != value))
                {
                    this.Ontrue_accident_timeChanging(value);
                    this.RaiseDataMemberChanging("true_accident_time");
                    this.ValidateProperty("true_accident_time", value);
                    this._true_accident_time = value;
                    this.RaiseDataMemberChanged("true_accident_time");
                    this.Ontrue_accident_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'week_auto_backup' value.
        /// </summary>
        [DataMember()]
        public int week_auto_backup
        {
            get
            {
                return this._week_auto_backup;
            }
            set
            {
                if ((this._week_auto_backup != value))
                {
                    this.Onweek_auto_backupChanging(value);
                    this.RaiseDataMemberChanging("week_auto_backup");
                    this.ValidateProperty("week_auto_backup", value);
                    this._week_auto_backup = value;
                    this.RaiseDataMemberChanged("week_auto_backup");
                    this.Onweek_auto_backupChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._auto_backup_type;
        }
    }
    
    /// <summary>
    /// The 'UserAllPersonRecogLog' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class UserAllPersonRecogLog : Entity
    {
        
        private string _depart_name;
        
        private int _person_id;
        
        private string _person_name;
        
        private int _record_count;
        
        private string _work_sn;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();
        partial void Onperson_nameChanging(string value);
        partial void Onperson_nameChanged();
        partial void Onrecord_countChanging(int value);
        partial void Onrecord_countChanged();
        partial void Onwork_snChanging(string value);
        partial void Onwork_snChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAllPersonRecogLog"/> class.
        /// </summary>
        public UserAllPersonRecogLog()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaisePropertyChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_name' value.
        /// </summary>
        [DataMember()]
        public string person_name
        {
            get
            {
                return this._person_name;
            }
            set
            {
                if ((this._person_name != value))
                {
                    this.Onperson_nameChanging(value);
                    this.RaiseDataMemberChanging("person_name");
                    this.ValidateProperty("person_name", value);
                    this._person_name = value;
                    this.RaiseDataMemberChanged("person_name");
                    this.Onperson_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'record_count' value.
        /// </summary>
        [DataMember()]
        public int record_count
        {
            get
            {
                return this._record_count;
            }
            set
            {
                if ((this._record_count != value))
                {
                    this.Onrecord_countChanging(value);
                    this.RaiseDataMemberChanging("record_count");
                    this.ValidateProperty("record_count", value);
                    this._record_count = value;
                    this.RaiseDataMemberChanged("record_count");
                    this.Onrecord_countChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_sn' value.
        /// </summary>
        [DataMember()]
        public string work_sn
        {
            get
            {
                return this._work_sn;
            }
            set
            {
                if ((this._work_sn != value))
                {
                    this.Onwork_snChanging(value);
                    this.RaiseDataMemberChanging("work_sn");
                    this.ValidateProperty("work_sn", value);
                    this._work_sn = value;
                    this.RaiseDataMemberChanged("work_sn");
                    this.Onwork_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._person_id;
        }
    }
    
    /// <summary>
    /// The 'UserAttendForLeave' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class UserAttendForLeave : Entity
    {
        
        private double _actual_leave_days;
        
        private int _attend_for_leave_id;
        
        private int _depart_id;
        
        private string _depart_name;
        
        private bool _is_leave_all_day;
        
        private DateTime _leave_end_time;
        
        private DateTime _leave_start_time;
        
        private int _leave_type_id;
        
        private string _leave_type_name;
        
        private string _memo;
        
        private DateTime _modify_time;
        
        private DateTime _operate_time;
        
        private string _operator_name;
        
        private int _person_id;
        
        private string _person_name;
        
        private string _work_sn;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onactual_leave_daysChanging(double value);
        partial void Onactual_leave_daysChanged();
        partial void Onattend_for_leave_idChanging(int value);
        partial void Onattend_for_leave_idChanged();
        partial void Ondepart_idChanging(int value);
        partial void Ondepart_idChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Onis_leave_all_dayChanging(bool value);
        partial void Onis_leave_all_dayChanged();
        partial void Onleave_end_timeChanging(DateTime value);
        partial void Onleave_end_timeChanged();
        partial void Onleave_start_timeChanging(DateTime value);
        partial void Onleave_start_timeChanged();
        partial void Onleave_type_idChanging(int value);
        partial void Onleave_type_idChanged();
        partial void Onleave_type_nameChanging(string value);
        partial void Onleave_type_nameChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onmodify_timeChanging(DateTime value);
        partial void Onmodify_timeChanged();
        partial void Onoperate_timeChanging(DateTime value);
        partial void Onoperate_timeChanged();
        partial void Onoperator_nameChanging(string value);
        partial void Onoperator_nameChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();
        partial void Onperson_nameChanging(string value);
        partial void Onperson_nameChanged();
        partial void Onwork_snChanging(string value);
        partial void Onwork_snChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAttendForLeave"/> class.
        /// </summary>
        public UserAttendForLeave()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'actual_leave_days' value.
        /// </summary>
        [DataMember()]
        public double actual_leave_days
        {
            get
            {
                return this._actual_leave_days;
            }
            set
            {
                if ((this._actual_leave_days != value))
                {
                    this.Onactual_leave_daysChanging(value);
                    this.RaiseDataMemberChanging("actual_leave_days");
                    this.ValidateProperty("actual_leave_days", value);
                    this._actual_leave_days = value;
                    this.RaiseDataMemberChanged("actual_leave_days");
                    this.Onactual_leave_daysChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_for_leave_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int attend_for_leave_id
        {
            get
            {
                return this._attend_for_leave_id;
            }
            set
            {
                if ((this._attend_for_leave_id != value))
                {
                    this.Onattend_for_leave_idChanging(value);
                    this.ValidateProperty("attend_for_leave_id", value);
                    this._attend_for_leave_id = value;
                    this.RaisePropertyChanged("attend_for_leave_id");
                    this.Onattend_for_leave_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_id' value.
        /// </summary>
        [DataMember()]
        public int depart_id
        {
            get
            {
                return this._depart_id;
            }
            set
            {
                if ((this._depart_id != value))
                {
                    this.Ondepart_idChanging(value);
                    this.RaiseDataMemberChanging("depart_id");
                    this.ValidateProperty("depart_id", value);
                    this._depart_id = value;
                    this.RaiseDataMemberChanged("depart_id");
                    this.Ondepart_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_leave_all_day' value.
        /// </summary>
        [DataMember()]
        public bool is_leave_all_day
        {
            get
            {
                return this._is_leave_all_day;
            }
            set
            {
                if ((this._is_leave_all_day != value))
                {
                    this.Onis_leave_all_dayChanging(value);
                    this.RaiseDataMemberChanging("is_leave_all_day");
                    this.ValidateProperty("is_leave_all_day", value);
                    this._is_leave_all_day = value;
                    this.RaiseDataMemberChanged("is_leave_all_day");
                    this.Onis_leave_all_dayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'leave_end_time' value.
        /// </summary>
        [DataMember()]
        public DateTime leave_end_time
        {
            get
            {
                return this._leave_end_time;
            }
            set
            {
                if ((this._leave_end_time != value))
                {
                    this.Onleave_end_timeChanging(value);
                    this.RaiseDataMemberChanging("leave_end_time");
                    this.ValidateProperty("leave_end_time", value);
                    this._leave_end_time = value;
                    this.RaiseDataMemberChanged("leave_end_time");
                    this.Onleave_end_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'leave_start_time' value.
        /// </summary>
        [DataMember()]
        public DateTime leave_start_time
        {
            get
            {
                return this._leave_start_time;
            }
            set
            {
                if ((this._leave_start_time != value))
                {
                    this.Onleave_start_timeChanging(value);
                    this.RaiseDataMemberChanging("leave_start_time");
                    this.ValidateProperty("leave_start_time", value);
                    this._leave_start_time = value;
                    this.RaiseDataMemberChanged("leave_start_time");
                    this.Onleave_start_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'leave_type_id' value.
        /// </summary>
        [DataMember()]
        public int leave_type_id
        {
            get
            {
                return this._leave_type_id;
            }
            set
            {
                if ((this._leave_type_id != value))
                {
                    this.Onleave_type_idChanging(value);
                    this.RaiseDataMemberChanging("leave_type_id");
                    this.ValidateProperty("leave_type_id", value);
                    this._leave_type_id = value;
                    this.RaiseDataMemberChanged("leave_type_id");
                    this.Onleave_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'leave_type_name' value.
        /// </summary>
        [DataMember()]
        public string leave_type_name
        {
            get
            {
                return this._leave_type_name;
            }
            set
            {
                if ((this._leave_type_name != value))
                {
                    this.Onleave_type_nameChanging(value);
                    this.RaiseDataMemberChanging("leave_type_name");
                    this.ValidateProperty("leave_type_name", value);
                    this._leave_type_name = value;
                    this.RaiseDataMemberChanged("leave_type_name");
                    this.Onleave_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'modify_time' value.
        /// </summary>
        [DataMember()]
        public DateTime modify_time
        {
            get
            {
                return this._modify_time;
            }
            set
            {
                if ((this._modify_time != value))
                {
                    this.Onmodify_timeChanging(value);
                    this.RaiseDataMemberChanging("modify_time");
                    this.ValidateProperty("modify_time", value);
                    this._modify_time = value;
                    this.RaiseDataMemberChanged("modify_time");
                    this.Onmodify_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'operate_time' value.
        /// </summary>
        [DataMember()]
        public DateTime operate_time
        {
            get
            {
                return this._operate_time;
            }
            set
            {
                if ((this._operate_time != value))
                {
                    this.Onoperate_timeChanging(value);
                    this.RaiseDataMemberChanging("operate_time");
                    this.ValidateProperty("operate_time", value);
                    this._operate_time = value;
                    this.RaiseDataMemberChanged("operate_time");
                    this.Onoperate_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'operator_name' value.
        /// </summary>
        [DataMember()]
        public string operator_name
        {
            get
            {
                return this._operator_name;
            }
            set
            {
                if ((this._operator_name != value))
                {
                    this.Onoperator_nameChanging(value);
                    this.RaiseDataMemberChanging("operator_name");
                    this.ValidateProperty("operator_name", value);
                    this._operator_name = value;
                    this.RaiseDataMemberChanged("operator_name");
                    this.Onoperator_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.RaiseDataMemberChanging("person_id");
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaiseDataMemberChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_name' value.
        /// </summary>
        [DataMember()]
        public string person_name
        {
            get
            {
                return this._person_name;
            }
            set
            {
                if ((this._person_name != value))
                {
                    this.Onperson_nameChanging(value);
                    this.RaiseDataMemberChanging("person_name");
                    this.ValidateProperty("person_name", value);
                    this._person_name = value;
                    this.RaiseDataMemberChanged("person_name");
                    this.Onperson_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_sn' value.
        /// </summary>
        [DataMember()]
        public string work_sn
        {
            get
            {
                return this._work_sn;
            }
            set
            {
                if ((this._work_sn != value))
                {
                    this.Onwork_snChanging(value);
                    this.RaiseDataMemberChanging("work_sn");
                    this.ValidateProperty("work_sn", value);
                    this._work_sn = value;
                    this.RaiseDataMemberChanged("work_sn");
                    this.Onwork_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._attend_for_leave_id;
        }
    }
    
    /// <summary>
    /// The 'UserAttendRec' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class UserAttendRec : Entity
    {
        
        private int _attend_record_id;
        
        private string _avg_work_time;
        
        private string _class_order_name;
        
        private string _depart_name;
        
        private int _person_id;
        
        private string _person_name;
        
        private string _principal_name;
        
        private int _sum_count;
        
        private string _sum_over_time;
        
        private float _sum_times;
        
        private double _sum_work_cnt;
        
        private string _sum_work_time;
        
        private string _work_sn;
        
        private string _work_type_name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onattend_record_idChanging(int value);
        partial void Onattend_record_idChanged();
        partial void Onavg_work_timeChanging(string value);
        partial void Onavg_work_timeChanged();
        partial void Onclass_order_nameChanging(string value);
        partial void Onclass_order_nameChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();
        partial void Onperson_nameChanging(string value);
        partial void Onperson_nameChanged();
        partial void Onprincipal_nameChanging(string value);
        partial void Onprincipal_nameChanged();
        partial void Onsum_countChanging(int value);
        partial void Onsum_countChanged();
        partial void Onsum_over_timeChanging(string value);
        partial void Onsum_over_timeChanged();
        partial void Onsum_timesChanging(float value);
        partial void Onsum_timesChanged();
        partial void Onsum_work_cntChanging(double value);
        partial void Onsum_work_cntChanged();
        partial void Onsum_work_timeChanging(string value);
        partial void Onsum_work_timeChanged();
        partial void Onwork_snChanging(string value);
        partial void Onwork_snChanged();
        partial void Onwork_type_nameChanging(string value);
        partial void Onwork_type_nameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAttendRec"/> class.
        /// </summary>
        public UserAttendRec()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'attend_record_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int attend_record_id
        {
            get
            {
                return this._attend_record_id;
            }
            set
            {
                if ((this._attend_record_id != value))
                {
                    this.Onattend_record_idChanging(value);
                    this.ValidateProperty("attend_record_id", value);
                    this._attend_record_id = value;
                    this.RaisePropertyChanged("attend_record_id");
                    this.Onattend_record_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'avg_work_time' value.
        /// </summary>
        [DataMember()]
        public string avg_work_time
        {
            get
            {
                return this._avg_work_time;
            }
            set
            {
                if ((this._avg_work_time != value))
                {
                    this.Onavg_work_timeChanging(value);
                    this.RaiseDataMemberChanging("avg_work_time");
                    this.ValidateProperty("avg_work_time", value);
                    this._avg_work_time = value;
                    this.RaiseDataMemberChanged("avg_work_time");
                    this.Onavg_work_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_order_name' value.
        /// </summary>
        [DataMember()]
        public string class_order_name
        {
            get
            {
                return this._class_order_name;
            }
            set
            {
                if ((this._class_order_name != value))
                {
                    this.Onclass_order_nameChanging(value);
                    this.RaiseDataMemberChanging("class_order_name");
                    this.ValidateProperty("class_order_name", value);
                    this._class_order_name = value;
                    this.RaiseDataMemberChanged("class_order_name");
                    this.Onclass_order_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.RaiseDataMemberChanging("person_id");
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaiseDataMemberChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_name' value.
        /// </summary>
        [DataMember()]
        public string person_name
        {
            get
            {
                return this._person_name;
            }
            set
            {
                if ((this._person_name != value))
                {
                    this.Onperson_nameChanging(value);
                    this.RaiseDataMemberChanging("person_name");
                    this.ValidateProperty("person_name", value);
                    this._person_name = value;
                    this.RaiseDataMemberChanged("person_name");
                    this.Onperson_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'principal_name' value.
        /// </summary>
        [DataMember()]
        public string principal_name
        {
            get
            {
                return this._principal_name;
            }
            set
            {
                if ((this._principal_name != value))
                {
                    this.Onprincipal_nameChanging(value);
                    this.RaiseDataMemberChanging("principal_name");
                    this.ValidateProperty("principal_name", value);
                    this._principal_name = value;
                    this.RaiseDataMemberChanged("principal_name");
                    this.Onprincipal_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sum_count' value.
        /// </summary>
        [DataMember()]
        public int sum_count
        {
            get
            {
                return this._sum_count;
            }
            set
            {
                if ((this._sum_count != value))
                {
                    this.Onsum_countChanging(value);
                    this.RaiseDataMemberChanging("sum_count");
                    this.ValidateProperty("sum_count", value);
                    this._sum_count = value;
                    this.RaiseDataMemberChanged("sum_count");
                    this.Onsum_countChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sum_over_time' value.
        /// </summary>
        [DataMember()]
        public string sum_over_time
        {
            get
            {
                return this._sum_over_time;
            }
            set
            {
                if ((this._sum_over_time != value))
                {
                    this.Onsum_over_timeChanging(value);
                    this.RaiseDataMemberChanging("sum_over_time");
                    this.ValidateProperty("sum_over_time", value);
                    this._sum_over_time = value;
                    this.RaiseDataMemberChanged("sum_over_time");
                    this.Onsum_over_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sum_times' value.
        /// </summary>
        [DataMember()]
        public float sum_times
        {
            get
            {
                return this._sum_times;
            }
            set
            {
                if ((this._sum_times != value))
                {
                    this.Onsum_timesChanging(value);
                    this.RaiseDataMemberChanging("sum_times");
                    this.ValidateProperty("sum_times", value);
                    this._sum_times = value;
                    this.RaiseDataMemberChanged("sum_times");
                    this.Onsum_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sum_work_cnt' value.
        /// </summary>
        [DataMember()]
        public double sum_work_cnt
        {
            get
            {
                return this._sum_work_cnt;
            }
            set
            {
                if ((this._sum_work_cnt != value))
                {
                    this.Onsum_work_cntChanging(value);
                    this.RaiseDataMemberChanging("sum_work_cnt");
                    this.ValidateProperty("sum_work_cnt", value);
                    this._sum_work_cnt = value;
                    this.RaiseDataMemberChanged("sum_work_cnt");
                    this.Onsum_work_cntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sum_work_time' value.
        /// </summary>
        [DataMember()]
        public string sum_work_time
        {
            get
            {
                return this._sum_work_time;
            }
            set
            {
                if ((this._sum_work_time != value))
                {
                    this.Onsum_work_timeChanging(value);
                    this.RaiseDataMemberChanging("sum_work_time");
                    this.ValidateProperty("sum_work_time", value);
                    this._sum_work_time = value;
                    this.RaiseDataMemberChanged("sum_work_time");
                    this.Onsum_work_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_sn' value.
        /// </summary>
        [DataMember()]
        public string work_sn
        {
            get
            {
                return this._work_sn;
            }
            set
            {
                if ((this._work_sn != value))
                {
                    this.Onwork_snChanging(value);
                    this.RaiseDataMemberChanging("work_sn");
                    this.ValidateProperty("work_sn", value);
                    this._work_sn = value;
                    this.RaiseDataMemberChanged("work_sn");
                    this.Onwork_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_type_name' value.
        /// </summary>
        [DataMember()]
        public string work_type_name
        {
            get
            {
                return this._work_type_name;
            }
            set
            {
                if ((this._work_type_name != value))
                {
                    this.Onwork_type_nameChanging(value);
                    this.RaiseDataMemberChanging("work_type_name");
                    this.ValidateProperty("work_type_name", value);
                    this._work_type_name = value;
                    this.RaiseDataMemberChanged("work_type_name");
                    this.Onwork_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._attend_record_id;
        }
    }
    
    /// <summary>
    /// The 'UserAttendRecDetail' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class UserAttendRecDetail : Entity
    {
        
        private string _attend_day;
        
        private string _attend_path;
        
        private int _attend_record_id;
        
        private int _attend_times;
        
        private string _class_order_name;
        
        private int _dayType;
        
        private string _depart_name;
        
        private string _dev_group;
        
        private string _in_leave_type_name;
        
        private int _in_out_times;
        
        private Nullable<DateTime> _in_well_time;
        
        private string _in_well_time_str;
        
        private int _is_valid;
        
        private string _leave_type_name;
        
        private string _leave_type_name_color;
        
        private string _memo;
        
        private string _out_leave_type_name;
        
        private Nullable<DateTime> _out_well_time;
        
        private string _out_well_time_str;
        
        private int _person_id;
        
        private string _person_name;
        
        private string _recog_sign_time;
        
        private double _work_cnt;
        
        private string _work_sn;
        
        private string _work_time;
        
        private string _work_time_str;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onattend_dayChanging(string value);
        partial void Onattend_dayChanged();
        partial void Onattend_pathChanging(string value);
        partial void Onattend_pathChanged();
        partial void Onattend_record_idChanging(int value);
        partial void Onattend_record_idChanged();
        partial void Onattend_timesChanging(int value);
        partial void Onattend_timesChanged();
        partial void Onclass_order_nameChanging(string value);
        partial void Onclass_order_nameChanged();
        partial void OnDayTypeChanging(int value);
        partial void OnDayTypeChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Ondev_groupChanging(string value);
        partial void Ondev_groupChanged();
        partial void Onin_leave_type_nameChanging(string value);
        partial void Onin_leave_type_nameChanged();
        partial void Onin_out_timesChanging(int value);
        partial void Onin_out_timesChanged();
        partial void Onin_well_timeChanging(Nullable<DateTime> value);
        partial void Onin_well_timeChanged();
        partial void Onin_well_time_strChanging(string value);
        partial void Onin_well_time_strChanged();
        partial void Onis_validChanging(int value);
        partial void Onis_validChanged();
        partial void Onleave_type_nameChanging(string value);
        partial void Onleave_type_nameChanged();
        partial void Onleave_type_name_colorChanging(string value);
        partial void Onleave_type_name_colorChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onout_leave_type_nameChanging(string value);
        partial void Onout_leave_type_nameChanged();
        partial void Onout_well_timeChanging(Nullable<DateTime> value);
        partial void Onout_well_timeChanged();
        partial void Onout_well_time_strChanging(string value);
        partial void Onout_well_time_strChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();
        partial void Onperson_nameChanging(string value);
        partial void Onperson_nameChanged();
        partial void Onrecog_sign_timeChanging(string value);
        partial void Onrecog_sign_timeChanged();
        partial void Onwork_cntChanging(double value);
        partial void Onwork_cntChanged();
        partial void Onwork_snChanging(string value);
        partial void Onwork_snChanged();
        partial void Onwork_timeChanging(string value);
        partial void Onwork_timeChanged();
        partial void Onwork_time_strChanging(string value);
        partial void Onwork_time_strChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAttendRecDetail"/> class.
        /// </summary>
        public UserAttendRecDetail()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'attend_day' value.
        /// </summary>
        [DataMember()]
        public string attend_day
        {
            get
            {
                return this._attend_day;
            }
            set
            {
                if ((this._attend_day != value))
                {
                    this.Onattend_dayChanging(value);
                    this.RaiseDataMemberChanging("attend_day");
                    this.ValidateProperty("attend_day", value);
                    this._attend_day = value;
                    this.RaiseDataMemberChanged("attend_day");
                    this.Onattend_dayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_path' value.
        /// </summary>
        [DataMember()]
        public string attend_path
        {
            get
            {
                return this._attend_path;
            }
            set
            {
                if ((this._attend_path != value))
                {
                    this.Onattend_pathChanging(value);
                    this.RaiseDataMemberChanging("attend_path");
                    this.ValidateProperty("attend_path", value);
                    this._attend_path = value;
                    this.RaiseDataMemberChanged("attend_path");
                    this.Onattend_pathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_record_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int attend_record_id
        {
            get
            {
                return this._attend_record_id;
            }
            set
            {
                if ((this._attend_record_id != value))
                {
                    this.Onattend_record_idChanging(value);
                    this.ValidateProperty("attend_record_id", value);
                    this._attend_record_id = value;
                    this.RaisePropertyChanged("attend_record_id");
                    this.Onattend_record_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_times' value.
        /// </summary>
        [DataMember()]
        public int attend_times
        {
            get
            {
                return this._attend_times;
            }
            set
            {
                if ((this._attend_times != value))
                {
                    this.Onattend_timesChanging(value);
                    this.RaiseDataMemberChanging("attend_times");
                    this.ValidateProperty("attend_times", value);
                    this._attend_times = value;
                    this.RaiseDataMemberChanged("attend_times");
                    this.Onattend_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_order_name' value.
        /// </summary>
        [DataMember()]
        public string class_order_name
        {
            get
            {
                return this._class_order_name;
            }
            set
            {
                if ((this._class_order_name != value))
                {
                    this.Onclass_order_nameChanging(value);
                    this.RaiseDataMemberChanging("class_order_name");
                    this.ValidateProperty("class_order_name", value);
                    this._class_order_name = value;
                    this.RaiseDataMemberChanged("class_order_name");
                    this.Onclass_order_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayType' value.
        /// </summary>
        [DataMember()]
        public int DayType
        {
            get
            {
                return this._dayType;
            }
            set
            {
                if ((this._dayType != value))
                {
                    this.OnDayTypeChanging(value);
                    this.RaiseDataMemberChanging("DayType");
                    this.ValidateProperty("DayType", value);
                    this._dayType = value;
                    this.RaiseDataMemberChanged("DayType");
                    this.OnDayTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'dev_group' value.
        /// </summary>
        [DataMember()]
        public string dev_group
        {
            get
            {
                return this._dev_group;
            }
            set
            {
                if ((this._dev_group != value))
                {
                    this.Ondev_groupChanging(value);
                    this.RaiseDataMemberChanging("dev_group");
                    this.ValidateProperty("dev_group", value);
                    this._dev_group = value;
                    this.RaiseDataMemberChanged("dev_group");
                    this.Ondev_groupChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_leave_type_name' value.
        /// </summary>
        [DataMember()]
        public string in_leave_type_name
        {
            get
            {
                return this._in_leave_type_name;
            }
            set
            {
                if ((this._in_leave_type_name != value))
                {
                    this.Onin_leave_type_nameChanging(value);
                    this.RaiseDataMemberChanging("in_leave_type_name");
                    this.ValidateProperty("in_leave_type_name", value);
                    this._in_leave_type_name = value;
                    this.RaiseDataMemberChanged("in_leave_type_name");
                    this.Onin_leave_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_out_times' value.
        /// </summary>
        [DataMember()]
        public int in_out_times
        {
            get
            {
                return this._in_out_times;
            }
            set
            {
                if ((this._in_out_times != value))
                {
                    this.Onin_out_timesChanging(value);
                    this.RaiseDataMemberChanging("in_out_times");
                    this.ValidateProperty("in_out_times", value);
                    this._in_out_times = value;
                    this.RaiseDataMemberChanged("in_out_times");
                    this.Onin_out_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_well_time' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> in_well_time
        {
            get
            {
                return this._in_well_time;
            }
            set
            {
                if ((this._in_well_time != value))
                {
                    this.Onin_well_timeChanging(value);
                    this.RaiseDataMemberChanging("in_well_time");
                    this.ValidateProperty("in_well_time", value);
                    this._in_well_time = value;
                    this.RaiseDataMemberChanged("in_well_time");
                    this.Onin_well_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_well_time_str' value.
        /// </summary>
        [DataMember()]
        public string in_well_time_str
        {
            get
            {
                return this._in_well_time_str;
            }
            set
            {
                if ((this._in_well_time_str != value))
                {
                    this.Onin_well_time_strChanging(value);
                    this.RaiseDataMemberChanging("in_well_time_str");
                    this.ValidateProperty("in_well_time_str", value);
                    this._in_well_time_str = value;
                    this.RaiseDataMemberChanged("in_well_time_str");
                    this.Onin_well_time_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_valid' value.
        /// </summary>
        [DataMember()]
        public int is_valid
        {
            get
            {
                return this._is_valid;
            }
            set
            {
                if ((this._is_valid != value))
                {
                    this.Onis_validChanging(value);
                    this.RaiseDataMemberChanging("is_valid");
                    this.ValidateProperty("is_valid", value);
                    this._is_valid = value;
                    this.RaiseDataMemberChanged("is_valid");
                    this.Onis_validChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'leave_type_name' value.
        /// </summary>
        [DataMember()]
        public string leave_type_name
        {
            get
            {
                return this._leave_type_name;
            }
            set
            {
                if ((this._leave_type_name != value))
                {
                    this.Onleave_type_nameChanging(value);
                    this.RaiseDataMemberChanging("leave_type_name");
                    this.ValidateProperty("leave_type_name", value);
                    this._leave_type_name = value;
                    this.RaiseDataMemberChanged("leave_type_name");
                    this.Onleave_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'leave_type_name_color' value.
        /// </summary>
        [DataMember()]
        public string leave_type_name_color
        {
            get
            {
                return this._leave_type_name_color;
            }
            set
            {
                if ((this._leave_type_name_color != value))
                {
                    this.Onleave_type_name_colorChanging(value);
                    this.RaiseDataMemberChanging("leave_type_name_color");
                    this.ValidateProperty("leave_type_name_color", value);
                    this._leave_type_name_color = value;
                    this.RaiseDataMemberChanged("leave_type_name_color");
                    this.Onleave_type_name_colorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'out_leave_type_name' value.
        /// </summary>
        [DataMember()]
        public string out_leave_type_name
        {
            get
            {
                return this._out_leave_type_name;
            }
            set
            {
                if ((this._out_leave_type_name != value))
                {
                    this.Onout_leave_type_nameChanging(value);
                    this.RaiseDataMemberChanging("out_leave_type_name");
                    this.ValidateProperty("out_leave_type_name", value);
                    this._out_leave_type_name = value;
                    this.RaiseDataMemberChanged("out_leave_type_name");
                    this.Onout_leave_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'out_well_time' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> out_well_time
        {
            get
            {
                return this._out_well_time;
            }
            set
            {
                if ((this._out_well_time != value))
                {
                    this.Onout_well_timeChanging(value);
                    this.RaiseDataMemberChanging("out_well_time");
                    this.ValidateProperty("out_well_time", value);
                    this._out_well_time = value;
                    this.RaiseDataMemberChanged("out_well_time");
                    this.Onout_well_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'out_well_time_str' value.
        /// </summary>
        [DataMember()]
        public string out_well_time_str
        {
            get
            {
                return this._out_well_time_str;
            }
            set
            {
                if ((this._out_well_time_str != value))
                {
                    this.Onout_well_time_strChanging(value);
                    this.RaiseDataMemberChanging("out_well_time_str");
                    this.ValidateProperty("out_well_time_str", value);
                    this._out_well_time_str = value;
                    this.RaiseDataMemberChanged("out_well_time_str");
                    this.Onout_well_time_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.RaiseDataMemberChanging("person_id");
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaiseDataMemberChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_name' value.
        /// </summary>
        [DataMember()]
        public string person_name
        {
            get
            {
                return this._person_name;
            }
            set
            {
                if ((this._person_name != value))
                {
                    this.Onperson_nameChanging(value);
                    this.RaiseDataMemberChanging("person_name");
                    this.ValidateProperty("person_name", value);
                    this._person_name = value;
                    this.RaiseDataMemberChanged("person_name");
                    this.Onperson_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'recog_sign_time' value.
        /// </summary>
        [DataMember()]
        public string recog_sign_time
        {
            get
            {
                return this._recog_sign_time;
            }
            set
            {
                if ((this._recog_sign_time != value))
                {
                    this.Onrecog_sign_timeChanging(value);
                    this.RaiseDataMemberChanging("recog_sign_time");
                    this.ValidateProperty("recog_sign_time", value);
                    this._recog_sign_time = value;
                    this.RaiseDataMemberChanged("recog_sign_time");
                    this.Onrecog_sign_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_cnt' value.
        /// </summary>
        [DataMember()]
        public double work_cnt
        {
            get
            {
                return this._work_cnt;
            }
            set
            {
                if ((this._work_cnt != value))
                {
                    this.Onwork_cntChanging(value);
                    this.RaiseDataMemberChanging("work_cnt");
                    this.ValidateProperty("work_cnt", value);
                    this._work_cnt = value;
                    this.RaiseDataMemberChanged("work_cnt");
                    this.Onwork_cntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_sn' value.
        /// </summary>
        [DataMember()]
        public string work_sn
        {
            get
            {
                return this._work_sn;
            }
            set
            {
                if ((this._work_sn != value))
                {
                    this.Onwork_snChanging(value);
                    this.RaiseDataMemberChanging("work_sn");
                    this.ValidateProperty("work_sn", value);
                    this._work_sn = value;
                    this.RaiseDataMemberChanged("work_sn");
                    this.Onwork_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_time' value.
        /// </summary>
        [DataMember()]
        public string work_time
        {
            get
            {
                return this._work_time;
            }
            set
            {
                if ((this._work_time != value))
                {
                    this.Onwork_timeChanging(value);
                    this.RaiseDataMemberChanging("work_time");
                    this.ValidateProperty("work_time", value);
                    this._work_time = value;
                    this.RaiseDataMemberChanged("work_time");
                    this.Onwork_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_time_str' value.
        /// </summary>
        [DataMember()]
        public string work_time_str
        {
            get
            {
                return this._work_time_str;
            }
            set
            {
                if ((this._work_time_str != value))
                {
                    this.Onwork_time_strChanging(value);
                    this.RaiseDataMemberChanging("work_time_str");
                    this.ValidateProperty("work_time_str", value);
                    this._work_time_str = value;
                    this.RaiseDataMemberChanged("work_time_str");
                    this.Onwork_time_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._attend_record_id;
        }
    }
    
    /// <summary>
    /// The 'UserClassOrderInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class UserClassOrderInfo : Entity
    {
        
        private short _attend_latest_worktime;
        
        private string _attend_latest_worktime_str;
        
        private short _attend_max_minutes;
        
        private string _attend_max_minutes_str;
        
        private short _attend_off_minutes;
        
        private string _attend_off_minutes_str;
        
        private string _attend_sign;
        
        private short _avail_time_linear;
        
        private string _avail_time_linear_str;
        
        private short[] _avail_time_timeduration;
        
        private string[] _avail_time_timeduration_str;
        
        private int _class_order_id;
        
        private string _class_order_name;
        
        private int _class_type_id;
        
        private string _class_type_name;
        
        private short _in_well_end_time;
        
        private string _in_well_end_time_str;
        
        private short _in_well_start_time;
        
        private string _in_well_start_time_str;
        
        private int _index;
        
        private bool _is_count_workcnt_by_timeduration;
        
        private string _is_count_workcnt_by_timeduration_str;
        
        private bool _isSelected;
        
        private short _latest_worktime_valid;
        
        private short _max_minutes_valid;
        
        private string _memo;
        
        private short _out_well_end_time;
        
        private string _out_well_end_time_str;
        
        private short _out_well_start_time;
        
        private string _out_well_start_time_str;
        
        private int _work_cnt_linear;
        
        private string _work_cnt_linear_str;
        
        private int[] _work_cnt_timeduration;
        
        private string[] _work_cnt_timeduration_str;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onattend_latest_worktimeChanging(short value);
        partial void Onattend_latest_worktimeChanged();
        partial void Onattend_latest_worktime_strChanging(string value);
        partial void Onattend_latest_worktime_strChanged();
        partial void Onattend_max_minutesChanging(short value);
        partial void Onattend_max_minutesChanged();
        partial void Onattend_max_minutes_strChanging(string value);
        partial void Onattend_max_minutes_strChanged();
        partial void Onattend_off_minutesChanging(short value);
        partial void Onattend_off_minutesChanged();
        partial void Onattend_off_minutes_strChanging(string value);
        partial void Onattend_off_minutes_strChanged();
        partial void Onattend_signChanging(string value);
        partial void Onattend_signChanged();
        partial void Onavail_time_linearChanging(short value);
        partial void Onavail_time_linearChanged();
        partial void Onavail_time_linear_strChanging(string value);
        partial void Onavail_time_linear_strChanged();
        partial void Onavail_time_timedurationChanging(short[] value);
        partial void Onavail_time_timedurationChanged();
        partial void Onavail_time_timeduration_strChanging(string[] value);
        partial void Onavail_time_timeduration_strChanged();
        partial void Onclass_order_idChanging(int value);
        partial void Onclass_order_idChanged();
        partial void Onclass_order_nameChanging(string value);
        partial void Onclass_order_nameChanged();
        partial void Onclass_type_idChanging(int value);
        partial void Onclass_type_idChanged();
        partial void Onclass_type_nameChanging(string value);
        partial void Onclass_type_nameChanged();
        partial void Onin_well_end_timeChanging(short value);
        partial void Onin_well_end_timeChanged();
        partial void Onin_well_end_time_strChanging(string value);
        partial void Onin_well_end_time_strChanged();
        partial void Onin_well_start_timeChanging(short value);
        partial void Onin_well_start_timeChanged();
        partial void Onin_well_start_time_strChanging(string value);
        partial void Onin_well_start_time_strChanged();
        partial void OnindexChanging(int value);
        partial void OnindexChanged();
        partial void Onis_count_workcnt_by_timedurationChanging(bool value);
        partial void Onis_count_workcnt_by_timedurationChanged();
        partial void Onis_count_workcnt_by_timeduration_strChanging(string value);
        partial void Onis_count_workcnt_by_timeduration_strChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void Onlatest_worktime_validChanging(short value);
        partial void Onlatest_worktime_validChanged();
        partial void Onmax_minutes_validChanging(short value);
        partial void Onmax_minutes_validChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onout_well_end_timeChanging(short value);
        partial void Onout_well_end_timeChanged();
        partial void Onout_well_end_time_strChanging(string value);
        partial void Onout_well_end_time_strChanged();
        partial void Onout_well_start_timeChanging(short value);
        partial void Onout_well_start_timeChanged();
        partial void Onout_well_start_time_strChanging(string value);
        partial void Onout_well_start_time_strChanged();
        partial void Onwork_cnt_linearChanging(int value);
        partial void Onwork_cnt_linearChanged();
        partial void Onwork_cnt_linear_strChanging(string value);
        partial void Onwork_cnt_linear_strChanged();
        partial void Onwork_cnt_timedurationChanging(int[] value);
        partial void Onwork_cnt_timedurationChanged();
        partial void Onwork_cnt_timeduration_strChanging(string[] value);
        partial void Onwork_cnt_timeduration_strChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserClassOrderInfo"/> class.
        /// </summary>
        public UserClassOrderInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'attend_latest_worktime' value.
        /// </summary>
        [DataMember()]
        public short attend_latest_worktime
        {
            get
            {
                return this._attend_latest_worktime;
            }
            set
            {
                if ((this._attend_latest_worktime != value))
                {
                    this.Onattend_latest_worktimeChanging(value);
                    this.RaiseDataMemberChanging("attend_latest_worktime");
                    this.ValidateProperty("attend_latest_worktime", value);
                    this._attend_latest_worktime = value;
                    this.RaiseDataMemberChanged("attend_latest_worktime");
                    this.Onattend_latest_worktimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_latest_worktime_str' value.
        /// </summary>
        [DataMember()]
        public string attend_latest_worktime_str
        {
            get
            {
                return this._attend_latest_worktime_str;
            }
            set
            {
                if ((this._attend_latest_worktime_str != value))
                {
                    this.Onattend_latest_worktime_strChanging(value);
                    this.RaiseDataMemberChanging("attend_latest_worktime_str");
                    this.ValidateProperty("attend_latest_worktime_str", value);
                    this._attend_latest_worktime_str = value;
                    this.RaiseDataMemberChanged("attend_latest_worktime_str");
                    this.Onattend_latest_worktime_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_max_minutes' value.
        /// </summary>
        [DataMember()]
        public short attend_max_minutes
        {
            get
            {
                return this._attend_max_minutes;
            }
            set
            {
                if ((this._attend_max_minutes != value))
                {
                    this.Onattend_max_minutesChanging(value);
                    this.RaiseDataMemberChanging("attend_max_minutes");
                    this.ValidateProperty("attend_max_minutes", value);
                    this._attend_max_minutes = value;
                    this.RaiseDataMemberChanged("attend_max_minutes");
                    this.Onattend_max_minutesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_max_minutes_str' value.
        /// </summary>
        [DataMember()]
        public string attend_max_minutes_str
        {
            get
            {
                return this._attend_max_minutes_str;
            }
            set
            {
                if ((this._attend_max_minutes_str != value))
                {
                    this.Onattend_max_minutes_strChanging(value);
                    this.RaiseDataMemberChanging("attend_max_minutes_str");
                    this.ValidateProperty("attend_max_minutes_str", value);
                    this._attend_max_minutes_str = value;
                    this.RaiseDataMemberChanged("attend_max_minutes_str");
                    this.Onattend_max_minutes_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_off_minutes' value.
        /// </summary>
        [DataMember()]
        public short attend_off_minutes
        {
            get
            {
                return this._attend_off_minutes;
            }
            set
            {
                if ((this._attend_off_minutes != value))
                {
                    this.Onattend_off_minutesChanging(value);
                    this.RaiseDataMemberChanging("attend_off_minutes");
                    this.ValidateProperty("attend_off_minutes", value);
                    this._attend_off_minutes = value;
                    this.RaiseDataMemberChanged("attend_off_minutes");
                    this.Onattend_off_minutesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_off_minutes_str' value.
        /// </summary>
        [DataMember()]
        public string attend_off_minutes_str
        {
            get
            {
                return this._attend_off_minutes_str;
            }
            set
            {
                if ((this._attend_off_minutes_str != value))
                {
                    this.Onattend_off_minutes_strChanging(value);
                    this.RaiseDataMemberChanging("attend_off_minutes_str");
                    this.ValidateProperty("attend_off_minutes_str", value);
                    this._attend_off_minutes_str = value;
                    this.RaiseDataMemberChanged("attend_off_minutes_str");
                    this.Onattend_off_minutes_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_sign' value.
        /// </summary>
        [DataMember()]
        public string attend_sign
        {
            get
            {
                return this._attend_sign;
            }
            set
            {
                if ((this._attend_sign != value))
                {
                    this.Onattend_signChanging(value);
                    this.RaiseDataMemberChanging("attend_sign");
                    this.ValidateProperty("attend_sign", value);
                    this._attend_sign = value;
                    this.RaiseDataMemberChanged("attend_sign");
                    this.Onattend_signChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'avail_time_linear' value.
        /// </summary>
        [DataMember()]
        public short avail_time_linear
        {
            get
            {
                return this._avail_time_linear;
            }
            set
            {
                if ((this._avail_time_linear != value))
                {
                    this.Onavail_time_linearChanging(value);
                    this.RaiseDataMemberChanging("avail_time_linear");
                    this.ValidateProperty("avail_time_linear", value);
                    this._avail_time_linear = value;
                    this.RaiseDataMemberChanged("avail_time_linear");
                    this.Onavail_time_linearChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'avail_time_linear_str' value.
        /// </summary>
        [DataMember()]
        public string avail_time_linear_str
        {
            get
            {
                return this._avail_time_linear_str;
            }
            set
            {
                if ((this._avail_time_linear_str != value))
                {
                    this.Onavail_time_linear_strChanging(value);
                    this.RaiseDataMemberChanging("avail_time_linear_str");
                    this.ValidateProperty("avail_time_linear_str", value);
                    this._avail_time_linear_str = value;
                    this.RaiseDataMemberChanged("avail_time_linear_str");
                    this.Onavail_time_linear_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'avail_time_timeduration' value.
        /// </summary>
        [DataMember()]
        public short[] avail_time_timeduration
        {
            get
            {
                return this._avail_time_timeduration;
            }
            set
            {
                if ((this._avail_time_timeduration != value))
                {
                    this.Onavail_time_timedurationChanging(value);
                    this.RaiseDataMemberChanging("avail_time_timeduration");
                    this.ValidateProperty("avail_time_timeduration", value);
                    this._avail_time_timeduration = value;
                    this.RaiseDataMemberChanged("avail_time_timeduration");
                    this.Onavail_time_timedurationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'avail_time_timeduration_str' value.
        /// </summary>
        [DataMember()]
        public string[] avail_time_timeduration_str
        {
            get
            {
                return this._avail_time_timeduration_str;
            }
            set
            {
                if ((this._avail_time_timeduration_str != value))
                {
                    this.Onavail_time_timeduration_strChanging(value);
                    this.RaiseDataMemberChanging("avail_time_timeduration_str");
                    this.ValidateProperty("avail_time_timeduration_str", value);
                    this._avail_time_timeduration_str = value;
                    this.RaiseDataMemberChanged("avail_time_timeduration_str");
                    this.Onavail_time_timeduration_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_order_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int class_order_id
        {
            get
            {
                return this._class_order_id;
            }
            set
            {
                if ((this._class_order_id != value))
                {
                    this.Onclass_order_idChanging(value);
                    this.ValidateProperty("class_order_id", value);
                    this._class_order_id = value;
                    this.RaisePropertyChanged("class_order_id");
                    this.Onclass_order_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_order_name' value.
        /// </summary>
        [DataMember()]
        public string class_order_name
        {
            get
            {
                return this._class_order_name;
            }
            set
            {
                if ((this._class_order_name != value))
                {
                    this.Onclass_order_nameChanging(value);
                    this.RaiseDataMemberChanging("class_order_name");
                    this.ValidateProperty("class_order_name", value);
                    this._class_order_name = value;
                    this.RaiseDataMemberChanged("class_order_name");
                    this.Onclass_order_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_id' value.
        /// </summary>
        [DataMember()]
        public int class_type_id
        {
            get
            {
                return this._class_type_id;
            }
            set
            {
                if ((this._class_type_id != value))
                {
                    this.Onclass_type_idChanging(value);
                    this.RaiseDataMemberChanging("class_type_id");
                    this.ValidateProperty("class_type_id", value);
                    this._class_type_id = value;
                    this.RaiseDataMemberChanged("class_type_id");
                    this.Onclass_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_name' value.
        /// </summary>
        [DataMember()]
        public string class_type_name
        {
            get
            {
                return this._class_type_name;
            }
            set
            {
                if ((this._class_type_name != value))
                {
                    this.Onclass_type_nameChanging(value);
                    this.RaiseDataMemberChanging("class_type_name");
                    this.ValidateProperty("class_type_name", value);
                    this._class_type_name = value;
                    this.RaiseDataMemberChanged("class_type_name");
                    this.Onclass_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_well_end_time' value.
        /// </summary>
        [DataMember()]
        public short in_well_end_time
        {
            get
            {
                return this._in_well_end_time;
            }
            set
            {
                if ((this._in_well_end_time != value))
                {
                    this.Onin_well_end_timeChanging(value);
                    this.RaiseDataMemberChanging("in_well_end_time");
                    this.ValidateProperty("in_well_end_time", value);
                    this._in_well_end_time = value;
                    this.RaiseDataMemberChanged("in_well_end_time");
                    this.Onin_well_end_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_well_end_time_str' value.
        /// </summary>
        [DataMember()]
        public string in_well_end_time_str
        {
            get
            {
                return this._in_well_end_time_str;
            }
            set
            {
                if ((this._in_well_end_time_str != value))
                {
                    this.Onin_well_end_time_strChanging(value);
                    this.RaiseDataMemberChanging("in_well_end_time_str");
                    this.ValidateProperty("in_well_end_time_str", value);
                    this._in_well_end_time_str = value;
                    this.RaiseDataMemberChanged("in_well_end_time_str");
                    this.Onin_well_end_time_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_well_start_time' value.
        /// </summary>
        [DataMember()]
        public short in_well_start_time
        {
            get
            {
                return this._in_well_start_time;
            }
            set
            {
                if ((this._in_well_start_time != value))
                {
                    this.Onin_well_start_timeChanging(value);
                    this.RaiseDataMemberChanging("in_well_start_time");
                    this.ValidateProperty("in_well_start_time", value);
                    this._in_well_start_time = value;
                    this.RaiseDataMemberChanged("in_well_start_time");
                    this.Onin_well_start_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_well_start_time_str' value.
        /// </summary>
        [DataMember()]
        public string in_well_start_time_str
        {
            get
            {
                return this._in_well_start_time_str;
            }
            set
            {
                if ((this._in_well_start_time_str != value))
                {
                    this.Onin_well_start_time_strChanging(value);
                    this.RaiseDataMemberChanging("in_well_start_time_str");
                    this.ValidateProperty("in_well_start_time_str", value);
                    this._in_well_start_time_str = value;
                    this.RaiseDataMemberChanged("in_well_start_time_str");
                    this.Onin_well_start_time_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnindexChanging(value);
                    this.ValidateProperty("index", value);
                    this._index = value;
                    this.RaisePropertyChanged("index");
                    this.OnindexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_count_workcnt_by_timeduration' value.
        /// </summary>
        [DataMember()]
        public bool is_count_workcnt_by_timeduration
        {
            get
            {
                return this._is_count_workcnt_by_timeduration;
            }
            set
            {
                if ((this._is_count_workcnt_by_timeduration != value))
                {
                    this.Onis_count_workcnt_by_timedurationChanging(value);
                    this.RaiseDataMemberChanging("is_count_workcnt_by_timeduration");
                    this.ValidateProperty("is_count_workcnt_by_timeduration", value);
                    this._is_count_workcnt_by_timeduration = value;
                    this.RaiseDataMemberChanged("is_count_workcnt_by_timeduration");
                    this.Onis_count_workcnt_by_timedurationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_count_workcnt_by_timeduration_str' value.
        /// </summary>
        [DataMember()]
        public string is_count_workcnt_by_timeduration_str
        {
            get
            {
                return this._is_count_workcnt_by_timeduration_str;
            }
            set
            {
                if ((this._is_count_workcnt_by_timeduration_str != value))
                {
                    this.Onis_count_workcnt_by_timeduration_strChanging(value);
                    this.RaiseDataMemberChanging("is_count_workcnt_by_timeduration_str");
                    this.ValidateProperty("is_count_workcnt_by_timeduration_str", value);
                    this._is_count_workcnt_by_timeduration_str = value;
                    this.RaiseDataMemberChanged("is_count_workcnt_by_timeduration_str");
                    this.Onis_count_workcnt_by_timeduration_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'latest_worktime_valid' value.
        /// </summary>
        [DataMember()]
        public short latest_worktime_valid
        {
            get
            {
                return this._latest_worktime_valid;
            }
            set
            {
                if ((this._latest_worktime_valid != value))
                {
                    this.Onlatest_worktime_validChanging(value);
                    this.RaiseDataMemberChanging("latest_worktime_valid");
                    this.ValidateProperty("latest_worktime_valid", value);
                    this._latest_worktime_valid = value;
                    this.RaiseDataMemberChanged("latest_worktime_valid");
                    this.Onlatest_worktime_validChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'max_minutes_valid' value.
        /// </summary>
        [DataMember()]
        public short max_minutes_valid
        {
            get
            {
                return this._max_minutes_valid;
            }
            set
            {
                if ((this._max_minutes_valid != value))
                {
                    this.Onmax_minutes_validChanging(value);
                    this.RaiseDataMemberChanging("max_minutes_valid");
                    this.ValidateProperty("max_minutes_valid", value);
                    this._max_minutes_valid = value;
                    this.RaiseDataMemberChanged("max_minutes_valid");
                    this.Onmax_minutes_validChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'out_well_end_time' value.
        /// </summary>
        [DataMember()]
        public short out_well_end_time
        {
            get
            {
                return this._out_well_end_time;
            }
            set
            {
                if ((this._out_well_end_time != value))
                {
                    this.Onout_well_end_timeChanging(value);
                    this.RaiseDataMemberChanging("out_well_end_time");
                    this.ValidateProperty("out_well_end_time", value);
                    this._out_well_end_time = value;
                    this.RaiseDataMemberChanged("out_well_end_time");
                    this.Onout_well_end_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'out_well_end_time_str' value.
        /// </summary>
        [DataMember()]
        public string out_well_end_time_str
        {
            get
            {
                return this._out_well_end_time_str;
            }
            set
            {
                if ((this._out_well_end_time_str != value))
                {
                    this.Onout_well_end_time_strChanging(value);
                    this.RaiseDataMemberChanging("out_well_end_time_str");
                    this.ValidateProperty("out_well_end_time_str", value);
                    this._out_well_end_time_str = value;
                    this.RaiseDataMemberChanged("out_well_end_time_str");
                    this.Onout_well_end_time_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'out_well_start_time' value.
        /// </summary>
        [DataMember()]
        public short out_well_start_time
        {
            get
            {
                return this._out_well_start_time;
            }
            set
            {
                if ((this._out_well_start_time != value))
                {
                    this.Onout_well_start_timeChanging(value);
                    this.RaiseDataMemberChanging("out_well_start_time");
                    this.ValidateProperty("out_well_start_time", value);
                    this._out_well_start_time = value;
                    this.RaiseDataMemberChanged("out_well_start_time");
                    this.Onout_well_start_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'out_well_start_time_str' value.
        /// </summary>
        [DataMember()]
        public string out_well_start_time_str
        {
            get
            {
                return this._out_well_start_time_str;
            }
            set
            {
                if ((this._out_well_start_time_str != value))
                {
                    this.Onout_well_start_time_strChanging(value);
                    this.RaiseDataMemberChanging("out_well_start_time_str");
                    this.ValidateProperty("out_well_start_time_str", value);
                    this._out_well_start_time_str = value;
                    this.RaiseDataMemberChanged("out_well_start_time_str");
                    this.Onout_well_start_time_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_cnt_linear' value.
        /// </summary>
        [DataMember()]
        public int work_cnt_linear
        {
            get
            {
                return this._work_cnt_linear;
            }
            set
            {
                if ((this._work_cnt_linear != value))
                {
                    this.Onwork_cnt_linearChanging(value);
                    this.RaiseDataMemberChanging("work_cnt_linear");
                    this.ValidateProperty("work_cnt_linear", value);
                    this._work_cnt_linear = value;
                    this.RaiseDataMemberChanged("work_cnt_linear");
                    this.Onwork_cnt_linearChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_cnt_linear_str' value.
        /// </summary>
        [DataMember()]
        public string work_cnt_linear_str
        {
            get
            {
                return this._work_cnt_linear_str;
            }
            set
            {
                if ((this._work_cnt_linear_str != value))
                {
                    this.Onwork_cnt_linear_strChanging(value);
                    this.RaiseDataMemberChanging("work_cnt_linear_str");
                    this.ValidateProperty("work_cnt_linear_str", value);
                    this._work_cnt_linear_str = value;
                    this.RaiseDataMemberChanged("work_cnt_linear_str");
                    this.Onwork_cnt_linear_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_cnt_timeduration' value.
        /// </summary>
        [DataMember()]
        public int[] work_cnt_timeduration
        {
            get
            {
                return this._work_cnt_timeduration;
            }
            set
            {
                if ((this._work_cnt_timeduration != value))
                {
                    this.Onwork_cnt_timedurationChanging(value);
                    this.RaiseDataMemberChanging("work_cnt_timeduration");
                    this.ValidateProperty("work_cnt_timeduration", value);
                    this._work_cnt_timeduration = value;
                    this.RaiseDataMemberChanged("work_cnt_timeduration");
                    this.Onwork_cnt_timedurationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_cnt_timeduration_str' value.
        /// </summary>
        [DataMember()]
        public string[] work_cnt_timeduration_str
        {
            get
            {
                return this._work_cnt_timeduration_str;
            }
            set
            {
                if ((this._work_cnt_timeduration_str != value))
                {
                    this.Onwork_cnt_timeduration_strChanging(value);
                    this.RaiseDataMemberChanging("work_cnt_timeduration_str");
                    this.ValidateProperty("work_cnt_timeduration_str", value);
                    this._work_cnt_timeduration_str = value;
                    this.RaiseDataMemberChanged("work_cnt_timeduration_str");
                    this.Onwork_cnt_timeduration_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._class_order_id, this._index);
        }
    }
    
    /// <summary>
    /// The 'UserClassOrderJiGongShiInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class UserClassOrderJiGongShiInfo : Entity
    {
        
        private int _attend_latest_worktime;
        
        private string _attend_latest_worktimeStr;
        
        private int _attend_max_minutes;
        
        private string _attend_max_minutesStr;
        
        private int _attend_off_minutes;
        
        private string _attend_off_minutesStr;
        
        private string _attend_sign;
        
        private int _avail_time;
        
        private string _avail_timeStr;
        
        private int _class_order_id;
        
        private string _class_order_name;
        
        private int _class_type_id;
        
        private string _class_type_name;
        
        private DateTime _create_time;
        
        private string _depart_name;
        
        private int _in_end_time;
        
        private int _in_start_time;
        
        private short _in_well_end_time;
        
        private string _in_well_end_time_str;
        
        private short _in_well_start_time;
        
        private string _in_well_start_time_str;
        
        private bool _isSelected;
        
        private int _latest_worktime_valid;
        
        private string _latest_worktime_validStr;
        
        private int _max_minutes_valid;
        
        private string _max_minutes_validStr;
        
        private string _memo;
        
        private DateTime _update_time;
        
        private double _work_cnt;
        
        private double _work_cntStr;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onattend_latest_worktimeChanging(int value);
        partial void Onattend_latest_worktimeChanged();
        partial void Onattend_latest_worktimeStrChanging(string value);
        partial void Onattend_latest_worktimeStrChanged();
        partial void Onattend_max_minutesChanging(int value);
        partial void Onattend_max_minutesChanged();
        partial void Onattend_max_minutesStrChanging(string value);
        partial void Onattend_max_minutesStrChanged();
        partial void Onattend_off_minutesChanging(int value);
        partial void Onattend_off_minutesChanged();
        partial void Onattend_off_minutesStrChanging(string value);
        partial void Onattend_off_minutesStrChanged();
        partial void Onattend_signChanging(string value);
        partial void Onattend_signChanged();
        partial void Onavail_timeChanging(int value);
        partial void Onavail_timeChanged();
        partial void Onavail_timeStrChanging(string value);
        partial void Onavail_timeStrChanged();
        partial void Onclass_order_idChanging(int value);
        partial void Onclass_order_idChanged();
        partial void Onclass_order_nameChanging(string value);
        partial void Onclass_order_nameChanged();
        partial void Onclass_type_idChanging(int value);
        partial void Onclass_type_idChanged();
        partial void Onclass_type_nameChanging(string value);
        partial void Onclass_type_nameChanged();
        partial void Oncreate_timeChanging(DateTime value);
        partial void Oncreate_timeChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Onin_end_timeChanging(int value);
        partial void Onin_end_timeChanged();
        partial void Onin_start_timeChanging(int value);
        partial void Onin_start_timeChanged();
        partial void Onin_well_end_timeChanging(short value);
        partial void Onin_well_end_timeChanged();
        partial void Onin_well_end_time_strChanging(string value);
        partial void Onin_well_end_time_strChanged();
        partial void Onin_well_start_timeChanging(short value);
        partial void Onin_well_start_timeChanged();
        partial void Onin_well_start_time_strChanging(string value);
        partial void Onin_well_start_time_strChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void Onlatest_worktime_validChanging(int value);
        partial void Onlatest_worktime_validChanged();
        partial void Onlatest_worktime_validStrChanging(string value);
        partial void Onlatest_worktime_validStrChanged();
        partial void Onmax_minutes_validChanging(int value);
        partial void Onmax_minutes_validChanged();
        partial void Onmax_minutes_validStrChanging(string value);
        partial void Onmax_minutes_validStrChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onupdate_timeChanging(DateTime value);
        partial void Onupdate_timeChanged();
        partial void Onwork_cntChanging(double value);
        partial void Onwork_cntChanged();
        partial void Onwork_cntStrChanging(double value);
        partial void Onwork_cntStrChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserClassOrderJiGongShiInfo"/> class.
        /// </summary>
        public UserClassOrderJiGongShiInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'attend_latest_worktime' value.
        /// </summary>
        [DataMember()]
        public int attend_latest_worktime
        {
            get
            {
                return this._attend_latest_worktime;
            }
            set
            {
                if ((this._attend_latest_worktime != value))
                {
                    this.Onattend_latest_worktimeChanging(value);
                    this.RaiseDataMemberChanging("attend_latest_worktime");
                    this.ValidateProperty("attend_latest_worktime", value);
                    this._attend_latest_worktime = value;
                    this.RaiseDataMemberChanged("attend_latest_worktime");
                    this.Onattend_latest_worktimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_latest_worktimeStr' value.
        /// </summary>
        [DataMember()]
        public string attend_latest_worktimeStr
        {
            get
            {
                return this._attend_latest_worktimeStr;
            }
            set
            {
                if ((this._attend_latest_worktimeStr != value))
                {
                    this.Onattend_latest_worktimeStrChanging(value);
                    this.RaiseDataMemberChanging("attend_latest_worktimeStr");
                    this.ValidateProperty("attend_latest_worktimeStr", value);
                    this._attend_latest_worktimeStr = value;
                    this.RaiseDataMemberChanged("attend_latest_worktimeStr");
                    this.Onattend_latest_worktimeStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_max_minutes' value.
        /// </summary>
        [DataMember()]
        public int attend_max_minutes
        {
            get
            {
                return this._attend_max_minutes;
            }
            set
            {
                if ((this._attend_max_minutes != value))
                {
                    this.Onattend_max_minutesChanging(value);
                    this.RaiseDataMemberChanging("attend_max_minutes");
                    this.ValidateProperty("attend_max_minutes", value);
                    this._attend_max_minutes = value;
                    this.RaiseDataMemberChanged("attend_max_minutes");
                    this.Onattend_max_minutesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_max_minutesStr' value.
        /// </summary>
        [DataMember()]
        public string attend_max_minutesStr
        {
            get
            {
                return this._attend_max_minutesStr;
            }
            set
            {
                if ((this._attend_max_minutesStr != value))
                {
                    this.Onattend_max_minutesStrChanging(value);
                    this.RaiseDataMemberChanging("attend_max_minutesStr");
                    this.ValidateProperty("attend_max_minutesStr", value);
                    this._attend_max_minutesStr = value;
                    this.RaiseDataMemberChanged("attend_max_minutesStr");
                    this.Onattend_max_minutesStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_off_minutes' value.
        /// </summary>
        [DataMember()]
        public int attend_off_minutes
        {
            get
            {
                return this._attend_off_minutes;
            }
            set
            {
                if ((this._attend_off_minutes != value))
                {
                    this.Onattend_off_minutesChanging(value);
                    this.RaiseDataMemberChanging("attend_off_minutes");
                    this.ValidateProperty("attend_off_minutes", value);
                    this._attend_off_minutes = value;
                    this.RaiseDataMemberChanged("attend_off_minutes");
                    this.Onattend_off_minutesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_off_minutesStr' value.
        /// </summary>
        [DataMember()]
        public string attend_off_minutesStr
        {
            get
            {
                return this._attend_off_minutesStr;
            }
            set
            {
                if ((this._attend_off_minutesStr != value))
                {
                    this.Onattend_off_minutesStrChanging(value);
                    this.RaiseDataMemberChanging("attend_off_minutesStr");
                    this.ValidateProperty("attend_off_minutesStr", value);
                    this._attend_off_minutesStr = value;
                    this.RaiseDataMemberChanged("attend_off_minutesStr");
                    this.Onattend_off_minutesStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_sign' value.
        /// </summary>
        [DataMember()]
        public string attend_sign
        {
            get
            {
                return this._attend_sign;
            }
            set
            {
                if ((this._attend_sign != value))
                {
                    this.Onattend_signChanging(value);
                    this.RaiseDataMemberChanging("attend_sign");
                    this.ValidateProperty("attend_sign", value);
                    this._attend_sign = value;
                    this.RaiseDataMemberChanged("attend_sign");
                    this.Onattend_signChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'avail_time' value.
        /// </summary>
        [DataMember()]
        public int avail_time
        {
            get
            {
                return this._avail_time;
            }
            set
            {
                if ((this._avail_time != value))
                {
                    this.Onavail_timeChanging(value);
                    this.RaiseDataMemberChanging("avail_time");
                    this.ValidateProperty("avail_time", value);
                    this._avail_time = value;
                    this.RaiseDataMemberChanged("avail_time");
                    this.Onavail_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'avail_timeStr' value.
        /// </summary>
        [DataMember()]
        public string avail_timeStr
        {
            get
            {
                return this._avail_timeStr;
            }
            set
            {
                if ((this._avail_timeStr != value))
                {
                    this.Onavail_timeStrChanging(value);
                    this.RaiseDataMemberChanging("avail_timeStr");
                    this.ValidateProperty("avail_timeStr", value);
                    this._avail_timeStr = value;
                    this.RaiseDataMemberChanged("avail_timeStr");
                    this.Onavail_timeStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_order_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int class_order_id
        {
            get
            {
                return this._class_order_id;
            }
            set
            {
                if ((this._class_order_id != value))
                {
                    this.Onclass_order_idChanging(value);
                    this.ValidateProperty("class_order_id", value);
                    this._class_order_id = value;
                    this.RaisePropertyChanged("class_order_id");
                    this.Onclass_order_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_order_name' value.
        /// </summary>
        [DataMember()]
        public string class_order_name
        {
            get
            {
                return this._class_order_name;
            }
            set
            {
                if ((this._class_order_name != value))
                {
                    this.Onclass_order_nameChanging(value);
                    this.RaiseDataMemberChanging("class_order_name");
                    this.ValidateProperty("class_order_name", value);
                    this._class_order_name = value;
                    this.RaiseDataMemberChanged("class_order_name");
                    this.Onclass_order_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_id' value.
        /// </summary>
        [DataMember()]
        public int class_type_id
        {
            get
            {
                return this._class_type_id;
            }
            set
            {
                if ((this._class_type_id != value))
                {
                    this.Onclass_type_idChanging(value);
                    this.RaiseDataMemberChanging("class_type_id");
                    this.ValidateProperty("class_type_id", value);
                    this._class_type_id = value;
                    this.RaiseDataMemberChanged("class_type_id");
                    this.Onclass_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_name' value.
        /// </summary>
        [DataMember()]
        public string class_type_name
        {
            get
            {
                return this._class_type_name;
            }
            set
            {
                if ((this._class_type_name != value))
                {
                    this.Onclass_type_nameChanging(value);
                    this.RaiseDataMemberChanging("class_type_name");
                    this.ValidateProperty("class_type_name", value);
                    this._class_type_name = value;
                    this.RaiseDataMemberChanged("class_type_name");
                    this.Onclass_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'create_time' value.
        /// </summary>
        [DataMember()]
        public DateTime create_time
        {
            get
            {
                return this._create_time;
            }
            set
            {
                if ((this._create_time != value))
                {
                    this.Oncreate_timeChanging(value);
                    this.RaiseDataMemberChanging("create_time");
                    this.ValidateProperty("create_time", value);
                    this._create_time = value;
                    this.RaiseDataMemberChanged("create_time");
                    this.Oncreate_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_end_time' value.
        /// </summary>
        [DataMember()]
        public int in_end_time
        {
            get
            {
                return this._in_end_time;
            }
            set
            {
                if ((this._in_end_time != value))
                {
                    this.Onin_end_timeChanging(value);
                    this.RaiseDataMemberChanging("in_end_time");
                    this.ValidateProperty("in_end_time", value);
                    this._in_end_time = value;
                    this.RaiseDataMemberChanged("in_end_time");
                    this.Onin_end_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_start_time' value.
        /// </summary>
        [DataMember()]
        public int in_start_time
        {
            get
            {
                return this._in_start_time;
            }
            set
            {
                if ((this._in_start_time != value))
                {
                    this.Onin_start_timeChanging(value);
                    this.RaiseDataMemberChanging("in_start_time");
                    this.ValidateProperty("in_start_time", value);
                    this._in_start_time = value;
                    this.RaiseDataMemberChanged("in_start_time");
                    this.Onin_start_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_well_end_time' value.
        /// </summary>
        [DataMember()]
        public short in_well_end_time
        {
            get
            {
                return this._in_well_end_time;
            }
            set
            {
                if ((this._in_well_end_time != value))
                {
                    this.Onin_well_end_timeChanging(value);
                    this.RaiseDataMemberChanging("in_well_end_time");
                    this.ValidateProperty("in_well_end_time", value);
                    this._in_well_end_time = value;
                    this.RaiseDataMemberChanged("in_well_end_time");
                    this.Onin_well_end_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_well_end_time_str' value.
        /// </summary>
        [DataMember()]
        public string in_well_end_time_str
        {
            get
            {
                return this._in_well_end_time_str;
            }
            set
            {
                if ((this._in_well_end_time_str != value))
                {
                    this.Onin_well_end_time_strChanging(value);
                    this.RaiseDataMemberChanging("in_well_end_time_str");
                    this.ValidateProperty("in_well_end_time_str", value);
                    this._in_well_end_time_str = value;
                    this.RaiseDataMemberChanged("in_well_end_time_str");
                    this.Onin_well_end_time_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_well_start_time' value.
        /// </summary>
        [DataMember()]
        public short in_well_start_time
        {
            get
            {
                return this._in_well_start_time;
            }
            set
            {
                if ((this._in_well_start_time != value))
                {
                    this.Onin_well_start_timeChanging(value);
                    this.RaiseDataMemberChanging("in_well_start_time");
                    this.ValidateProperty("in_well_start_time", value);
                    this._in_well_start_time = value;
                    this.RaiseDataMemberChanged("in_well_start_time");
                    this.Onin_well_start_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_well_start_time_str' value.
        /// </summary>
        [DataMember()]
        public string in_well_start_time_str
        {
            get
            {
                return this._in_well_start_time_str;
            }
            set
            {
                if ((this._in_well_start_time_str != value))
                {
                    this.Onin_well_start_time_strChanging(value);
                    this.RaiseDataMemberChanging("in_well_start_time_str");
                    this.ValidateProperty("in_well_start_time_str", value);
                    this._in_well_start_time_str = value;
                    this.RaiseDataMemberChanged("in_well_start_time_str");
                    this.Onin_well_start_time_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'latest_worktime_valid' value.
        /// </summary>
        [DataMember()]
        public int latest_worktime_valid
        {
            get
            {
                return this._latest_worktime_valid;
            }
            set
            {
                if ((this._latest_worktime_valid != value))
                {
                    this.Onlatest_worktime_validChanging(value);
                    this.RaiseDataMemberChanging("latest_worktime_valid");
                    this.ValidateProperty("latest_worktime_valid", value);
                    this._latest_worktime_valid = value;
                    this.RaiseDataMemberChanged("latest_worktime_valid");
                    this.Onlatest_worktime_validChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'latest_worktime_validStr' value.
        /// </summary>
        [DataMember()]
        public string latest_worktime_validStr
        {
            get
            {
                return this._latest_worktime_validStr;
            }
            set
            {
                if ((this._latest_worktime_validStr != value))
                {
                    this.Onlatest_worktime_validStrChanging(value);
                    this.RaiseDataMemberChanging("latest_worktime_validStr");
                    this.ValidateProperty("latest_worktime_validStr", value);
                    this._latest_worktime_validStr = value;
                    this.RaiseDataMemberChanged("latest_worktime_validStr");
                    this.Onlatest_worktime_validStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'max_minutes_valid' value.
        /// </summary>
        [DataMember()]
        public int max_minutes_valid
        {
            get
            {
                return this._max_minutes_valid;
            }
            set
            {
                if ((this._max_minutes_valid != value))
                {
                    this.Onmax_minutes_validChanging(value);
                    this.RaiseDataMemberChanging("max_minutes_valid");
                    this.ValidateProperty("max_minutes_valid", value);
                    this._max_minutes_valid = value;
                    this.RaiseDataMemberChanged("max_minutes_valid");
                    this.Onmax_minutes_validChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'max_minutes_validStr' value.
        /// </summary>
        [DataMember()]
        public string max_minutes_validStr
        {
            get
            {
                return this._max_minutes_validStr;
            }
            set
            {
                if ((this._max_minutes_validStr != value))
                {
                    this.Onmax_minutes_validStrChanging(value);
                    this.RaiseDataMemberChanging("max_minutes_validStr");
                    this.ValidateProperty("max_minutes_validStr", value);
                    this._max_minutes_validStr = value;
                    this.RaiseDataMemberChanged("max_minutes_validStr");
                    this.Onmax_minutes_validStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'update_time' value.
        /// </summary>
        [DataMember()]
        public DateTime update_time
        {
            get
            {
                return this._update_time;
            }
            set
            {
                if ((this._update_time != value))
                {
                    this.Onupdate_timeChanging(value);
                    this.RaiseDataMemberChanging("update_time");
                    this.ValidateProperty("update_time", value);
                    this._update_time = value;
                    this.RaiseDataMemberChanged("update_time");
                    this.Onupdate_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_cnt' value.
        /// </summary>
        [DataMember()]
        public double work_cnt
        {
            get
            {
                return this._work_cnt;
            }
            set
            {
                if ((this._work_cnt != value))
                {
                    this.Onwork_cntChanging(value);
                    this.RaiseDataMemberChanging("work_cnt");
                    this.ValidateProperty("work_cnt", value);
                    this._work_cnt = value;
                    this.RaiseDataMemberChanged("work_cnt");
                    this.Onwork_cntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_cntStr' value.
        /// </summary>
        [DataMember()]
        public double work_cntStr
        {
            get
            {
                return this._work_cntStr;
            }
            set
            {
                if ((this._work_cntStr != value))
                {
                    this.Onwork_cntStrChanging(value);
                    this.RaiseDataMemberChanging("work_cntStr");
                    this.ValidateProperty("work_cntStr", value);
                    this._work_cntStr = value;
                    this.RaiseDataMemberChanged("work_cntStr");
                    this.Onwork_cntStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._class_order_id;
        }
    }
    
    /// <summary>
    /// The 'UserClassOrderSignInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class UserClassOrderSignInfo : Entity
    {
        
        private string _attend_sign;
        
        private int _class_order_id;
        
        private string _class_order_name;
        
        private int _class_type_id;
        
        private string _class_type_name;
        
        private int[] _in_calcs;
        
        private bool _isSelected;
        
        private int _lian_ban;
        
        private string _memo;
        
        private short _min_work_time;
        
        private string _min_work_time_str;
        
        private int[] _section_begin_mins;
        
        private int[] _section_end_mins;
        
        private string _section_time_str;
        
        private int _work_cnt;
        
        private string _work_cnt_str;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onattend_signChanging(string value);
        partial void Onattend_signChanged();
        partial void Onclass_order_idChanging(int value);
        partial void Onclass_order_idChanged();
        partial void Onclass_order_nameChanging(string value);
        partial void Onclass_order_nameChanged();
        partial void Onclass_type_idChanging(int value);
        partial void Onclass_type_idChanged();
        partial void Onclass_type_nameChanging(string value);
        partial void Onclass_type_nameChanged();
        partial void Onin_calcsChanging(int[] value);
        partial void Onin_calcsChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void Onlian_banChanging(int value);
        partial void Onlian_banChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onmin_work_timeChanging(short value);
        partial void Onmin_work_timeChanged();
        partial void Onmin_work_time_strChanging(string value);
        partial void Onmin_work_time_strChanged();
        partial void Onsection_begin_minsChanging(int[] value);
        partial void Onsection_begin_minsChanged();
        partial void Onsection_end_minsChanging(int[] value);
        partial void Onsection_end_minsChanged();
        partial void Onsection_time_strChanging(string value);
        partial void Onsection_time_strChanged();
        partial void Onwork_cntChanging(int value);
        partial void Onwork_cntChanged();
        partial void Onwork_cnt_strChanging(string value);
        partial void Onwork_cnt_strChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserClassOrderSignInfo"/> class.
        /// </summary>
        public UserClassOrderSignInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'attend_sign' value.
        /// </summary>
        [DataMember()]
        public string attend_sign
        {
            get
            {
                return this._attend_sign;
            }
            set
            {
                if ((this._attend_sign != value))
                {
                    this.Onattend_signChanging(value);
                    this.RaiseDataMemberChanging("attend_sign");
                    this.ValidateProperty("attend_sign", value);
                    this._attend_sign = value;
                    this.RaiseDataMemberChanged("attend_sign");
                    this.Onattend_signChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_order_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int class_order_id
        {
            get
            {
                return this._class_order_id;
            }
            set
            {
                if ((this._class_order_id != value))
                {
                    this.Onclass_order_idChanging(value);
                    this.ValidateProperty("class_order_id", value);
                    this._class_order_id = value;
                    this.RaisePropertyChanged("class_order_id");
                    this.Onclass_order_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_order_name' value.
        /// </summary>
        [DataMember()]
        public string class_order_name
        {
            get
            {
                return this._class_order_name;
            }
            set
            {
                if ((this._class_order_name != value))
                {
                    this.Onclass_order_nameChanging(value);
                    this.RaiseDataMemberChanging("class_order_name");
                    this.ValidateProperty("class_order_name", value);
                    this._class_order_name = value;
                    this.RaiseDataMemberChanged("class_order_name");
                    this.Onclass_order_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_id' value.
        /// </summary>
        [DataMember()]
        public int class_type_id
        {
            get
            {
                return this._class_type_id;
            }
            set
            {
                if ((this._class_type_id != value))
                {
                    this.Onclass_type_idChanging(value);
                    this.RaiseDataMemberChanging("class_type_id");
                    this.ValidateProperty("class_type_id", value);
                    this._class_type_id = value;
                    this.RaiseDataMemberChanged("class_type_id");
                    this.Onclass_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_name' value.
        /// </summary>
        [DataMember()]
        public string class_type_name
        {
            get
            {
                return this._class_type_name;
            }
            set
            {
                if ((this._class_type_name != value))
                {
                    this.Onclass_type_nameChanging(value);
                    this.RaiseDataMemberChanging("class_type_name");
                    this.ValidateProperty("class_type_name", value);
                    this._class_type_name = value;
                    this.RaiseDataMemberChanged("class_type_name");
                    this.Onclass_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_calcs' value.
        /// </summary>
        [DataMember()]
        public int[] in_calcs
        {
            get
            {
                return this._in_calcs;
            }
            set
            {
                if ((this._in_calcs != value))
                {
                    this.Onin_calcsChanging(value);
                    this.RaiseDataMemberChanging("in_calcs");
                    this.ValidateProperty("in_calcs", value);
                    this._in_calcs = value;
                    this.RaiseDataMemberChanged("in_calcs");
                    this.Onin_calcsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'lian_ban' value.
        /// </summary>
        [DataMember()]
        public int lian_ban
        {
            get
            {
                return this._lian_ban;
            }
            set
            {
                if ((this._lian_ban != value))
                {
                    this.Onlian_banChanging(value);
                    this.RaiseDataMemberChanging("lian_ban");
                    this.ValidateProperty("lian_ban", value);
                    this._lian_ban = value;
                    this.RaiseDataMemberChanged("lian_ban");
                    this.Onlian_banChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'min_work_time' value.
        /// </summary>
        [DataMember()]
        public short min_work_time
        {
            get
            {
                return this._min_work_time;
            }
            set
            {
                if ((this._min_work_time != value))
                {
                    this.Onmin_work_timeChanging(value);
                    this.RaiseDataMemberChanging("min_work_time");
                    this.ValidateProperty("min_work_time", value);
                    this._min_work_time = value;
                    this.RaiseDataMemberChanged("min_work_time");
                    this.Onmin_work_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'min_work_time_str' value.
        /// </summary>
        [DataMember()]
        public string min_work_time_str
        {
            get
            {
                return this._min_work_time_str;
            }
            set
            {
                if ((this._min_work_time_str != value))
                {
                    this.Onmin_work_time_strChanging(value);
                    this.RaiseDataMemberChanging("min_work_time_str");
                    this.ValidateProperty("min_work_time_str", value);
                    this._min_work_time_str = value;
                    this.RaiseDataMemberChanged("min_work_time_str");
                    this.Onmin_work_time_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'section_begin_mins' value.
        /// </summary>
        [DataMember()]
        public int[] section_begin_mins
        {
            get
            {
                return this._section_begin_mins;
            }
            set
            {
                if ((this._section_begin_mins != value))
                {
                    this.Onsection_begin_minsChanging(value);
                    this.RaiseDataMemberChanging("section_begin_mins");
                    this.ValidateProperty("section_begin_mins", value);
                    this._section_begin_mins = value;
                    this.RaiseDataMemberChanged("section_begin_mins");
                    this.Onsection_begin_minsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'section_end_mins' value.
        /// </summary>
        [DataMember()]
        public int[] section_end_mins
        {
            get
            {
                return this._section_end_mins;
            }
            set
            {
                if ((this._section_end_mins != value))
                {
                    this.Onsection_end_minsChanging(value);
                    this.RaiseDataMemberChanging("section_end_mins");
                    this.ValidateProperty("section_end_mins", value);
                    this._section_end_mins = value;
                    this.RaiseDataMemberChanged("section_end_mins");
                    this.Onsection_end_minsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'section_time_str' value.
        /// </summary>
        [DataMember()]
        public string section_time_str
        {
            get
            {
                return this._section_time_str;
            }
            set
            {
                if ((this._section_time_str != value))
                {
                    this.Onsection_time_strChanging(value);
                    this.RaiseDataMemberChanging("section_time_str");
                    this.ValidateProperty("section_time_str", value);
                    this._section_time_str = value;
                    this.RaiseDataMemberChanged("section_time_str");
                    this.Onsection_time_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_cnt' value.
        /// </summary>
        [DataMember()]
        public int work_cnt
        {
            get
            {
                return this._work_cnt;
            }
            set
            {
                if ((this._work_cnt != value))
                {
                    this.Onwork_cntChanging(value);
                    this.RaiseDataMemberChanging("work_cnt");
                    this.ValidateProperty("work_cnt", value);
                    this._work_cnt = value;
                    this.RaiseDataMemberChanged("work_cnt");
                    this.Onwork_cntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_cnt_str' value.
        /// </summary>
        [DataMember()]
        public string work_cnt_str
        {
            get
            {
                return this._work_cnt_str;
            }
            set
            {
                if ((this._work_cnt_str != value))
                {
                    this.Onwork_cnt_strChanging(value);
                    this.RaiseDataMemberChanging("work_cnt_str");
                    this.ValidateProperty("work_cnt_str", value);
                    this._work_cnt_str = value;
                    this.RaiseDataMemberChanged("work_cnt_str");
                    this.Onwork_cnt_strChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._class_order_id;
        }
    }
    
    /// <summary>
    /// The 'UserClassTypeInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class UserClassTypeInfo : Entity
    {
        
        private short _class_type;
        
        private int _class_type_id;
        
        private string _class_type_name;
        
        private short _delete_info;
        
        private int _index;
        
        private bool _isSelected;
        
        private string _memo;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onclass_typeChanging(short value);
        partial void Onclass_typeChanged();
        partial void Onclass_type_idChanging(int value);
        partial void Onclass_type_idChanged();
        partial void Onclass_type_nameChanging(string value);
        partial void Onclass_type_nameChanged();
        partial void Ondelete_infoChanging(short value);
        partial void Ondelete_infoChanged();
        partial void OnindexChanging(int value);
        partial void OnindexChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserClassTypeInfo"/> class.
        /// </summary>
        public UserClassTypeInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'class_type' value.
        /// </summary>
        [DataMember()]
        public short class_type
        {
            get
            {
                return this._class_type;
            }
            set
            {
                if ((this._class_type != value))
                {
                    this.Onclass_typeChanging(value);
                    this.RaiseDataMemberChanging("class_type");
                    this.ValidateProperty("class_type", value);
                    this._class_type = value;
                    this.RaiseDataMemberChanged("class_type");
                    this.Onclass_typeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int class_type_id
        {
            get
            {
                return this._class_type_id;
            }
            set
            {
                if ((this._class_type_id != value))
                {
                    this.Onclass_type_idChanging(value);
                    this.ValidateProperty("class_type_id", value);
                    this._class_type_id = value;
                    this.RaisePropertyChanged("class_type_id");
                    this.Onclass_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_name' value.
        /// </summary>
        [DataMember()]
        public string class_type_name
        {
            get
            {
                return this._class_type_name;
            }
            set
            {
                if ((this._class_type_name != value))
                {
                    this.Onclass_type_nameChanging(value);
                    this.RaiseDataMemberChanging("class_type_name");
                    this.ValidateProperty("class_type_name", value);
                    this._class_type_name = value;
                    this.RaiseDataMemberChanged("class_type_name");
                    this.Onclass_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'delete_info' value.
        /// </summary>
        [DataMember()]
        public short delete_info
        {
            get
            {
                return this._delete_info;
            }
            set
            {
                if ((this._delete_info != value))
                {
                    this.Ondelete_infoChanging(value);
                    this.RaiseDataMemberChanging("delete_info");
                    this.ValidateProperty("delete_info", value);
                    this._delete_info = value;
                    this.RaiseDataMemberChanged("delete_info");
                    this.Ondelete_infoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'index' value.
        /// </summary>
        [DataMember()]
        public int index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnindexChanging(value);
                    this.RaiseDataMemberChanging("index");
                    this.ValidateProperty("index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("index");
                    this.OnindexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._class_type_id;
        }
    }
    
    /// <summary>
    /// The 'UserDepartInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class UserDepartInfo : Entity
    {
        
        private string _company_sn;
        
        private string _contact_phone;
        
        private string _create_time;
        
        private string _delete_time;
        
        private string _depart_auth;
        
        private string _depart_director;
        
        private int _depart_function_id;
        
        private int _depart_id;
        
        private string _depart_name;
        
        private string _depart_sn;
        
        private int _depart_work_place_id;
        
        private int _index;
        
        private bool _isSelected;
        
        private string _memo;
        
        private int _parent_depart_id;
        
        private string _parent_depart_name;
        
        private string _update_time;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Oncompany_snChanging(string value);
        partial void Oncompany_snChanged();
        partial void Oncontact_phoneChanging(string value);
        partial void Oncontact_phoneChanged();
        partial void Oncreate_timeChanging(string value);
        partial void Oncreate_timeChanged();
        partial void Ondelete_timeChanging(string value);
        partial void Ondelete_timeChanged();
        partial void Ondepart_authChanging(string value);
        partial void Ondepart_authChanged();
        partial void Ondepart_directorChanging(string value);
        partial void Ondepart_directorChanged();
        partial void Ondepart_function_idChanging(int value);
        partial void Ondepart_function_idChanged();
        partial void Ondepart_idChanging(int value);
        partial void Ondepart_idChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Ondepart_snChanging(string value);
        partial void Ondepart_snChanged();
        partial void Ondepart_work_place_idChanging(int value);
        partial void Ondepart_work_place_idChanged();
        partial void OnindexChanging(int value);
        partial void OnindexChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onparent_depart_idChanging(int value);
        partial void Onparent_depart_idChanged();
        partial void Onparent_depart_nameChanging(string value);
        partial void Onparent_depart_nameChanged();
        partial void Onupdate_timeChanging(string value);
        partial void Onupdate_timeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDepartInfo"/> class.
        /// </summary>
        public UserDepartInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'company_sn' value.
        /// </summary>
        [DataMember()]
        public string company_sn
        {
            get
            {
                return this._company_sn;
            }
            set
            {
                if ((this._company_sn != value))
                {
                    this.Oncompany_snChanging(value);
                    this.RaiseDataMemberChanging("company_sn");
                    this.ValidateProperty("company_sn", value);
                    this._company_sn = value;
                    this.RaiseDataMemberChanged("company_sn");
                    this.Oncompany_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'contact_phone' value.
        /// </summary>
        [DataMember()]
        public string contact_phone
        {
            get
            {
                return this._contact_phone;
            }
            set
            {
                if ((this._contact_phone != value))
                {
                    this.Oncontact_phoneChanging(value);
                    this.RaiseDataMemberChanging("contact_phone");
                    this.ValidateProperty("contact_phone", value);
                    this._contact_phone = value;
                    this.RaiseDataMemberChanged("contact_phone");
                    this.Oncontact_phoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'create_time' value.
        /// </summary>
        [DataMember()]
        public string create_time
        {
            get
            {
                return this._create_time;
            }
            set
            {
                if ((this._create_time != value))
                {
                    this.Oncreate_timeChanging(value);
                    this.RaiseDataMemberChanging("create_time");
                    this.ValidateProperty("create_time", value);
                    this._create_time = value;
                    this.RaiseDataMemberChanged("create_time");
                    this.Oncreate_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'delete_time' value.
        /// </summary>
        [DataMember()]
        public string delete_time
        {
            get
            {
                return this._delete_time;
            }
            set
            {
                if ((this._delete_time != value))
                {
                    this.Ondelete_timeChanging(value);
                    this.RaiseDataMemberChanging("delete_time");
                    this.ValidateProperty("delete_time", value);
                    this._delete_time = value;
                    this.RaiseDataMemberChanged("delete_time");
                    this.Ondelete_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_auth' value.
        /// </summary>
        [DataMember()]
        public string depart_auth
        {
            get
            {
                return this._depart_auth;
            }
            set
            {
                if ((this._depart_auth != value))
                {
                    this.Ondepart_authChanging(value);
                    this.RaiseDataMemberChanging("depart_auth");
                    this.ValidateProperty("depart_auth", value);
                    this._depart_auth = value;
                    this.RaiseDataMemberChanged("depart_auth");
                    this.Ondepart_authChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_director' value.
        /// </summary>
        [DataMember()]
        public string depart_director
        {
            get
            {
                return this._depart_director;
            }
            set
            {
                if ((this._depart_director != value))
                {
                    this.Ondepart_directorChanging(value);
                    this.RaiseDataMemberChanging("depart_director");
                    this.ValidateProperty("depart_director", value);
                    this._depart_director = value;
                    this.RaiseDataMemberChanged("depart_director");
                    this.Ondepart_directorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_function_id' value.
        /// </summary>
        [DataMember()]
        public int depart_function_id
        {
            get
            {
                return this._depart_function_id;
            }
            set
            {
                if ((this._depart_function_id != value))
                {
                    this.Ondepart_function_idChanging(value);
                    this.RaiseDataMemberChanging("depart_function_id");
                    this.ValidateProperty("depart_function_id", value);
                    this._depart_function_id = value;
                    this.RaiseDataMemberChanged("depart_function_id");
                    this.Ondepart_function_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int depart_id
        {
            get
            {
                return this._depart_id;
            }
            set
            {
                if ((this._depart_id != value))
                {
                    this.Ondepart_idChanging(value);
                    this.ValidateProperty("depart_id", value);
                    this._depart_id = value;
                    this.RaisePropertyChanged("depart_id");
                    this.Ondepart_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_sn' value.
        /// </summary>
        [DataMember()]
        public string depart_sn
        {
            get
            {
                return this._depart_sn;
            }
            set
            {
                if ((this._depart_sn != value))
                {
                    this.Ondepart_snChanging(value);
                    this.RaiseDataMemberChanging("depart_sn");
                    this.ValidateProperty("depart_sn", value);
                    this._depart_sn = value;
                    this.RaiseDataMemberChanged("depart_sn");
                    this.Ondepart_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_work_place_id' value.
        /// </summary>
        [DataMember()]
        public int depart_work_place_id
        {
            get
            {
                return this._depart_work_place_id;
            }
            set
            {
                if ((this._depart_work_place_id != value))
                {
                    this.Ondepart_work_place_idChanging(value);
                    this.RaiseDataMemberChanging("depart_work_place_id");
                    this.ValidateProperty("depart_work_place_id", value);
                    this._depart_work_place_id = value;
                    this.RaiseDataMemberChanged("depart_work_place_id");
                    this.Ondepart_work_place_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'index' value.
        /// </summary>
        [DataMember()]
        public int index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnindexChanging(value);
                    this.RaiseDataMemberChanging("index");
                    this.ValidateProperty("index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("index");
                    this.OnindexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'parent_depart_id' value.
        /// </summary>
        [DataMember()]
        public int parent_depart_id
        {
            get
            {
                return this._parent_depart_id;
            }
            set
            {
                if ((this._parent_depart_id != value))
                {
                    this.Onparent_depart_idChanging(value);
                    this.RaiseDataMemberChanging("parent_depart_id");
                    this.ValidateProperty("parent_depart_id", value);
                    this._parent_depart_id = value;
                    this.RaiseDataMemberChanged("parent_depart_id");
                    this.Onparent_depart_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'parent_depart_name' value.
        /// </summary>
        [DataMember()]
        public string parent_depart_name
        {
            get
            {
                return this._parent_depart_name;
            }
            set
            {
                if ((this._parent_depart_name != value))
                {
                    this.Onparent_depart_nameChanging(value);
                    this.RaiseDataMemberChanging("parent_depart_name");
                    this.ValidateProperty("parent_depart_name", value);
                    this._parent_depart_name = value;
                    this.RaiseDataMemberChanged("parent_depart_name");
                    this.Onparent_depart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'update_time' value.
        /// </summary>
        [DataMember()]
        public string update_time
        {
            get
            {
                return this._update_time;
            }
            set
            {
                if ((this._update_time != value))
                {
                    this.Onupdate_timeChanging(value);
                    this.RaiseDataMemberChanging("update_time");
                    this.ValidateProperty("update_time", value);
                    this._update_time = value;
                    this.RaiseDataMemberChanged("update_time");
                    this.Onupdate_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._depart_id;
        }
    }
    
    /// <summary>
    /// The 'UserInWellPerson' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class UserInWellPerson : Entity
    {
        
        private string _class_order_name;
        
        private string _depart_name;
        
        private string _dev_group;
        
        private int _dev_group_int;
        
        private int _in_out_id;
        
        private int _in_recog_id;
        
        private DateTime _in_time;
        
        private bool _is_select;
        
        private int _person_id;
        
        private string _person_name;
        
        private string _work_sn;
        
        private string _work_state;
        
        private string _work_time;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onclass_order_nameChanging(string value);
        partial void Onclass_order_nameChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Ondev_groupChanging(string value);
        partial void Ondev_groupChanged();
        partial void Ondev_group_intChanging(int value);
        partial void Ondev_group_intChanged();
        partial void Onin_out_idChanging(int value);
        partial void Onin_out_idChanged();
        partial void Onin_recog_idChanging(int value);
        partial void Onin_recog_idChanged();
        partial void Onin_timeChanging(DateTime value);
        partial void Onin_timeChanged();
        partial void Onis_selectChanging(bool value);
        partial void Onis_selectChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();
        partial void Onperson_nameChanging(string value);
        partial void Onperson_nameChanged();
        partial void Onwork_snChanging(string value);
        partial void Onwork_snChanged();
        partial void Onwork_stateChanging(string value);
        partial void Onwork_stateChanged();
        partial void Onwork_timeChanging(string value);
        partial void Onwork_timeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInWellPerson"/> class.
        /// </summary>
        public UserInWellPerson()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'class_order_name' value.
        /// </summary>
        [DataMember()]
        public string class_order_name
        {
            get
            {
                return this._class_order_name;
            }
            set
            {
                if ((this._class_order_name != value))
                {
                    this.Onclass_order_nameChanging(value);
                    this.RaiseDataMemberChanging("class_order_name");
                    this.ValidateProperty("class_order_name", value);
                    this._class_order_name = value;
                    this.RaiseDataMemberChanged("class_order_name");
                    this.Onclass_order_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'dev_group' value.
        /// </summary>
        [DataMember()]
        public string dev_group
        {
            get
            {
                return this._dev_group;
            }
            set
            {
                if ((this._dev_group != value))
                {
                    this.Ondev_groupChanging(value);
                    this.RaiseDataMemberChanging("dev_group");
                    this.ValidateProperty("dev_group", value);
                    this._dev_group = value;
                    this.RaiseDataMemberChanged("dev_group");
                    this.Ondev_groupChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'dev_group_int' value.
        /// </summary>
        [DataMember()]
        public int dev_group_int
        {
            get
            {
                return this._dev_group_int;
            }
            set
            {
                if ((this._dev_group_int != value))
                {
                    this.Ondev_group_intChanging(value);
                    this.RaiseDataMemberChanging("dev_group_int");
                    this.ValidateProperty("dev_group_int", value);
                    this._dev_group_int = value;
                    this.RaiseDataMemberChanged("dev_group_int");
                    this.Ondev_group_intChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_out_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int in_out_id
        {
            get
            {
                return this._in_out_id;
            }
            set
            {
                if ((this._in_out_id != value))
                {
                    this.Onin_out_idChanging(value);
                    this.ValidateProperty("in_out_id", value);
                    this._in_out_id = value;
                    this.RaisePropertyChanged("in_out_id");
                    this.Onin_out_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_recog_id' value.
        /// </summary>
        [DataMember()]
        public int in_recog_id
        {
            get
            {
                return this._in_recog_id;
            }
            set
            {
                if ((this._in_recog_id != value))
                {
                    this.Onin_recog_idChanging(value);
                    this.RaiseDataMemberChanging("in_recog_id");
                    this.ValidateProperty("in_recog_id", value);
                    this._in_recog_id = value;
                    this.RaiseDataMemberChanged("in_recog_id");
                    this.Onin_recog_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_time' value.
        /// </summary>
        [DataMember()]
        public DateTime in_time
        {
            get
            {
                return this._in_time;
            }
            set
            {
                if ((this._in_time != value))
                {
                    this.Onin_timeChanging(value);
                    this.RaiseDataMemberChanging("in_time");
                    this.ValidateProperty("in_time", value);
                    this._in_time = value;
                    this.RaiseDataMemberChanged("in_time");
                    this.Onin_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_select' value.
        /// </summary>
        [DataMember()]
        public bool is_select
        {
            get
            {
                return this._is_select;
            }
            set
            {
                if ((this._is_select != value))
                {
                    this.Onis_selectChanging(value);
                    this.RaiseDataMemberChanging("is_select");
                    this.ValidateProperty("is_select", value);
                    this._is_select = value;
                    this.RaiseDataMemberChanged("is_select");
                    this.Onis_selectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.RaiseDataMemberChanging("person_id");
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaiseDataMemberChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_name' value.
        /// </summary>
        [DataMember()]
        public string person_name
        {
            get
            {
                return this._person_name;
            }
            set
            {
                if ((this._person_name != value))
                {
                    this.Onperson_nameChanging(value);
                    this.RaiseDataMemberChanging("person_name");
                    this.ValidateProperty("person_name", value);
                    this._person_name = value;
                    this.RaiseDataMemberChanged("person_name");
                    this.Onperson_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_sn' value.
        /// </summary>
        [DataMember()]
        public string work_sn
        {
            get
            {
                return this._work_sn;
            }
            set
            {
                if ((this._work_sn != value))
                {
                    this.Onwork_snChanging(value);
                    this.RaiseDataMemberChanging("work_sn");
                    this.ValidateProperty("work_sn", value);
                    this._work_sn = value;
                    this.RaiseDataMemberChanged("work_sn");
                    this.Onwork_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_state' value.
        /// </summary>
        [DataMember()]
        public string work_state
        {
            get
            {
                return this._work_state;
            }
            set
            {
                if ((this._work_state != value))
                {
                    this.Onwork_stateChanging(value);
                    this.RaiseDataMemberChanging("work_state");
                    this.ValidateProperty("work_state", value);
                    this._work_state = value;
                    this.RaiseDataMemberChanged("work_state");
                    this.Onwork_stateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_time' value.
        /// </summary>
        [DataMember()]
        public string work_time
        {
            get
            {
                return this._work_time;
            }
            set
            {
                if ((this._work_time != value))
                {
                    this.Onwork_timeChanging(value);
                    this.RaiseDataMemberChanging("work_time");
                    this.ValidateProperty("work_time", value);
                    this._work_time = value;
                    this.RaiseDataMemberChanged("work_time");
                    this.Onwork_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._in_out_id;
        }
    }
    
    /// <summary>
    /// The 'UserOperationLog' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class UserOperationLog : Entity
    {
        
        private string _content;
        
        private string _description;
        
        private DateTime _operation_time;
        
        private short _result;
        
        private string _resultStr;
        
        private int _user_id;
        
        private string _user_ip;
        
        private string _user_name;
        
        private int _user_operation_log_id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OncontentChanging(string value);
        partial void OncontentChanged();
        partial void OndescriptionChanging(string value);
        partial void OndescriptionChanged();
        partial void Onoperation_timeChanging(DateTime value);
        partial void Onoperation_timeChanged();
        partial void OnresultChanging(short value);
        partial void OnresultChanged();
        partial void OnresultStrChanging(string value);
        partial void OnresultStrChanged();
        partial void Onuser_idChanging(int value);
        partial void Onuser_idChanged();
        partial void Onuser_ipChanging(string value);
        partial void Onuser_ipChanged();
        partial void Onuser_nameChanging(string value);
        partial void Onuser_nameChanged();
        partial void Onuser_operation_log_idChanging(int value);
        partial void Onuser_operation_log_idChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserOperationLog"/> class.
        /// </summary>
        public UserOperationLog()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'content' value.
        /// </summary>
        [DataMember()]
        public string content
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OncontentChanging(value);
                    this.RaiseDataMemberChanging("content");
                    this.ValidateProperty("content", value);
                    this._content = value;
                    this.RaiseDataMemberChanged("content");
                    this.OncontentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'description' value.
        /// </summary>
        [DataMember()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OndescriptionChanging(value);
                    this.RaiseDataMemberChanging("description");
                    this.ValidateProperty("description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("description");
                    this.OndescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'operation_time' value.
        /// </summary>
        [DataMember()]
        public DateTime operation_time
        {
            get
            {
                return this._operation_time;
            }
            set
            {
                if ((this._operation_time != value))
                {
                    this.Onoperation_timeChanging(value);
                    this.RaiseDataMemberChanging("operation_time");
                    this.ValidateProperty("operation_time", value);
                    this._operation_time = value;
                    this.RaiseDataMemberChanged("operation_time");
                    this.Onoperation_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'result' value.
        /// </summary>
        [DataMember()]
        public short result
        {
            get
            {
                return this._result;
            }
            set
            {
                if ((this._result != value))
                {
                    this.OnresultChanging(value);
                    this.RaiseDataMemberChanging("result");
                    this.ValidateProperty("result", value);
                    this._result = value;
                    this.RaiseDataMemberChanged("result");
                    this.OnresultChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'resultStr' value.
        /// </summary>
        [DataMember()]
        public string resultStr
        {
            get
            {
                return this._resultStr;
            }
            set
            {
                if ((this._resultStr != value))
                {
                    this.OnresultStrChanging(value);
                    this.RaiseDataMemberChanging("resultStr");
                    this.ValidateProperty("resultStr", value);
                    this._resultStr = value;
                    this.RaiseDataMemberChanged("resultStr");
                    this.OnresultStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'user_id' value.
        /// </summary>
        [DataMember()]
        public int user_id
        {
            get
            {
                return this._user_id;
            }
            set
            {
                if ((this._user_id != value))
                {
                    this.Onuser_idChanging(value);
                    this.RaiseDataMemberChanging("user_id");
                    this.ValidateProperty("user_id", value);
                    this._user_id = value;
                    this.RaiseDataMemberChanged("user_id");
                    this.Onuser_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'user_ip' value.
        /// </summary>
        [DataMember()]
        public string user_ip
        {
            get
            {
                return this._user_ip;
            }
            set
            {
                if ((this._user_ip != value))
                {
                    this.Onuser_ipChanging(value);
                    this.RaiseDataMemberChanging("user_ip");
                    this.ValidateProperty("user_ip", value);
                    this._user_ip = value;
                    this.RaiseDataMemberChanged("user_ip");
                    this.Onuser_ipChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'user_name' value.
        /// </summary>
        [DataMember()]
        public string user_name
        {
            get
            {
                return this._user_name;
            }
            set
            {
                if ((this._user_name != value))
                {
                    this.Onuser_nameChanging(value);
                    this.RaiseDataMemberChanging("user_name");
                    this.ValidateProperty("user_name", value);
                    this._user_name = value;
                    this.RaiseDataMemberChanged("user_name");
                    this.Onuser_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'user_operation_log_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int user_operation_log_id
        {
            get
            {
                return this._user_operation_log_id;
            }
            set
            {
                if ((this._user_operation_log_id != value))
                {
                    this.Onuser_operation_log_idChanging(value);
                    this.ValidateProperty("user_operation_log_id", value);
                    this._user_operation_log_id = value;
                    this.RaisePropertyChanged("user_operation_log_id");
                    this.Onuser_operation_log_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._user_operation_log_id;
        }
    }
    
    /// <summary>
    /// The 'UserPersonInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class UserPersonInfo : Entity
    {
        
        private string _address;
        
        private DateTime _birthdate;
        
        private string _blood_type;
        
        private int _class_type_id;
        
        private int _class_type_id_on_ground;
        
        private string _class_type_name;
        
        private string _class_type_name_on_ground;
        
        private int _depart_id;
        
        private string _depart_name;
        
        private string _depart_sn;
        
        private string _email;
        
        private string _id_card;
        
        private byte[] _image;
        
        private string _img_type;
        
        private int _index;
        
        private string _iris_register;
        
        private string _iris_status;
        
        private bool _isSelected;
        
        private string _memo;
        
        private string _parent_depart_name;
        
        private int _person_id;
        
        private string _person_name;
        
        private string _phone;
        
        private int _principal_id;
        
        private string _principal_name;
        
        private string _sex;
        
        private string _work_sn;
        
        private int _work_type_id;
        
        private string _work_type_name;
        
        private DateTime _workday;
        
        private string _zipcode;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnaddressChanging(string value);
        partial void OnaddressChanged();
        partial void OnbirthdateChanging(DateTime value);
        partial void OnbirthdateChanged();
        partial void Onblood_typeChanging(string value);
        partial void Onblood_typeChanged();
        partial void Onclass_type_idChanging(int value);
        partial void Onclass_type_idChanged();
        partial void Onclass_type_id_on_groundChanging(int value);
        partial void Onclass_type_id_on_groundChanged();
        partial void Onclass_type_nameChanging(string value);
        partial void Onclass_type_nameChanged();
        partial void Onclass_type_name_on_groundChanging(string value);
        partial void Onclass_type_name_on_groundChanged();
        partial void Ondepart_idChanging(int value);
        partial void Ondepart_idChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Ondepart_snChanging(string value);
        partial void Ondepart_snChanged();
        partial void OnemailChanging(string value);
        partial void OnemailChanged();
        partial void Onid_cardChanging(string value);
        partial void Onid_cardChanged();
        partial void OnimageChanging(byte[] value);
        partial void OnimageChanged();
        partial void Onimg_typeChanging(string value);
        partial void Onimg_typeChanged();
        partial void OnindexChanging(int value);
        partial void OnindexChanged();
        partial void Oniris_registerChanging(string value);
        partial void Oniris_registerChanged();
        partial void Oniris_statusChanging(string value);
        partial void Oniris_statusChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onparent_depart_nameChanging(string value);
        partial void Onparent_depart_nameChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();
        partial void Onperson_nameChanging(string value);
        partial void Onperson_nameChanged();
        partial void OnphoneChanging(string value);
        partial void OnphoneChanged();
        partial void Onprincipal_idChanging(int value);
        partial void Onprincipal_idChanged();
        partial void Onprincipal_nameChanging(string value);
        partial void Onprincipal_nameChanged();
        partial void OnsexChanging(string value);
        partial void OnsexChanged();
        partial void Onwork_snChanging(string value);
        partial void Onwork_snChanged();
        partial void Onwork_type_idChanging(int value);
        partial void Onwork_type_idChanged();
        partial void Onwork_type_nameChanging(string value);
        partial void Onwork_type_nameChanged();
        partial void OnworkdayChanging(DateTime value);
        partial void OnworkdayChanged();
        partial void OnzipcodeChanging(string value);
        partial void OnzipcodeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPersonInfo"/> class.
        /// </summary>
        public UserPersonInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'address' value.
        /// </summary>
        [DataMember()]
        public string address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnaddressChanging(value);
                    this.RaiseDataMemberChanging("address");
                    this.ValidateProperty("address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("address");
                    this.OnaddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'birthdate' value.
        /// </summary>
        [DataMember()]
        public DateTime birthdate
        {
            get
            {
                return this._birthdate;
            }
            set
            {
                if ((this._birthdate != value))
                {
                    this.OnbirthdateChanging(value);
                    this.RaiseDataMemberChanging("birthdate");
                    this.ValidateProperty("birthdate", value);
                    this._birthdate = value;
                    this.RaiseDataMemberChanged("birthdate");
                    this.OnbirthdateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'blood_type' value.
        /// </summary>
        [DataMember()]
        public string blood_type
        {
            get
            {
                return this._blood_type;
            }
            set
            {
                if ((this._blood_type != value))
                {
                    this.Onblood_typeChanging(value);
                    this.RaiseDataMemberChanging("blood_type");
                    this.ValidateProperty("blood_type", value);
                    this._blood_type = value;
                    this.RaiseDataMemberChanged("blood_type");
                    this.Onblood_typeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_id' value.
        /// </summary>
        [DataMember()]
        public int class_type_id
        {
            get
            {
                return this._class_type_id;
            }
            set
            {
                if ((this._class_type_id != value))
                {
                    this.Onclass_type_idChanging(value);
                    this.RaiseDataMemberChanging("class_type_id");
                    this.ValidateProperty("class_type_id", value);
                    this._class_type_id = value;
                    this.RaiseDataMemberChanged("class_type_id");
                    this.Onclass_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_id_on_ground' value.
        /// </summary>
        [DataMember()]
        public int class_type_id_on_ground
        {
            get
            {
                return this._class_type_id_on_ground;
            }
            set
            {
                if ((this._class_type_id_on_ground != value))
                {
                    this.Onclass_type_id_on_groundChanging(value);
                    this.RaiseDataMemberChanging("class_type_id_on_ground");
                    this.ValidateProperty("class_type_id_on_ground", value);
                    this._class_type_id_on_ground = value;
                    this.RaiseDataMemberChanged("class_type_id_on_ground");
                    this.Onclass_type_id_on_groundChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_name' value.
        /// </summary>
        [DataMember()]
        public string class_type_name
        {
            get
            {
                return this._class_type_name;
            }
            set
            {
                if ((this._class_type_name != value))
                {
                    this.Onclass_type_nameChanging(value);
                    this.RaiseDataMemberChanging("class_type_name");
                    this.ValidateProperty("class_type_name", value);
                    this._class_type_name = value;
                    this.RaiseDataMemberChanged("class_type_name");
                    this.Onclass_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_name_on_ground' value.
        /// </summary>
        [DataMember()]
        public string class_type_name_on_ground
        {
            get
            {
                return this._class_type_name_on_ground;
            }
            set
            {
                if ((this._class_type_name_on_ground != value))
                {
                    this.Onclass_type_name_on_groundChanging(value);
                    this.RaiseDataMemberChanging("class_type_name_on_ground");
                    this.ValidateProperty("class_type_name_on_ground", value);
                    this._class_type_name_on_ground = value;
                    this.RaiseDataMemberChanged("class_type_name_on_ground");
                    this.Onclass_type_name_on_groundChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_id' value.
        /// </summary>
        [DataMember()]
        public int depart_id
        {
            get
            {
                return this._depart_id;
            }
            set
            {
                if ((this._depart_id != value))
                {
                    this.Ondepart_idChanging(value);
                    this.RaiseDataMemberChanging("depart_id");
                    this.ValidateProperty("depart_id", value);
                    this._depart_id = value;
                    this.RaiseDataMemberChanged("depart_id");
                    this.Ondepart_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_sn' value.
        /// </summary>
        [DataMember()]
        public string depart_sn
        {
            get
            {
                return this._depart_sn;
            }
            set
            {
                if ((this._depart_sn != value))
                {
                    this.Ondepart_snChanging(value);
                    this.RaiseDataMemberChanging("depart_sn");
                    this.ValidateProperty("depart_sn", value);
                    this._depart_sn = value;
                    this.RaiseDataMemberChanged("depart_sn");
                    this.Ondepart_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'email' value.
        /// </summary>
        [DataMember()]
        public string email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnemailChanging(value);
                    this.RaiseDataMemberChanging("email");
                    this.ValidateProperty("email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("email");
                    this.OnemailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'id_card' value.
        /// </summary>
        [DataMember()]
        public string id_card
        {
            get
            {
                return this._id_card;
            }
            set
            {
                if ((this._id_card != value))
                {
                    this.Onid_cardChanging(value);
                    this.RaiseDataMemberChanging("id_card");
                    this.ValidateProperty("id_card", value);
                    this._id_card = value;
                    this.RaiseDataMemberChanged("id_card");
                    this.Onid_cardChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'image' value.
        /// </summary>
        [DataMember()]
        public byte[] image
        {
            get
            {
                return this._image;
            }
            set
            {
                if ((this._image != value))
                {
                    this.OnimageChanging(value);
                    this.RaiseDataMemberChanging("image");
                    this.ValidateProperty("image", value);
                    this._image = value;
                    this.RaiseDataMemberChanged("image");
                    this.OnimageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'img_type' value.
        /// </summary>
        [DataMember()]
        public string img_type
        {
            get
            {
                return this._img_type;
            }
            set
            {
                if ((this._img_type != value))
                {
                    this.Onimg_typeChanging(value);
                    this.RaiseDataMemberChanging("img_type");
                    this.ValidateProperty("img_type", value);
                    this._img_type = value;
                    this.RaiseDataMemberChanged("img_type");
                    this.Onimg_typeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'index' value.
        /// </summary>
        [DataMember()]
        public int index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnindexChanging(value);
                    this.RaiseDataMemberChanging("index");
                    this.ValidateProperty("index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("index");
                    this.OnindexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'iris_register' value.
        /// </summary>
        [DataMember()]
        public string iris_register
        {
            get
            {
                return this._iris_register;
            }
            set
            {
                if ((this._iris_register != value))
                {
                    this.Oniris_registerChanging(value);
                    this.RaiseDataMemberChanging("iris_register");
                    this.ValidateProperty("iris_register", value);
                    this._iris_register = value;
                    this.RaiseDataMemberChanged("iris_register");
                    this.Oniris_registerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'iris_status' value.
        /// </summary>
        [DataMember()]
        public string iris_status
        {
            get
            {
                return this._iris_status;
            }
            set
            {
                if ((this._iris_status != value))
                {
                    this.Oniris_statusChanging(value);
                    this.RaiseDataMemberChanging("iris_status");
                    this.ValidateProperty("iris_status", value);
                    this._iris_status = value;
                    this.RaiseDataMemberChanged("iris_status");
                    this.Oniris_statusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'parent_depart_name' value.
        /// </summary>
        [DataMember()]
        public string parent_depart_name
        {
            get
            {
                return this._parent_depart_name;
            }
            set
            {
                if ((this._parent_depart_name != value))
                {
                    this.Onparent_depart_nameChanging(value);
                    this.RaiseDataMemberChanging("parent_depart_name");
                    this.ValidateProperty("parent_depart_name", value);
                    this._parent_depart_name = value;
                    this.RaiseDataMemberChanged("parent_depart_name");
                    this.Onparent_depart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaisePropertyChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_name' value.
        /// </summary>
        [DataMember()]
        public string person_name
        {
            get
            {
                return this._person_name;
            }
            set
            {
                if ((this._person_name != value))
                {
                    this.Onperson_nameChanging(value);
                    this.RaiseDataMemberChanging("person_name");
                    this.ValidateProperty("person_name", value);
                    this._person_name = value;
                    this.RaiseDataMemberChanged("person_name");
                    this.Onperson_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'phone' value.
        /// </summary>
        [DataMember()]
        public string phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnphoneChanging(value);
                    this.RaiseDataMemberChanging("phone");
                    this.ValidateProperty("phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("phone");
                    this.OnphoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'principal_id' value.
        /// </summary>
        [DataMember()]
        public int principal_id
        {
            get
            {
                return this._principal_id;
            }
            set
            {
                if ((this._principal_id != value))
                {
                    this.Onprincipal_idChanging(value);
                    this.RaiseDataMemberChanging("principal_id");
                    this.ValidateProperty("principal_id", value);
                    this._principal_id = value;
                    this.RaiseDataMemberChanged("principal_id");
                    this.Onprincipal_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'principal_name' value.
        /// </summary>
        [DataMember()]
        public string principal_name
        {
            get
            {
                return this._principal_name;
            }
            set
            {
                if ((this._principal_name != value))
                {
                    this.Onprincipal_nameChanging(value);
                    this.RaiseDataMemberChanging("principal_name");
                    this.ValidateProperty("principal_name", value);
                    this._principal_name = value;
                    this.RaiseDataMemberChanged("principal_name");
                    this.Onprincipal_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sex' value.
        /// </summary>
        [DataMember()]
        public string sex
        {
            get
            {
                return this._sex;
            }
            set
            {
                if ((this._sex != value))
                {
                    this.OnsexChanging(value);
                    this.RaiseDataMemberChanging("sex");
                    this.ValidateProperty("sex", value);
                    this._sex = value;
                    this.RaiseDataMemberChanged("sex");
                    this.OnsexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_sn' value.
        /// </summary>
        [DataMember()]
        public string work_sn
        {
            get
            {
                return this._work_sn;
            }
            set
            {
                if ((this._work_sn != value))
                {
                    this.Onwork_snChanging(value);
                    this.RaiseDataMemberChanging("work_sn");
                    this.ValidateProperty("work_sn", value);
                    this._work_sn = value;
                    this.RaiseDataMemberChanged("work_sn");
                    this.Onwork_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_type_id' value.
        /// </summary>
        [DataMember()]
        public int work_type_id
        {
            get
            {
                return this._work_type_id;
            }
            set
            {
                if ((this._work_type_id != value))
                {
                    this.Onwork_type_idChanging(value);
                    this.RaiseDataMemberChanging("work_type_id");
                    this.ValidateProperty("work_type_id", value);
                    this._work_type_id = value;
                    this.RaiseDataMemberChanged("work_type_id");
                    this.Onwork_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_type_name' value.
        /// </summary>
        [DataMember()]
        public string work_type_name
        {
            get
            {
                return this._work_type_name;
            }
            set
            {
                if ((this._work_type_name != value))
                {
                    this.Onwork_type_nameChanging(value);
                    this.RaiseDataMemberChanging("work_type_name");
                    this.ValidateProperty("work_type_name", value);
                    this._work_type_name = value;
                    this.RaiseDataMemberChanged("work_type_name");
                    this.Onwork_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'workday' value.
        /// </summary>
        [DataMember()]
        public DateTime workday
        {
            get
            {
                return this._workday;
            }
            set
            {
                if ((this._workday != value))
                {
                    this.OnworkdayChanging(value);
                    this.RaiseDataMemberChanging("workday");
                    this.ValidateProperty("workday", value);
                    this._workday = value;
                    this.RaiseDataMemberChanged("workday");
                    this.OnworkdayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'zipcode' value.
        /// </summary>
        [DataMember()]
        public string zipcode
        {
            get
            {
                return this._zipcode;
            }
            set
            {
                if ((this._zipcode != value))
                {
                    this.OnzipcodeChanging(value);
                    this.RaiseDataMemberChanging("zipcode");
                    this.ValidateProperty("zipcode", value);
                    this._zipcode = value;
                    this.RaiseDataMemberChanged("zipcode");
                    this.OnzipcodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._person_id;
        }
    }
    
    /// <summary>
    /// The 'UserPersonRecogLog' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class UserPersonRecogLog : Entity
    {
        
        private string _at_position;
        
        private string _attend_state;
        
        private string _attend_state_color;
        
        private string _class_type_name;
        
        private int _dayType;
        
        private string _depart_name;
        
        private string _dev_type;
        
        private int _dev_type_value;
        
        private string _device_sn;
        
        private bool _isSelected;
        
        private string _memo;
        
        private string _operator_name;
        
        private int _person_id;
        
        private string _person_name;
        
        private int _person_recog_id;
        
        private string _proc_mark;
        
        private DateTime _recog_time;
        
        private string _recog_type;
        
        private string _recog_type_color;
        
        private string _work_sn;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onat_positionChanging(string value);
        partial void Onat_positionChanged();
        partial void Onattend_stateChanging(string value);
        partial void Onattend_stateChanged();
        partial void Onattend_state_colorChanging(string value);
        partial void Onattend_state_colorChanged();
        partial void Onclass_type_nameChanging(string value);
        partial void Onclass_type_nameChanged();
        partial void OnDayTypeChanging(int value);
        partial void OnDayTypeChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Ondev_typeChanging(string value);
        partial void Ondev_typeChanged();
        partial void Ondev_type_valueChanging(int value);
        partial void Ondev_type_valueChanged();
        partial void Ondevice_snChanging(string value);
        partial void Ondevice_snChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onoperator_nameChanging(string value);
        partial void Onoperator_nameChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();
        partial void Onperson_nameChanging(string value);
        partial void Onperson_nameChanged();
        partial void Onperson_recog_idChanging(int value);
        partial void Onperson_recog_idChanged();
        partial void Onproc_markChanging(string value);
        partial void Onproc_markChanged();
        partial void Onrecog_timeChanging(DateTime value);
        partial void Onrecog_timeChanged();
        partial void Onrecog_typeChanging(string value);
        partial void Onrecog_typeChanged();
        partial void Onrecog_type_colorChanging(string value);
        partial void Onrecog_type_colorChanged();
        partial void Onwork_snChanging(string value);
        partial void Onwork_snChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPersonRecogLog"/> class.
        /// </summary>
        public UserPersonRecogLog()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'at_position' value.
        /// </summary>
        [DataMember()]
        public string at_position
        {
            get
            {
                return this._at_position;
            }
            set
            {
                if ((this._at_position != value))
                {
                    this.Onat_positionChanging(value);
                    this.RaiseDataMemberChanging("at_position");
                    this.ValidateProperty("at_position", value);
                    this._at_position = value;
                    this.RaiseDataMemberChanged("at_position");
                    this.Onat_positionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_state' value.
        /// </summary>
        [DataMember()]
        public string attend_state
        {
            get
            {
                return this._attend_state;
            }
            set
            {
                if ((this._attend_state != value))
                {
                    this.Onattend_stateChanging(value);
                    this.RaiseDataMemberChanging("attend_state");
                    this.ValidateProperty("attend_state", value);
                    this._attend_state = value;
                    this.RaiseDataMemberChanged("attend_state");
                    this.Onattend_stateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_state_color' value.
        /// </summary>
        [DataMember()]
        public string attend_state_color
        {
            get
            {
                return this._attend_state_color;
            }
            set
            {
                if ((this._attend_state_color != value))
                {
                    this.Onattend_state_colorChanging(value);
                    this.RaiseDataMemberChanging("attend_state_color");
                    this.ValidateProperty("attend_state_color", value);
                    this._attend_state_color = value;
                    this.RaiseDataMemberChanged("attend_state_color");
                    this.Onattend_state_colorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_name' value.
        /// </summary>
        [DataMember()]
        public string class_type_name
        {
            get
            {
                return this._class_type_name;
            }
            set
            {
                if ((this._class_type_name != value))
                {
                    this.Onclass_type_nameChanging(value);
                    this.RaiseDataMemberChanging("class_type_name");
                    this.ValidateProperty("class_type_name", value);
                    this._class_type_name = value;
                    this.RaiseDataMemberChanged("class_type_name");
                    this.Onclass_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayType' value.
        /// </summary>
        [DataMember()]
        public int DayType
        {
            get
            {
                return this._dayType;
            }
            set
            {
                if ((this._dayType != value))
                {
                    this.OnDayTypeChanging(value);
                    this.RaiseDataMemberChanging("DayType");
                    this.ValidateProperty("DayType", value);
                    this._dayType = value;
                    this.RaiseDataMemberChanged("DayType");
                    this.OnDayTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'dev_type' value.
        /// </summary>
        [DataMember()]
        public string dev_type
        {
            get
            {
                return this._dev_type;
            }
            set
            {
                if ((this._dev_type != value))
                {
                    this.Ondev_typeChanging(value);
                    this.RaiseDataMemberChanging("dev_type");
                    this.ValidateProperty("dev_type", value);
                    this._dev_type = value;
                    this.RaiseDataMemberChanged("dev_type");
                    this.Ondev_typeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'dev_type_value' value.
        /// </summary>
        [DataMember()]
        public int dev_type_value
        {
            get
            {
                return this._dev_type_value;
            }
            set
            {
                if ((this._dev_type_value != value))
                {
                    this.Ondev_type_valueChanging(value);
                    this.RaiseDataMemberChanging("dev_type_value");
                    this.ValidateProperty("dev_type_value", value);
                    this._dev_type_value = value;
                    this.RaiseDataMemberChanged("dev_type_value");
                    this.Ondev_type_valueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'device_sn' value.
        /// </summary>
        [DataMember()]
        public string device_sn
        {
            get
            {
                return this._device_sn;
            }
            set
            {
                if ((this._device_sn != value))
                {
                    this.Ondevice_snChanging(value);
                    this.RaiseDataMemberChanging("device_sn");
                    this.ValidateProperty("device_sn", value);
                    this._device_sn = value;
                    this.RaiseDataMemberChanged("device_sn");
                    this.Ondevice_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'operator_name' value.
        /// </summary>
        [DataMember()]
        public string operator_name
        {
            get
            {
                return this._operator_name;
            }
            set
            {
                if ((this._operator_name != value))
                {
                    this.Onoperator_nameChanging(value);
                    this.RaiseDataMemberChanging("operator_name");
                    this.ValidateProperty("operator_name", value);
                    this._operator_name = value;
                    this.RaiseDataMemberChanged("operator_name");
                    this.Onoperator_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.RaiseDataMemberChanging("person_id");
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaiseDataMemberChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_name' value.
        /// </summary>
        [DataMember()]
        public string person_name
        {
            get
            {
                return this._person_name;
            }
            set
            {
                if ((this._person_name != value))
                {
                    this.Onperson_nameChanging(value);
                    this.RaiseDataMemberChanging("person_name");
                    this.ValidateProperty("person_name", value);
                    this._person_name = value;
                    this.RaiseDataMemberChanged("person_name");
                    this.Onperson_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_recog_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int person_recog_id
        {
            get
            {
                return this._person_recog_id;
            }
            set
            {
                if ((this._person_recog_id != value))
                {
                    this.Onperson_recog_idChanging(value);
                    this.ValidateProperty("person_recog_id", value);
                    this._person_recog_id = value;
                    this.RaisePropertyChanged("person_recog_id");
                    this.Onperson_recog_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'proc_mark' value.
        /// </summary>
        [DataMember()]
        public string proc_mark
        {
            get
            {
                return this._proc_mark;
            }
            set
            {
                if ((this._proc_mark != value))
                {
                    this.Onproc_markChanging(value);
                    this.RaiseDataMemberChanging("proc_mark");
                    this.ValidateProperty("proc_mark", value);
                    this._proc_mark = value;
                    this.RaiseDataMemberChanged("proc_mark");
                    this.Onproc_markChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'recog_time' value.
        /// </summary>
        [DataMember()]
        public DateTime recog_time
        {
            get
            {
                return this._recog_time;
            }
            set
            {
                if ((this._recog_time != value))
                {
                    this.Onrecog_timeChanging(value);
                    this.RaiseDataMemberChanging("recog_time");
                    this.ValidateProperty("recog_time", value);
                    this._recog_time = value;
                    this.RaiseDataMemberChanged("recog_time");
                    this.Onrecog_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'recog_type' value.
        /// </summary>
        [DataMember()]
        public string recog_type
        {
            get
            {
                return this._recog_type;
            }
            set
            {
                if ((this._recog_type != value))
                {
                    this.Onrecog_typeChanging(value);
                    this.RaiseDataMemberChanging("recog_type");
                    this.ValidateProperty("recog_type", value);
                    this._recog_type = value;
                    this.RaiseDataMemberChanged("recog_type");
                    this.Onrecog_typeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'recog_type_color' value.
        /// </summary>
        [DataMember()]
        public string recog_type_color
        {
            get
            {
                return this._recog_type_color;
            }
            set
            {
                if ((this._recog_type_color != value))
                {
                    this.Onrecog_type_colorChanging(value);
                    this.RaiseDataMemberChanging("recog_type_color");
                    this.ValidateProperty("recog_type_color", value);
                    this._recog_type_color = value;
                    this.RaiseDataMemberChanged("recog_type_color");
                    this.Onrecog_type_colorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_sn' value.
        /// </summary>
        [DataMember()]
        public string work_sn
        {
            get
            {
                return this._work_sn;
            }
            set
            {
                if ((this._work_sn != value))
                {
                    this.Onwork_snChanging(value);
                    this.RaiseDataMemberChanging("work_sn");
                    this.ValidateProperty("work_sn", value);
                    this._work_sn = value;
                    this.RaiseDataMemberChanged("work_sn");
                    this.Onwork_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._person_recog_id;
        }
    }
    
    /// <summary>
    /// The 'UserPersonSimple' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class UserPersonSimple : Entity
    {
        
        private int _depart_id;
        
        private string _depart_name;
        
        private bool _is_select;
        
        private int _person_id;
        
        private string _person_name;
        
        private string _work_sn;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Ondepart_idChanging(int value);
        partial void Ondepart_idChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Onis_selectChanging(bool value);
        partial void Onis_selectChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();
        partial void Onperson_nameChanging(string value);
        partial void Onperson_nameChanged();
        partial void Onwork_snChanging(string value);
        partial void Onwork_snChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPersonSimple"/> class.
        /// </summary>
        public UserPersonSimple()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'depart_id' value.
        /// </summary>
        [DataMember()]
        public int depart_id
        {
            get
            {
                return this._depart_id;
            }
            set
            {
                if ((this._depart_id != value))
                {
                    this.Ondepart_idChanging(value);
                    this.RaiseDataMemberChanging("depart_id");
                    this.ValidateProperty("depart_id", value);
                    this._depart_id = value;
                    this.RaiseDataMemberChanged("depart_id");
                    this.Ondepart_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'is_select' value.
        /// </summary>
        [DataMember()]
        public bool is_select
        {
            get
            {
                return this._is_select;
            }
            set
            {
                if ((this._is_select != value))
                {
                    this.Onis_selectChanging(value);
                    this.RaiseDataMemberChanging("is_select");
                    this.ValidateProperty("is_select", value);
                    this._is_select = value;
                    this.RaiseDataMemberChanged("is_select");
                    this.Onis_selectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaisePropertyChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_name' value.
        /// </summary>
        [DataMember()]
        public string person_name
        {
            get
            {
                return this._person_name;
            }
            set
            {
                if ((this._person_name != value))
                {
                    this.Onperson_nameChanging(value);
                    this.RaiseDataMemberChanging("person_name");
                    this.ValidateProperty("person_name", value);
                    this._person_name = value;
                    this.RaiseDataMemberChanged("person_name");
                    this.Onperson_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_sn' value.
        /// </summary>
        [DataMember()]
        public string work_sn
        {
            get
            {
                return this._work_sn;
            }
            set
            {
                if ((this._work_sn != value))
                {
                    this.Onwork_snChanging(value);
                    this.RaiseDataMemberChanging("work_sn");
                    this.ValidateProperty("work_sn", value);
                    this._work_sn = value;
                    this.RaiseDataMemberChanged("work_sn");
                    this.Onwork_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._person_id;
        }
    }
    
    /// <summary>
    /// The 'work_cnt_policy' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class work_cnt_policy : Entity
    {
        
        private int _accuracy;
        
        private int _gt;
        
        private int _lt;
        
        private int _max_work_cnt;
        
        private int _min_work_cnt;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnaccuracyChanging(int value);
        partial void OnaccuracyChanged();
        partial void OngtChanging(int value);
        partial void OngtChanged();
        partial void OnltChanging(int value);
        partial void OnltChanged();
        partial void Onmax_work_cntChanging(int value);
        partial void Onmax_work_cntChanged();
        partial void Onmin_work_cntChanging(int value);
        partial void Onmin_work_cntChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="work_cnt_policy"/> class.
        /// </summary>
        public work_cnt_policy()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'accuracy' value.
        /// </summary>
        [DataMember()]
        public int accuracy
        {
            get
            {
                return this._accuracy;
            }
            set
            {
                if ((this._accuracy != value))
                {
                    this.OnaccuracyChanging(value);
                    this.RaiseDataMemberChanging("accuracy");
                    this.ValidateProperty("accuracy", value);
                    this._accuracy = value;
                    this.RaiseDataMemberChanged("accuracy");
                    this.OnaccuracyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'gt' value.
        /// </summary>
        [DataMember()]
        public int gt
        {
            get
            {
                return this._gt;
            }
            set
            {
                if ((this._gt != value))
                {
                    this.OngtChanging(value);
                    this.RaiseDataMemberChanging("gt");
                    this.ValidateProperty("gt", value);
                    this._gt = value;
                    this.RaiseDataMemberChanged("gt");
                    this.OngtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'lt' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int lt
        {
            get
            {
                return this._lt;
            }
            set
            {
                if ((this._lt != value))
                {
                    this.OnltChanging(value);
                    this.ValidateProperty("lt", value);
                    this._lt = value;
                    this.RaisePropertyChanged("lt");
                    this.OnltChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'max_work_cnt' value.
        /// </summary>
        [DataMember()]
        public int max_work_cnt
        {
            get
            {
                return this._max_work_cnt;
            }
            set
            {
                if ((this._max_work_cnt != value))
                {
                    this.Onmax_work_cntChanging(value);
                    this.RaiseDataMemberChanging("max_work_cnt");
                    this.ValidateProperty("max_work_cnt", value);
                    this._max_work_cnt = value;
                    this.RaiseDataMemberChanged("max_work_cnt");
                    this.Onmax_work_cntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'min_work_cnt' value.
        /// </summary>
        [DataMember()]
        public int min_work_cnt
        {
            get
            {
                return this._min_work_cnt;
            }
            set
            {
                if ((this._min_work_cnt != value))
                {
                    this.Onmin_work_cntChanging(value);
                    this.RaiseDataMemberChanging("min_work_cnt");
                    this.ValidateProperty("min_work_cnt", value);
                    this._min_work_cnt = value;
                    this.RaiseDataMemberChanged("min_work_cnt");
                    this.Onmin_work_cntChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._lt;
        }
    }
    
    /// <summary>
    /// The 'WorkTypeInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class WorkTypeInfo : Entity
    {
        
        private bool _isSelected;
        
        private string _memo;
        
        private int _work_type_id;
        
        private string _work_type_name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onwork_type_idChanging(int value);
        partial void Onwork_type_idChanged();
        partial void Onwork_type_nameChanging(string value);
        partial void Onwork_type_nameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkTypeInfo"/> class.
        /// </summary>
        public WorkTypeInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_type_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int work_type_id
        {
            get
            {
                return this._work_type_id;
            }
            set
            {
                if ((this._work_type_id != value))
                {
                    this.Onwork_type_idChanging(value);
                    this.ValidateProperty("work_type_id", value);
                    this._work_type_id = value;
                    this.RaisePropertyChanged("work_type_id");
                    this.Onwork_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_type_name' value.
        /// </summary>
        [DataMember()]
        public string work_type_name
        {
            get
            {
                return this._work_type_name;
            }
            set
            {
                if ((this._work_type_name != value))
                {
                    this.Onwork_type_nameChanging(value);
                    this.RaiseDataMemberChanging("work_type_name");
                    this.ValidateProperty("work_type_name", value);
                    this._work_type_name = value;
                    this.RaiseDataMemberChanged("work_type_name");
                    this.Onwork_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._work_type_id;
        }
    }
    
    /// <summary>
    /// The 'XlsUserAttendRec' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Irisking.Web.DataModel")]
    public sealed partial class XlsUserAttendRec : Entity
    {
        
        private DateTime _attend_day;
        
        private int _attend_record_id;
        
        private int _attend_times;
        
        private string _class_order_name;
        
        private string _class_type_name;
        
        private string _depart_name;
        
        private int _person_id;
        
        private string _person_name;
        
        private string _work_sn;
        
        private int _work_time;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onattend_dayChanging(DateTime value);
        partial void Onattend_dayChanged();
        partial void Onattend_record_idChanging(int value);
        partial void Onattend_record_idChanged();
        partial void Onattend_timesChanging(int value);
        partial void Onattend_timesChanged();
        partial void Onclass_order_nameChanging(string value);
        partial void Onclass_order_nameChanged();
        partial void Onclass_type_nameChanging(string value);
        partial void Onclass_type_nameChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();
        partial void Onperson_nameChanging(string value);
        partial void Onperson_nameChanged();
        partial void Onwork_snChanging(string value);
        partial void Onwork_snChanged();
        partial void Onwork_timeChanging(int value);
        partial void Onwork_timeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="XlsUserAttendRec"/> class.
        /// </summary>
        public XlsUserAttendRec()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'attend_day' value.
        /// </summary>
        [DataMember()]
        public DateTime attend_day
        {
            get
            {
                return this._attend_day;
            }
            set
            {
                if ((this._attend_day != value))
                {
                    this.Onattend_dayChanging(value);
                    this.RaiseDataMemberChanging("attend_day");
                    this.ValidateProperty("attend_day", value);
                    this._attend_day = value;
                    this.RaiseDataMemberChanged("attend_day");
                    this.Onattend_dayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_record_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int attend_record_id
        {
            get
            {
                return this._attend_record_id;
            }
            set
            {
                if ((this._attend_record_id != value))
                {
                    this.Onattend_record_idChanging(value);
                    this.ValidateProperty("attend_record_id", value);
                    this._attend_record_id = value;
                    this.RaisePropertyChanged("attend_record_id");
                    this.Onattend_record_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_times' value.
        /// </summary>
        [DataMember()]
        public int attend_times
        {
            get
            {
                return this._attend_times;
            }
            set
            {
                if ((this._attend_times != value))
                {
                    this.Onattend_timesChanging(value);
                    this.RaiseDataMemberChanging("attend_times");
                    this.ValidateProperty("attend_times", value);
                    this._attend_times = value;
                    this.RaiseDataMemberChanged("attend_times");
                    this.Onattend_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_order_name' value.
        /// </summary>
        [DataMember()]
        public string class_order_name
        {
            get
            {
                return this._class_order_name;
            }
            set
            {
                if ((this._class_order_name != value))
                {
                    this.Onclass_order_nameChanging(value);
                    this.RaiseDataMemberChanging("class_order_name");
                    this.ValidateProperty("class_order_name", value);
                    this._class_order_name = value;
                    this.RaiseDataMemberChanged("class_order_name");
                    this.Onclass_order_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_name' value.
        /// </summary>
        [DataMember()]
        public string class_type_name
        {
            get
            {
                return this._class_type_name;
            }
            set
            {
                if ((this._class_type_name != value))
                {
                    this.Onclass_type_nameChanging(value);
                    this.RaiseDataMemberChanging("class_type_name");
                    this.ValidateProperty("class_type_name", value);
                    this._class_type_name = value;
                    this.RaiseDataMemberChanged("class_type_name");
                    this.Onclass_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.RaiseDataMemberChanging("person_id");
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaiseDataMemberChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_name' value.
        /// </summary>
        [DataMember()]
        public string person_name
        {
            get
            {
                return this._person_name;
            }
            set
            {
                if ((this._person_name != value))
                {
                    this.Onperson_nameChanging(value);
                    this.RaiseDataMemberChanging("person_name");
                    this.ValidateProperty("person_name", value);
                    this._person_name = value;
                    this.RaiseDataMemberChanged("person_name");
                    this.Onperson_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_sn' value.
        /// </summary>
        [DataMember()]
        public string work_sn
        {
            get
            {
                return this._work_sn;
            }
            set
            {
                if ((this._work_sn != value))
                {
                    this.Onwork_snChanging(value);
                    this.RaiseDataMemberChanging("work_sn");
                    this.ValidateProperty("work_sn", value);
                    this._work_sn = value;
                    this.RaiseDataMemberChanged("work_sn");
                    this.Onwork_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_time' value.
        /// </summary>
        [DataMember()]
        public int work_time
        {
            get
            {
                return this._work_time;
            }
            set
            {
                if ((this._work_time != value))
                {
                    this.Onwork_timeChanging(value);
                    this.RaiseDataMemberChanging("work_time");
                    this.ValidateProperty("work_time", value);
                    this._work_time = value;
                    this.RaiseDataMemberChanged("work_time");
                    this.Onwork_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._attend_record_id;
        }
    }
}
namespace IriskingAttend
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace IriskingAttend.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using Irisking.DataBaseAccess;
    using Irisking.Web.DataModel;
    using IriskingAttend.Web.DataModel;
    using IriskingAttend.Web.WuHuShan;
    using IriskingAttend.Web.ZhouYuanShan;
    
    
    /// <summary>
    /// The 'AttendDepartInWellDetail' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class AttendDepartInWellDetail : Entity
    {
        
        private string _departName;
        
        private string _inDeviceSn;
        
        private int _index;
        
        private DateTime _inWellTime;
        
        private string _name;
        
        private string _outDeviceSn;
        
        private DateTime _outWellTime;
        
        private string _workSn;
        
        private string _workTime;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnInDeviceSnChanging(string value);
        partial void OnInDeviceSnChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnInWellTimeChanging(DateTime value);
        partial void OnInWellTimeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOutDeviceSnChanging(string value);
        partial void OnOutDeviceSnChanged();
        partial void OnOutWellTimeChanging(DateTime value);
        partial void OnOutWellTimeChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();
        partial void OnWorkTimeChanging(string value);
        partial void OnWorkTimeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AttendDepartInWellDetail"/> class.
        /// </summary>
        public AttendDepartInWellDetail()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InDeviceSn' value.
        /// </summary>
        [DataMember()]
        public string InDeviceSn
        {
            get
            {
                return this._inDeviceSn;
            }
            set
            {
                if ((this._inDeviceSn != value))
                {
                    this.OnInDeviceSnChanging(value);
                    this.RaiseDataMemberChanging("InDeviceSn");
                    this.ValidateProperty("InDeviceSn", value);
                    this._inDeviceSn = value;
                    this.RaiseDataMemberChanged("InDeviceSn");
                    this.OnInDeviceSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellTime' value.
        /// </summary>
        [DataMember()]
        public DateTime InWellTime
        {
            get
            {
                return this._inWellTime;
            }
            set
            {
                if ((this._inWellTime != value))
                {
                    this.OnInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("InWellTime");
                    this.ValidateProperty("InWellTime", value);
                    this._inWellTime = value;
                    this.RaiseDataMemberChanged("InWellTime");
                    this.OnInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutDeviceSn' value.
        /// </summary>
        [DataMember()]
        public string OutDeviceSn
        {
            get
            {
                return this._outDeviceSn;
            }
            set
            {
                if ((this._outDeviceSn != value))
                {
                    this.OnOutDeviceSnChanging(value);
                    this.RaiseDataMemberChanging("OutDeviceSn");
                    this.ValidateProperty("OutDeviceSn", value);
                    this._outDeviceSn = value;
                    this.RaiseDataMemberChanged("OutDeviceSn");
                    this.OnOutDeviceSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutWellTime' value.
        /// </summary>
        [DataMember()]
        public DateTime OutWellTime
        {
            get
            {
                return this._outWellTime;
            }
            set
            {
                if ((this._outWellTime != value))
                {
                    this.OnOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("OutWellTime");
                    this.ValidateProperty("OutWellTime", value);
                    this._outWellTime = value;
                    this.RaiseDataMemberChanged("OutWellTime");
                    this.OnOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkTime' value.
        /// </summary>
        [DataMember()]
        public string WorkTime
        {
            get
            {
                return this._workTime;
            }
            set
            {
                if ((this._workTime != value))
                {
                    this.OnWorkTimeChanging(value);
                    this.RaiseDataMemberChanging("WorkTime");
                    this.ValidateProperty("WorkTime", value);
                    this._workTime = value;
                    this.RaiseDataMemberChanged("WorkTime");
                    this.OnWorkTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'AttendDepartInWellQuery' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class AttendDepartInWellQuery : Entity
    {
        
        private int _departId;
        
        private string _departName;
        
        private int _fourInWellCollect;
        
        private string _index;
        
        private int _middleInWellCollect;
        
        private int _moringInWellCollect;
        
        private int _nightInWellCollect;
        
        private int _oneInWellCollect;
        
        private int _threeInWellCollect;
        
        private int _twoInWellCollect;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDepartIdChanging(int value);
        partial void OnDepartIdChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnFourInWellCollectChanging(int value);
        partial void OnFourInWellCollectChanged();
        partial void OnIndexChanging(string value);
        partial void OnIndexChanged();
        partial void OnMiddleInWellCollectChanging(int value);
        partial void OnMiddleInWellCollectChanged();
        partial void OnMoringInWellCollectChanging(int value);
        partial void OnMoringInWellCollectChanged();
        partial void OnNightInWellCollectChanging(int value);
        partial void OnNightInWellCollectChanged();
        partial void OnOneInWellCollectChanging(int value);
        partial void OnOneInWellCollectChanged();
        partial void OnThreeInWellCollectChanging(int value);
        partial void OnThreeInWellCollectChanged();
        partial void OnTwoInWellCollectChanging(int value);
        partial void OnTwoInWellCollectChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AttendDepartInWellQuery"/> class.
        /// </summary>
        public AttendDepartInWellQuery()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DepartId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int DepartId
        {
            get
            {
                return this._departId;
            }
            set
            {
                if ((this._departId != value))
                {
                    this.OnDepartIdChanging(value);
                    this.ValidateProperty("DepartId", value);
                    this._departId = value;
                    this.RaisePropertyChanged("DepartId");
                    this.OnDepartIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FourInWellCollect' value.
        /// </summary>
        [DataMember()]
        public int FourInWellCollect
        {
            get
            {
                return this._fourInWellCollect;
            }
            set
            {
                if ((this._fourInWellCollect != value))
                {
                    this.OnFourInWellCollectChanging(value);
                    this.RaiseDataMemberChanging("FourInWellCollect");
                    this.ValidateProperty("FourInWellCollect", value);
                    this._fourInWellCollect = value;
                    this.RaiseDataMemberChanged("FourInWellCollect");
                    this.OnFourInWellCollectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        public string Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.RaiseDataMemberChanging("Index");
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MiddleInWellCollect' value.
        /// </summary>
        [DataMember()]
        public int MiddleInWellCollect
        {
            get
            {
                return this._middleInWellCollect;
            }
            set
            {
                if ((this._middleInWellCollect != value))
                {
                    this.OnMiddleInWellCollectChanging(value);
                    this.RaiseDataMemberChanging("MiddleInWellCollect");
                    this.ValidateProperty("MiddleInWellCollect", value);
                    this._middleInWellCollect = value;
                    this.RaiseDataMemberChanged("MiddleInWellCollect");
                    this.OnMiddleInWellCollectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MoringInWellCollect' value.
        /// </summary>
        [DataMember()]
        public int MoringInWellCollect
        {
            get
            {
                return this._moringInWellCollect;
            }
            set
            {
                if ((this._moringInWellCollect != value))
                {
                    this.OnMoringInWellCollectChanging(value);
                    this.RaiseDataMemberChanging("MoringInWellCollect");
                    this.ValidateProperty("MoringInWellCollect", value);
                    this._moringInWellCollect = value;
                    this.RaiseDataMemberChanged("MoringInWellCollect");
                    this.OnMoringInWellCollectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NightInWellCollect' value.
        /// </summary>
        [DataMember()]
        public int NightInWellCollect
        {
            get
            {
                return this._nightInWellCollect;
            }
            set
            {
                if ((this._nightInWellCollect != value))
                {
                    this.OnNightInWellCollectChanging(value);
                    this.RaiseDataMemberChanging("NightInWellCollect");
                    this.ValidateProperty("NightInWellCollect", value);
                    this._nightInWellCollect = value;
                    this.RaiseDataMemberChanged("NightInWellCollect");
                    this.OnNightInWellCollectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OneInWellCollect' value.
        /// </summary>
        [DataMember()]
        public int OneInWellCollect
        {
            get
            {
                return this._oneInWellCollect;
            }
            set
            {
                if ((this._oneInWellCollect != value))
                {
                    this.OnOneInWellCollectChanging(value);
                    this.RaiseDataMemberChanging("OneInWellCollect");
                    this.ValidateProperty("OneInWellCollect", value);
                    this._oneInWellCollect = value;
                    this.RaiseDataMemberChanged("OneInWellCollect");
                    this.OnOneInWellCollectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ThreeInWellCollect' value.
        /// </summary>
        [DataMember()]
        public int ThreeInWellCollect
        {
            get
            {
                return this._threeInWellCollect;
            }
            set
            {
                if ((this._threeInWellCollect != value))
                {
                    this.OnThreeInWellCollectChanging(value);
                    this.RaiseDataMemberChanging("ThreeInWellCollect");
                    this.ValidateProperty("ThreeInWellCollect", value);
                    this._threeInWellCollect = value;
                    this.RaiseDataMemberChanged("ThreeInWellCollect");
                    this.OnThreeInWellCollectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TwoInWellCollect' value.
        /// </summary>
        [DataMember()]
        public int TwoInWellCollect
        {
            get
            {
                return this._twoInWellCollect;
            }
            set
            {
                if ((this._twoInWellCollect != value))
                {
                    this.OnTwoInWellCollectChanging(value);
                    this.RaiseDataMemberChanging("TwoInWellCollect");
                    this.ValidateProperty("TwoInWellCollect", value);
                    this._twoInWellCollect = value;
                    this.RaiseDataMemberChanged("TwoInWellCollect");
                    this.OnTwoInWellCollectChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._departId;
        }
    }
    
    /// <summary>
    /// The 'AttendInComplete' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class AttendInComplete : Entity
    {
        
        private string _departName;
        
        private int _inCompleteCollect;
        
        private string _index;
        
        private int _personId;
        
        private string _personName;
        
        private string _workSn;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnInCompleteCollectChanging(int value);
        partial void OnInCompleteCollectChanged();
        partial void OnIndexChanging(string value);
        partial void OnIndexChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AttendInComplete"/> class.
        /// </summary>
        public AttendInComplete()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InCompleteCollect' value.
        /// </summary>
        [DataMember()]
        public int InCompleteCollect
        {
            get
            {
                return this._inCompleteCollect;
            }
            set
            {
                if ((this._inCompleteCollect != value))
                {
                    this.OnInCompleteCollectChanging(value);
                    this.RaiseDataMemberChanging("InCompleteCollect");
                    this.ValidateProperty("InCompleteCollect", value);
                    this._inCompleteCollect = value;
                    this.RaiseDataMemberChanged("InCompleteCollect");
                    this.OnInCompleteCollectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        public string Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.RaiseDataMemberChanging("Index");
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaisePropertyChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._personId;
        }
    }
    
    /// <summary>
    /// The 'AttendPersonInWellQuery' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class AttendPersonInWellQuery : Entity
    {
        
        private string _departName;
        
        private string _index;
        
        private int _inWellCollect;
        
        private int _personId;
        
        private string _personName;
        
        private string _workSn;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnIndexChanging(string value);
        partial void OnIndexChanged();
        partial void OnInWellCollectChanging(int value);
        partial void OnInWellCollectChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AttendPersonInWellQuery"/> class.
        /// </summary>
        public AttendPersonInWellQuery()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        public string Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.RaiseDataMemberChanging("Index");
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellCollect' value.
        /// </summary>
        [DataMember()]
        public int InWellCollect
        {
            get
            {
                return this._inWellCollect;
            }
            set
            {
                if ((this._inWellCollect != value))
                {
                    this.OnInWellCollectChanging(value);
                    this.RaiseDataMemberChanging("InWellCollect");
                    this.ValidateProperty("InWellCollect", value);
                    this._inWellCollect = value;
                    this.RaiseDataMemberChanged("InWellCollect");
                    this.OnInWellCollectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaisePropertyChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._personId;
        }
    }
    
    /// <summary>
    /// The 'ClassOrderTimes' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class ClassOrderTimes : ComplexObject
    {
        
        private string _classOrderName;
        
        private int _inWellEndTime;
        
        private int _inWellStartTime;
        
        private int _outWellEndTime;
        
        private int _outWellStartTime;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClassOrderNameChanging(string value);
        partial void OnClassOrderNameChanged();
        partial void OnInWellEndTimeChanging(int value);
        partial void OnInWellEndTimeChanged();
        partial void OnInWellStartTimeChanging(int value);
        partial void OnInWellStartTimeChanged();
        partial void OnOutWellEndTimeChanging(int value);
        partial void OnOutWellEndTimeChanged();
        partial void OnOutWellStartTimeChanging(int value);
        partial void OnOutWellStartTimeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassOrderTimes"/> class.
        /// </summary>
        public ClassOrderTimes()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClassOrderName' value.
        /// </summary>
        [DataMember()]
        public string ClassOrderName
        {
            get
            {
                return this._classOrderName;
            }
            set
            {
                if ((this._classOrderName != value))
                {
                    this.OnClassOrderNameChanging(value);
                    this.RaiseDataMemberChanging("ClassOrderName");
                    this.ValidateProperty("ClassOrderName", value);
                    this._classOrderName = value;
                    this.RaiseDataMemberChanged("ClassOrderName");
                    this.OnClassOrderNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellEndTime' value.
        /// </summary>
        [DataMember()]
        public int InWellEndTime
        {
            get
            {
                return this._inWellEndTime;
            }
            set
            {
                if ((this._inWellEndTime != value))
                {
                    this.OnInWellEndTimeChanging(value);
                    this.RaiseDataMemberChanging("InWellEndTime");
                    this.ValidateProperty("InWellEndTime", value);
                    this._inWellEndTime = value;
                    this.RaiseDataMemberChanged("InWellEndTime");
                    this.OnInWellEndTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellStartTime' value.
        /// </summary>
        [DataMember()]
        public int InWellStartTime
        {
            get
            {
                return this._inWellStartTime;
            }
            set
            {
                if ((this._inWellStartTime != value))
                {
                    this.OnInWellStartTimeChanging(value);
                    this.RaiseDataMemberChanging("InWellStartTime");
                    this.ValidateProperty("InWellStartTime", value);
                    this._inWellStartTime = value;
                    this.RaiseDataMemberChanged("InWellStartTime");
                    this.OnInWellStartTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutWellEndTime' value.
        /// </summary>
        [DataMember()]
        public int OutWellEndTime
        {
            get
            {
                return this._outWellEndTime;
            }
            set
            {
                if ((this._outWellEndTime != value))
                {
                    this.OnOutWellEndTimeChanging(value);
                    this.RaiseDataMemberChanging("OutWellEndTime");
                    this.ValidateProperty("OutWellEndTime", value);
                    this._outWellEndTime = value;
                    this.RaiseDataMemberChanged("OutWellEndTime");
                    this.OnOutWellEndTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutWellStartTime' value.
        /// </summary>
        [DataMember()]
        public int OutWellStartTime
        {
            get
            {
                return this._outWellStartTime;
            }
            set
            {
                if ((this._outWellStartTime != value))
                {
                    this.OnOutWellStartTimeChanging(value);
                    this.RaiseDataMemberChanging("OutWellStartTime");
                    this.ValidateProperty("OutWellStartTime", value);
                    this._outWellStartTime = value;
                    this.RaiseDataMemberChanged("OutWellStartTime");
                    this.OnOutWellStartTimeChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'DomainServiceIriskingAttend' DomainService.
    /// </summary>
    public sealed partial class DomainServiceIriskingAttend : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainServiceIriskingAttend"/> class.
        /// </summary>
        public DomainServiceIriskingAttend() : 
                this(new WebDomainClient<IDomainServiceIriskingAttendContract>(new Uri("IriskingAttend-Web-DomainServiceIriskingAttend.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainServiceIriskingAttend"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The DomainServiceIriskingAttend service URI.</param>
        public DomainServiceIriskingAttend(Uri serviceUri) : 
                this(new WebDomainClient<IDomainServiceIriskingAttendContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainServiceIriskingAttend"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public DomainServiceIriskingAttend(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="OptionInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<OptionInfo> OptionInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<OptionInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="AttendRecordInfo_WuhuShan"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<AttendRecordInfo_WuhuShan> AttendRecordInfo_WuhuShans
        {
            get
            {
                return base.EntityContainer.GetEntitySet<AttendRecordInfo_WuhuShan>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DeviceInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<DeviceInfo> DeviceInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DeviceInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FestivalInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<FestivalInfo> FestivalInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FestivalInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="operator_info"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<operator_info> operator_infos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<operator_info>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserPersonInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<UserPersonInfo> UserPersonInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserPersonInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="AttendDepartInWellQuery"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<AttendDepartInWellQuery> AttendDepartInWellQueries
        {
            get
            {
                return base.EntityContainer.GetEntitySet<AttendDepartInWellQuery>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="AttendDepartInWellDetail"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<AttendDepartInWellDetail> AttendDepartInWellDetails
        {
            get
            {
                return base.EntityContainer.GetEntitySet<AttendDepartInWellDetail>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="AttendPersonInWellQuery"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<AttendPersonInWellQuery> AttendPersonInWellQueries
        {
            get
            {
                return base.EntityContainer.GetEntitySet<AttendPersonInWellQuery>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserDepartInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<UserDepartInfo> UserDepartInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserDepartInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserClassOrderInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<UserClassOrderInfo> UserClassOrderInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserClassOrderInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserClassOrderJiGongShiInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<UserClassOrderJiGongShiInfo> UserClassOrderJiGongShiInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserClassOrderJiGongShiInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserClassOrderSignInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<UserClassOrderSignInfo> UserClassOrderSignInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserClassOrderSignInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserClassTypeInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<UserClassTypeInfo> UserClassTypeInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserClassTypeInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ReportRecordInfoOnDepart_ZhouYuanShan"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<ReportRecordInfoOnDepart_ZhouYuanShan> ReportRecordInfoOnDepart_ZhouYuanShans
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ReportRecordInfoOnDepart_ZhouYuanShan>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="depart"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<depart> departs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<depart>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ZKHBMonthList"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<ZKHBMonthList> ZKHBMonthLists
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZKHBMonthList>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PersonDayAttend"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<PersonDayAttend> PersonDayAttends
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PersonDayAttend>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="backup_param"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<backup_param> backup_params
        {
            get
            {
                return base.EntityContainer.GetEntitySet<backup_param>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DepartMonthAttend"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<DepartMonthAttend> DepartMonthAttends
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DepartMonthAttend>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PersonFullAttendInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<PersonFullAttendInfo> PersonFullAttendInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PersonFullAttendInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="GuoDianReportData"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<GuoDianReportData> GuoDianReportDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<GuoDianReportData>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="HuFengDayAttendReport"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<HuFengDayAttendReport> HuFengDayAttendReports
        {
            get
            {
                return base.EntityContainer.GetEntitySet<HuFengDayAttendReport>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="HuFengMonthAttendReport"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<HuFengMonthAttendReport> HuFengMonthAttendReports
        {
            get
            {
                return base.EntityContainer.GetEntitySet<HuFengMonthAttendReport>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="AttendInComplete"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<AttendInComplete> AttendInCompletes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<AttendInComplete>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="InCompleteRecord"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<InCompleteRecord> InCompleteRecords
        {
            get
            {
                return base.EntityContainer.GetEntitySet<InCompleteRecord>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="XlsAttendWuHuShanPersonList"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<XlsAttendWuHuShanPersonList> XlsAttendWuHuShanPersonLists
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XlsAttendWuHuShanPersonList>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="LeakageAttendance"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<LeakageAttendance> LeakageAttendances
        {
            get
            {
                return base.EntityContainer.GetEntitySet<LeakageAttendance>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="LocateRecordAddedEntity"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<LocateRecordAddedEntity> LocateRecordAddedEntities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<LocateRecordAddedEntity>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="LunchRecordInfoOnDepart"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<LunchRecordInfoOnDepart> LunchRecordInfoOnDeparts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<LunchRecordInfoOnDepart>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="LunchRecordInfoOnPerson"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<LunchRecordInfoOnPerson> LunchRecordInfoOnPersons
        {
            get
            {
                return base.EntityContainer.GetEntitySet<LunchRecordInfoOnPerson>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PersonMonthAttend"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<PersonMonthAttend> PersonMonthAttends
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PersonMonthAttend>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="OfficeAttend"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<OfficeAttend> OfficeAttends
        {
            get
            {
                return base.EntityContainer.GetEntitySet<OfficeAttend>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="operator_potence"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<operator_potence> operator_potences
        {
            get
            {
                return base.EntityContainer.GetEntitySet<operator_potence>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="operator_purview"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<operator_purview> operator_purviews
        {
            get
            {
                return base.EntityContainer.GetEntitySet<operator_purview>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PersonAttend"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<PersonAttend> PersonAttends
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PersonAttend>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PersonAttendRecord"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<PersonAttendRecord> PersonAttendRecords
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PersonAttendRecord>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PersonAttendStatistics"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<PersonAttendStatistics> PersonAttendStatistics
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PersonAttendStatistics>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PersonLatearrivalInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<PersonLatearrivalInfo> PersonLatearrivalInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PersonLatearrivalInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PersonLeaveListInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<PersonLeaveListInfo> PersonLeaveListInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PersonLeaveListInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PersonMealSuppleInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<PersonMealSuppleInfo> PersonMealSuppleInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PersonMealSuppleInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PersonOriginInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<PersonOriginInfo> PersonOriginInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PersonOriginInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PersonStopIrisInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<PersonStopIrisInfo> PersonStopIrisInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PersonStopIrisInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PrincipalInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<PrincipalInfo> PrincipalInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PrincipalInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PrincipalTypeInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<PrincipalTypeInfo> PrincipalTypeInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PrincipalTypeInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="purview"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<purview> purviews
        {
            get
            {
                return base.EntityContainer.GetEntitySet<purview>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ReportPersonMonth"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<ReportPersonMonth> ReportPersonMonths
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ReportPersonMonth>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="system_param"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<system_param> system_params
        {
            get
            {
                return base.EntityContainer.GetEntitySet<system_param>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TotalAttend"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<TotalAttend> TotalAttends
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TotalAttend>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserOperationLog"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<UserOperationLog> UserOperationLogs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserOperationLog>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="work_cnt_policy"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<work_cnt_policy> work_cnt_policies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<work_cnt_policy>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="WorkTypeInfo"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<WorkTypeInfo> WorkTypeInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<WorkTypeInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="WorkTypeInfo_ZhouYuanShan"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<WorkTypeInfo_ZhouYuanShan> WorkTypeInfo_ZhouYuanShans
        {
            get
            {
                return base.EntityContainer.GetEntitySet<WorkTypeInfo_ZhouYuanShan>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="XiGouDayAttendReport"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<XiGouDayAttendReport> XiGouDayAttendReports
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XiGouDayAttendReport>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="XiGouInWellPerson"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<XiGouInWellPerson> XiGouInWellPersons
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XiGouInWellPerson>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="XiGouInWellPersonDetailReport"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<XiGouInWellPersonDetailReport> XiGouInWellPersonDetailReports
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XiGouInWellPersonDetailReport>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="XiGouLeaderAttend"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<XiGouLeaderAttend> XiGouLeaderAttends
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XiGouLeaderAttend>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="XiGouLeaderSchedule"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<XiGouLeaderSchedule> XiGouLeaderSchedules
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XiGouLeaderSchedule>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="XiGouLeaderScheduling"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<XiGouLeaderScheduling> XiGouLeaderSchedulings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XiGouLeaderScheduling>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="XiGouMonthAttendReport"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<XiGouMonthAttendReport> XiGouMonthAttendReports
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XiGouMonthAttendReport>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ZhuDuanMonthAttendReport"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<ZhuDuanMonthAttendReport> ZhuDuanMonthAttendReports
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ZhuDuanMonthAttendReport>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserAllPersonRecogLog"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<UserAllPersonRecogLog> UserAllPersonRecogLogs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserAllPersonRecogLog>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserAttendRecDetail"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<UserAttendRecDetail> UserAttendRecDetails
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserAttendRecDetail>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserAttendForLeave"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<UserAttendForLeave> UserAttendForLeaves
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserAttendForLeave>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="attend_for_leave"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<attend_for_leave> attend_for_leaves
        {
            get
            {
                return base.EntityContainer.GetEntitySet<attend_for_leave>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserAttendRec"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<UserAttendRec> UserAttendRecs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserAttendRec>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserInWellPerson"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<UserInWellPerson> UserInWellPersons
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserInWellPerson>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="LeaveType"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<LeaveType> LeaveTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<LeaveType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserPersonSimple"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<UserPersonSimple> UserPersonSimples
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserPersonSimple>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserPersonRecogLog"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<UserPersonRecogLog> UserPersonRecogLogs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserPersonRecogLog>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="attend_record_base"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<attend_record_base> attend_record_bases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<attend_record_base>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="XlsUserAttendRec"/> entity instances that have been loaded into this <see cref="DomainServiceIriskingAttend"/> instance.
        /// </summary>
        public EntitySet<XlsUserAttendRec> XlsUserAttendRecs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<XlsUserAttendRec>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionInfo"/> entity instances using the 'AddChildDepart' query.
        /// </summary>
        /// <param name="parentDepartId">The value for the 'parentDepartId' parameter of the query.</param>
        /// <param name="childDepartIDs">The value for the 'childDepartIDs' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionInfo"/> entity instances.</returns>
        public EntityQuery<OptionInfo> AddChildDepartQuery(string parentDepartId, string[] childDepartIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("parentDepartId", parentDepartId);
            parameters.Add("childDepartIDs", childDepartIDs);
            this.ValidateMethod("AddChildDepartQuery", parameters);
            return base.CreateQuery<OptionInfo>("AddChildDepart", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionInfo"/> entity instances using the 'AddClassOrder' query.
        /// </summary>
        /// <param name="class_order_name">The value for the 'class_order_name' parameter of the query.</param>
        /// <param name="attend_sign">The value for the 'attend_sign' parameter of the query.</param>
        /// <param name="class_type_id">The value for the 'class_type_id' parameter of the query.</param>
        /// <param name="attend_off_minutes">The value for the 'attend_off_minutes' parameter of the query.</param>
        /// <param name="in_well_start_time">The value for the 'in_well_start_time' parameter of the query.</param>
        /// <param name="in_well_end_time">The value for the 'in_well_end_time' parameter of the query.</param>
        /// <param name="out_well_start_time">The value for the 'out_well_start_time' parameter of the query.</param>
        /// <param name="out_well_end_time">The value for the 'out_well_end_time' parameter of the query.</param>
        /// <param name="attend_latest_worktime">The value for the 'attend_latest_worktime' parameter of the query.</param>
        /// <param name="attend_max_minutes">The value for the 'attend_max_minutes' parameter of the query.</param>
        /// <param name="Is_workcnt_method_standard">The value for the 'Is_workcnt_method_standard' parameter of the query.</param>
        /// <param name="avail_times">The value for the 'avail_times' parameter of the query.</param>
        /// <param name="work_cnts">The value for the 'work_cnts' parameter of the query.</param>
        /// <param name="avail_time_standard">The value for the 'avail_time_standard' parameter of the query.</param>
        /// <param name="work_cnt_standard">The value for the 'work_cnt_standard' parameter of the query.</param>
        /// <param name="memo">The value for the 'memo' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionInfo"/> entity instances.</returns>
        public EntityQuery<OptionInfo> AddClassOrderQuery(
                    string class_order_name, 
                    string attend_sign, 
                    string class_type_id, 
                    string attend_off_minutes, 
                    string in_well_start_time, 
                    string in_well_end_time, 
                    string out_well_start_time, 
                    string out_well_end_time, 
                    string attend_latest_worktime, 
                    string attend_max_minutes, 
                    bool Is_workcnt_method_standard, 
                    string[] avail_times, 
                    string[] work_cnts, 
                    string avail_time_standard, 
                    string work_cnt_standard, 
                    string memo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("class_order_name", class_order_name);
            parameters.Add("attend_sign", attend_sign);
            parameters.Add("class_type_id", class_type_id);
            parameters.Add("attend_off_minutes", attend_off_minutes);
            parameters.Add("in_well_start_time", in_well_start_time);
            parameters.Add("in_well_end_time", in_well_end_time);
            parameters.Add("out_well_start_time", out_well_start_time);
            parameters.Add("out_well_end_time", out_well_end_time);
            parameters.Add("attend_latest_worktime", attend_latest_worktime);
            parameters.Add("attend_max_minutes", attend_max_minutes);
            parameters.Add("Is_workcnt_method_standard", Is_workcnt_method_standard);
            parameters.Add("avail_times", avail_times);
            parameters.Add("work_cnts", work_cnts);
            parameters.Add("avail_time_standard", avail_time_standard);
            parameters.Add("work_cnt_standard", work_cnt_standard);
            parameters.Add("memo", memo);
            this.ValidateMethod("AddClassOrderQuery", parameters);
            return base.CreateQuery<OptionInfo>("AddClassOrder", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionInfo"/> entity instances using the 'AddClassType' query.
        /// </summary>
        /// <param name="class_type_name">The value for the 'class_type_name' parameter of the query.</param>
        /// <param name="memo">The value for the 'memo' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionInfo"/> entity instances.</returns>
        public EntityQuery<OptionInfo> AddClassTypeQuery(string class_type_name, string memo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("class_type_name", class_type_name);
            parameters.Add("memo", memo);
            this.ValidateMethod("AddClassTypeQuery", parameters);
            return base.CreateQuery<OptionInfo>("AddClassType", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionInfo"/> entity instances using the 'AddDepart' query.
        /// </summary>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="departSn">The value for the 'departSn' parameter of the query.</param>
        /// <param name="parentDepartId">The value for the 'parentDepartId' parameter of the query.</param>
        /// <param name="phone">The value for the 'phone' parameter of the query.</param>
        /// <param name="memo">The value for the 'memo' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionInfo"/> entity instances.</returns>
        public EntityQuery<OptionInfo> AddDepartQuery(string departName, string departSn, string parentDepartId, string phone, string memo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("departName", departName);
            parameters.Add("departSn", departSn);
            parameters.Add("parentDepartId", parentDepartId);
            parameters.Add("phone", phone);
            parameters.Add("memo", memo);
            this.ValidateMethod("AddDepartQuery", parameters);
            return base.CreateQuery<OptionInfo>("AddDepart", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionInfo"/> entity instances using the 'AddPersonOnMine' query.
        /// </summary>
        /// <param name="depart_id">The value for the 'depart_id' parameter of the query.</param>
        /// <param name="class_type_id_on_ground">The value for the 'class_type_id_on_ground' parameter of the query.</param>
        /// <param name="class_type_id">The value for the 'class_type_id' parameter of the query.</param>
        /// <param name="worksn">The value for the 'worksn' parameter of the query.</param>
        /// <param name="name">The value for the 'name' parameter of the query.</param>
        /// <param name="sex">The value for the 'sex' parameter of the query.</param>
        /// <param name="blood_type">The value for the 'blood_type' parameter of the query.</param>
        /// <param name="birthdate">The value for the 'birthdate' parameter of the query.</param>
        /// <param name="workday">The value for the 'workday' parameter of the query.</param>
        /// <param name="id_card">The value for the 'id_card' parameter of the query.</param>
        /// <param name="phone">The value for the 'phone' parameter of the query.</param>
        /// <param name="address">The value for the 'address' parameter of the query.</param>
        /// <param name="zipcode">The value for the 'zipcode' parameter of the query.</param>
        /// <param name="email">The value for the 'email' parameter of the query.</param>
        /// <param name="memo">The value for the 'memo' parameter of the query.</param>
        /// <param name="imgdata">The value for the 'imgdata' parameter of the query.</param>
        /// <param name="imgType">The value for the 'imgType' parameter of the query.</param>
        /// <param name="principal_id">The value for the 'principal_id' parameter of the query.</param>
        /// <param name="work_type_id">The value for the 'work_type_id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionInfo"/> entity instances.</returns>
        public EntityQuery<OptionInfo> AddPersonOnMineQuery(
                    string depart_id, 
                    string class_type_id_on_ground, 
                    string class_type_id, 
                    string worksn, 
                    string name, 
                    string sex, 
                    string blood_type, 
                    string birthdate, 
                    string workday, 
                    string id_card, 
                    string phone, 
                    string address, 
                    string zipcode, 
                    string email, 
                    string memo, 
                    byte[] imgdata, 
                    string imgType, 
                    string principal_id, 
                    string work_type_id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("depart_id", depart_id);
            parameters.Add("class_type_id_on_ground", class_type_id_on_ground);
            parameters.Add("class_type_id", class_type_id);
            parameters.Add("worksn", worksn);
            parameters.Add("name", name);
            parameters.Add("sex", sex);
            parameters.Add("blood_type", blood_type);
            parameters.Add("birthdate", birthdate);
            parameters.Add("workday", workday);
            parameters.Add("id_card", id_card);
            parameters.Add("phone", phone);
            parameters.Add("address", address);
            parameters.Add("zipcode", zipcode);
            parameters.Add("email", email);
            parameters.Add("memo", memo);
            parameters.Add("imgdata", imgdata);
            parameters.Add("imgType", imgType);
            parameters.Add("principal_id", principal_id);
            parameters.Add("work_type_id", work_type_id);
            this.ValidateMethod("AddPersonOnMineQuery", parameters);
            return base.CreateQuery<OptionInfo>("AddPersonOnMine", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionInfo"/> entity instances using the 'DeleteChildDepart' query.
        /// </summary>
        /// <param name="parentDepartId">The value for the 'parentDepartId' parameter of the query.</param>
        /// <param name="childDepartIDs">The value for the 'childDepartIDs' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionInfo"/> entity instances.</returns>
        public EntityQuery<OptionInfo> DeleteChildDepartQuery(string parentDepartId, string[] childDepartIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("parentDepartId", parentDepartId);
            parameters.Add("childDepartIDs", childDepartIDs);
            this.ValidateMethod("DeleteChildDepartQuery", parameters);
            return base.CreateQuery<OptionInfo>("DeleteChildDepart", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionInfo"/> entity instances using the 'DeleteClassOrder' query.
        /// </summary>
        /// <param name="class_order_ids">The value for the 'class_order_ids' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionInfo"/> entity instances.</returns>
        public EntityQuery<OptionInfo> DeleteClassOrderQuery(string[] class_order_ids)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("class_order_ids", class_order_ids);
            this.ValidateMethod("DeleteClassOrderQuery", parameters);
            return base.CreateQuery<OptionInfo>("DeleteClassOrder", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionInfo"/> entity instances using the 'DeleteClassOrderJiGongShi' query.
        /// </summary>
        /// <param name="class_order_ids">The value for the 'class_order_ids' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionInfo"/> entity instances.</returns>
        public EntityQuery<OptionInfo> DeleteClassOrderJiGongShiQuery(string[] class_order_ids)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("class_order_ids", class_order_ids);
            this.ValidateMethod("DeleteClassOrderJiGongShiQuery", parameters);
            return base.CreateQuery<OptionInfo>("DeleteClassOrderJiGongShi", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionInfo"/> entity instances using the 'DeleteClassOrderSign' query.
        /// </summary>
        /// <param name="class_order_ids">The value for the 'class_order_ids' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionInfo"/> entity instances.</returns>
        public EntityQuery<OptionInfo> DeleteClassOrderSignQuery(string[] class_order_ids)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("class_order_ids", class_order_ids);
            this.ValidateMethod("DeleteClassOrderSignQuery", parameters);
            return base.CreateQuery<OptionInfo>("DeleteClassOrderSign", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionInfo"/> entity instances using the 'DeleteClassType' query.
        /// </summary>
        /// <param name="class_type_ids">The value for the 'class_type_ids' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionInfo"/> entity instances.</returns>
        public EntityQuery<OptionInfo> DeleteClassTypeQuery(string[] class_type_ids)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("class_type_ids", class_type_ids);
            this.ValidateMethod("DeleteClassTypeQuery", parameters);
            return base.CreateQuery<OptionInfo>("DeleteClassType", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionInfo"/> entity instances using the 'DeleteDepart' query.
        /// </summary>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionInfo"/> entity instances.</returns>
        public EntityQuery<OptionInfo> DeleteDepartQuery(string[] departIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("departIds", departIds);
            this.ValidateMethod("DeleteDepartQuery", parameters);
            return base.CreateQuery<OptionInfo>("DeleteDepart", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="AttendRecordInfo_WuhuShan"/> entity instances using the 'GetAbnormalAttendRecordInfo_WuHuShan' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="AttendRecordInfo_WuhuShan"/> entity instances.</returns>
        public EntityQuery<AttendRecordInfo_WuhuShan> GetAbnormalAttendRecordInfo_WuHuShanQuery(DateTime beginTime, DateTime endTime, int[] departIds, string personName, string workSn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIds", departIds);
            parameters.Add("personName", personName);
            parameters.Add("workSn", workSn);
            this.ValidateMethod("GetAbnormalAttendRecordInfo_WuHuShanQuery", parameters);
            return base.CreateQuery<AttendRecordInfo_WuhuShan>("GetAbnormalAttendRecordInfo_WuHuShan", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DeviceInfo"/> entity instances using the 'GetAllDevice' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DeviceInfo"/> entity instances.</returns>
        public EntityQuery<DeviceInfo> GetAllDeviceQuery()
        {
            this.ValidateMethod("GetAllDeviceQuery", null);
            return base.CreateQuery<DeviceInfo>("GetAllDevice", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FestivalInfo"/> entity instances using the 'GetAllFestival' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FestivalInfo"/> entity instances.</returns>
        public EntityQuery<FestivalInfo> GetAllFestivalQuery()
        {
            this.ValidateMethod("GetAllFestivalQuery", null);
            return base.CreateQuery<FestivalInfo>("GetAllFestival", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="operator_info"/> entity instances using the 'GetAllOperator' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="operator_info"/> entity instances.</returns>
        public EntityQuery<operator_info> GetAllOperatorQuery()
        {
            this.ValidateMethod("GetAllOperatorQuery", null);
            return base.CreateQuery<operator_info>("GetAllOperator", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonInfo"/> entity instances using the 'GetAllPersonIds' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonInfo"/> entity instances.</returns>
        public EntityQuery<UserPersonInfo> GetAllPersonIdsQuery()
        {
            this.ValidateMethod("GetAllPersonIdsQuery", null);
            return base.CreateQuery<UserPersonInfo>("GetAllPersonIds", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="AttendDepartInWellQuery"/> entity instances using the 'GetAttendDepartInWellCollect' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="AttendDepartInWellQuery"/> entity instances.</returns>
        public EntityQuery<AttendDepartInWellQuery> GetAttendDepartInWellCollectQuery(DateTime beginTime, DateTime endTime, int[] departIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIds", departIds);
            this.ValidateMethod("GetAttendDepartInWellCollectQuery", parameters);
            return base.CreateQuery<AttendDepartInWellQuery>("GetAttendDepartInWellCollect", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="AttendDepartInWellDetail"/> entity instances using the 'GetAttendDepartInWellDetail' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departId">The value for the 'departId' parameter of the query.</param>
        /// <param name="attendSign">The value for the 'attendSign' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="AttendDepartInWellDetail"/> entity instances.</returns>
        public EntityQuery<AttendDepartInWellDetail> GetAttendDepartInWellDetailQuery(DateTime beginTime, DateTime endTime, int departId, string attendSign)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departId", departId);
            parameters.Add("attendSign", attendSign);
            this.ValidateMethod("GetAttendDepartInWellDetailQuery", parameters);
            return base.CreateQuery<AttendDepartInWellDetail>("GetAttendDepartInWellDetail", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="AttendPersonInWellQuery"/> entity instances using the 'GetAttendPersonInWellCollect' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <param name="workTime">The value for the 'workTime' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="AttendPersonInWellQuery"/> entity instances.</returns>
        public EntityQuery<AttendPersonInWellQuery> GetAttendPersonInWellCollectQuery(DateTime beginTime, DateTime endTime, int[] departIds, string personName, string workSn, int workTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIds", departIds);
            parameters.Add("personName", personName);
            parameters.Add("workSn", workSn);
            parameters.Add("workTime", workTime);
            this.ValidateMethod("GetAttendPersonInWellCollectQuery", parameters);
            return base.CreateQuery<AttendPersonInWellQuery>("GetAttendPersonInWellCollect", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserDepartInfo"/> entity instances using the 'GetChildDepart' query.
        /// </summary>
        /// <param name="parentDepartID">The value for the 'parentDepartID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserDepartInfo"/> entity instances.</returns>
        public EntityQuery<UserDepartInfo> GetChildDepartQuery(string parentDepartID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("parentDepartID", parentDepartID);
            this.ValidateMethod("GetChildDepartQuery", parameters);
            return base.CreateQuery<UserDepartInfo>("GetChildDepart", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserClassOrderInfo"/> entity instances using the 'GetClassOrderInfos' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserClassOrderInfo"/> entity instances.</returns>
        public EntityQuery<UserClassOrderInfo> GetClassOrderInfosQuery()
        {
            this.ValidateMethod("GetClassOrderInfosQuery", null);
            return base.CreateQuery<UserClassOrderInfo>("GetClassOrderInfos", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserClassOrderInfo"/> entity instances using the 'GetClassOrderInfosByClassType' query.
        /// </summary>
        /// <param name="classTypeId">The value for the 'classTypeId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserClassOrderInfo"/> entity instances.</returns>
        public EntityQuery<UserClassOrderInfo> GetClassOrderInfosByClassTypeQuery(int classTypeId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("classTypeId", classTypeId);
            this.ValidateMethod("GetClassOrderInfosByClassTypeQuery", parameters);
            return base.CreateQuery<UserClassOrderInfo>("GetClassOrderInfosByClassType", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserClassOrderJiGongShiInfo"/> entity instances using the 'GetClassOrderJiGongShiInfosByClassType' query.
        /// </summary>
        /// <param name="classTypeId">The value for the 'classTypeId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserClassOrderJiGongShiInfo"/> entity instances.</returns>
        public EntityQuery<UserClassOrderJiGongShiInfo> GetClassOrderJiGongShiInfosByClassTypeQuery(int classTypeId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("classTypeId", classTypeId);
            this.ValidateMethod("GetClassOrderJiGongShiInfosByClassTypeQuery", parameters);
            return base.CreateQuery<UserClassOrderJiGongShiInfo>("GetClassOrderJiGongShiInfosByClassType", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserClassOrderSignInfo"/> entity instances using the 'GetClassOrderSignInfosByClassType' query.
        /// </summary>
        /// <param name="classTypeId">The value for the 'classTypeId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserClassOrderSignInfo"/> entity instances.</returns>
        public EntityQuery<UserClassOrderSignInfo> GetClassOrderSignInfosByClassTypeQuery(int classTypeId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("classTypeId", classTypeId);
            this.ValidateMethod("GetClassOrderSignInfosByClassTypeQuery", parameters);
            return base.CreateQuery<UserClassOrderSignInfo>("GetClassOrderSignInfosByClassType", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserClassTypeInfo"/> entity instances using the 'GetClassTypeInfos' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserClassTypeInfo"/> entity instances.</returns>
        public EntityQuery<UserClassTypeInfo> GetClassTypeInfosQuery()
        {
            this.ValidateMethod("GetClassTypeInfosQuery", null);
            return base.CreateQuery<UserClassTypeInfo>("GetClassTypeInfos", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ReportRecordInfoOnDepart_ZhouYuanShan"/> entity instances using the 'GetCompletedReportRecordInfoOnDepart' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ReportRecordInfoOnDepart_ZhouYuanShan"/> entity instances.</returns>
        public EntityQuery<ReportRecordInfoOnDepart_ZhouYuanShan> GetCompletedReportRecordInfoOnDepartQuery(DateTime beginTime, DateTime endTime, int[] departIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIds", departIds);
            this.ValidateMethod("GetCompletedReportRecordInfoOnDepartQuery", parameters);
            return base.CreateQuery<ReportRecordInfoOnDepart_ZhouYuanShan>("GetCompletedReportRecordInfoOnDepart", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="depart"/> entity instances using the 'GetCustomOrderbyDepartsInfo' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="depart"/> entity instances.</returns>
        public EntityQuery<depart> GetCustomOrderbyDepartsInfoQuery()
        {
            this.ValidateMethod("GetCustomOrderbyDepartsInfoQuery", null);
            return base.CreateQuery<depart>("GetCustomOrderbyDepartsInfo", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ZKHBMonthList"/> entity instances using the 'GetDayList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ZKHBMonthList"/> entity instances.</returns>
        public EntityQuery<ZKHBMonthList> GetDayListQuery(DateTime beginTime, DateTime endTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            this.ValidateMethod("GetDayListQuery", parameters);
            return base.CreateQuery<ZKHBMonthList>("GetDayList", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PersonDayAttend"/> entity instances using the 'GetDayPersonAttendZhouYuanShan' query.
        /// </summary>
        /// <param name="sqlQuery">The value for the 'sqlQuery' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PersonDayAttend"/> entity instances.</returns>
        public EntityQuery<PersonDayAttend> GetDayPersonAttendZhouYuanShanQuery(string sqlQuery)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sqlQuery", sqlQuery);
            this.ValidateMethod("GetDayPersonAttendZhouYuanShanQuery", parameters);
            return base.CreateQuery<PersonDayAttend>("GetDayPersonAttendZhouYuanShan", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="backup_param"/> entity instances using the 'GetDBBackupParam' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="backup_param"/> entity instances.</returns>
        public EntityQuery<backup_param> GetDBBackupParamQuery()
        {
            this.ValidateMethod("GetDBBackupParamQuery", null);
            return base.CreateQuery<backup_param>("GetDBBackupParam", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserDepartInfo"/> entity instances using the 'GetDepartInfo' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserDepartInfo"/> entity instances.</returns>
        public EntityQuery<UserDepartInfo> GetDepartInfoQuery()
        {
            this.ValidateMethod("GetDepartInfoQuery", null);
            return base.CreateQuery<UserDepartInfo>("GetDepartInfo", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DepartMonthAttend"/> entity instances using the 'GetDepartMonthAttendZhouYuanShan' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DepartMonthAttend"/> entity instances.</returns>
        public EntityQuery<DepartMonthAttend> GetDepartMonthAttendZhouYuanShanQuery(DateTime beginTime, DateTime endTime, int[] departIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIds", departIds);
            this.ValidateMethod("GetDepartMonthAttendZhouYuanShanQuery", parameters);
            return base.CreateQuery<DepartMonthAttend>("GetDepartMonthAttendZhouYuanShan", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserDepartInfo"/> entity instances using the 'GetDepartsInfo' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserDepartInfo"/> entity instances.</returns>
        public EntityQuery<UserDepartInfo> GetDepartsInfoQuery()
        {
            this.ValidateMethod("GetDepartsInfoQuery", null);
            return base.CreateQuery<UserDepartInfo>("GetDepartsInfo", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FestivalInfo"/> entity instances using the 'GetFestivalBySql' query.
        /// </summary>
        /// <param name="querySql">The value for the 'querySql' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FestivalInfo"/> entity instances.</returns>
        public EntityQuery<FestivalInfo> GetFestivalBySqlQuery(string querySql)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("querySql", querySql);
            this.ValidateMethod("GetFestivalBySqlQuery", parameters);
            return base.CreateQuery<FestivalInfo>("GetFestivalBySql", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PersonFullAttendInfo"/> entity instances using the 'GetFullPersonList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PersonFullAttendInfo"/> entity instances.</returns>
        public EntityQuery<PersonFullAttendInfo> GetFullPersonListQuery(DateTime beginTime, DateTime endTime, string[] departName, string[] personName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departName", departName);
            parameters.Add("personName", personName);
            this.ValidateMethod("GetFullPersonListQuery", parameters);
            return base.CreateQuery<PersonFullAttendInfo>("GetFullPersonList", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="GuoDianReportData"/> entity instances using the 'GetGuoDianReport' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="GuoDianReportData"/> entity instances.</returns>
        public EntityQuery<GuoDianReportData> GetGuoDianReportQuery(DateTime beginTime, DateTime endTime, string personName, string workSn, int[] departIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("personName", personName);
            parameters.Add("workSn", workSn);
            parameters.Add("departIds", departIds);
            this.ValidateMethod("GetGuoDianReportQuery", parameters);
            return base.CreateQuery<GuoDianReportData>("GetGuoDianReport", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="GuoDianReportData"/> entity instances using the 'GetGuoDianReportFromExcel' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="GuoDianReportData"/> entity instances.</returns>
        public EntityQuery<GuoDianReportData> GetGuoDianReportFromExcelQuery(DateTime beginTime, DateTime endTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            this.ValidateMethod("GetGuoDianReportFromExcelQuery", parameters);
            return base.CreateQuery<GuoDianReportData>("GetGuoDianReportFromExcel", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="HuFengDayAttendReport"/> entity instances using the 'GetHuFengDayAttendCollect' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="departNames">The value for the 'departNames' parameter of the query.</param>
        /// <param name="classOrderNames">The value for the 'classOrderNames' parameter of the query.</param>
        /// <param name="principalNames">The value for the 'principalNames' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="HuFengDayAttendReport"/> entity instances.</returns>
        public EntityQuery<HuFengDayAttendReport> GetHuFengDayAttendCollectQuery(DateTime beginTime, string[] departNames, string[] classOrderNames, string[] principalNames, string personName, string workSn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("departNames", departNames);
            parameters.Add("classOrderNames", classOrderNames);
            parameters.Add("principalNames", principalNames);
            parameters.Add("personName", personName);
            parameters.Add("workSn", workSn);
            this.ValidateMethod("GetHuFengDayAttendCollectQuery", parameters);
            return base.CreateQuery<HuFengDayAttendReport>("GetHuFengDayAttendCollect", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="HuFengMonthAttendReport"/> entity instances using the 'GetHuFengMonthAttendCollect' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departNames">The value for the 'departNames' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="HuFengMonthAttendReport"/> entity instances.</returns>
        public EntityQuery<HuFengMonthAttendReport> GetHuFengMonthAttendCollectQuery(DateTime beginTime, DateTime endTime, string[] departNames, string personName, string workSn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departNames", departNames);
            parameters.Add("personName", personName);
            parameters.Add("workSn", workSn);
            this.ValidateMethod("GetHuFengMonthAttendCollectQuery", parameters);
            return base.CreateQuery<HuFengMonthAttendReport>("GetHuFengMonthAttendCollect", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="AttendInComplete"/> entity instances using the 'GetInCompleteCollect' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="AttendInComplete"/> entity instances.</returns>
        public EntityQuery<AttendInComplete> GetInCompleteCollectQuery(DateTime beginTime, DateTime endTime, int[] departIds, string personName, string workSn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIds", departIds);
            parameters.Add("personName", personName);
            parameters.Add("workSn", workSn);
            this.ValidateMethod("GetInCompleteCollectQuery", parameters);
            return base.CreateQuery<AttendInComplete>("GetInCompleteCollect", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="InCompleteRecord"/> entity instances using the 'GetInCompleteRecord' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="personId">The value for the 'personId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="InCompleteRecord"/> entity instances.</returns>
        public EntityQuery<InCompleteRecord> GetInCompleteRecordQuery(DateTime beginTime, DateTime endTime, int personId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("personId", personId);
            this.ValidateMethod("GetInCompleteRecordQuery", parameters);
            return base.CreateQuery<InCompleteRecord>("GetInCompleteRecord", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="XlsAttendWuHuShanPersonList"/> entity instances using the 'GetIrisAttendQuery' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIdLst">The value for the 'departIdLst' parameter of the query.</param>
        /// <param name="name">The value for the 'name' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <param name="principalIdList">The value for the 'principalIdList' parameter of the query.</param>
        /// <param name="workTypeIdList">The value for the 'workTypeIdList' parameter of the query.</param>
        /// <param name="workTime">The value for the 'workTime' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="XlsAttendWuHuShanPersonList"/> entity instances.</returns>
        public EntityQuery<XlsAttendWuHuShanPersonList> GetIrisAttendQueryQuery(DateTime beginTime, DateTime endTime, int[] departIdLst, string name, string workSn, int[] principalIdList, int[] workTypeIdList, int workTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIdLst", departIdLst);
            parameters.Add("name", name);
            parameters.Add("workSn", workSn);
            parameters.Add("principalIdList", principalIdList);
            parameters.Add("workTypeIdList", workTypeIdList);
            parameters.Add("workTime", workTime);
            this.ValidateMethod("GetIrisAttendQueryQuery", parameters);
            return base.CreateQuery<XlsAttendWuHuShanPersonList>("GetIrisAttendQuery", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonInfo"/> entity instances using the 'GetLeaderPersonInfoList' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonInfo"/> entity instances.</returns>
        public EntityQuery<UserPersonInfo> GetLeaderPersonInfoListQuery()
        {
            this.ValidateMethod("GetLeaderPersonInfoListQuery", null);
            return base.CreateQuery<UserPersonInfo>("GetLeaderPersonInfoList", null, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LeakageAttendance"/> entity instances using the 'GetLeakageAttendanceCollect' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LeakageAttendance"/> entity instances.</returns>
        public EntityQuery<LeakageAttendance> GetLeakageAttendanceCollectQuery(DateTime beginTime, DateTime endTime, string[] departName, string[] personName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departName", departName);
            parameters.Add("personName", personName);
            this.ValidateMethod("GetLeakageAttendanceCollectQuery", parameters);
            return base.CreateQuery<LeakageAttendance>("GetLeakageAttendanceCollect", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LocateRecordAddedEntity"/> entity instances using the 'GetLocateRecord' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LocateRecordAddedEntity"/> entity instances.</returns>
        public EntityQuery<LocateRecordAddedEntity> GetLocateRecordQuery(DateTime beginTime, DateTime endTime, int[] departIds, string personName, string workSn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIds", departIds);
            parameters.Add("personName", personName);
            parameters.Add("workSn", workSn);
            this.ValidateMethod("GetLocateRecordQuery", parameters);
            return base.CreateQuery<LocateRecordAddedEntity>("GetLocateRecord", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ReportRecordInfoOnDepart_ZhouYuanShan"/> entity instances using the 'GetLunchRecordOnClassOrder' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="classOrderIDs">The value for the 'classOrderIDs' parameter of the query.</param>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ReportRecordInfoOnDepart_ZhouYuanShan"/> entity instances.</returns>
        public EntityQuery<ReportRecordInfoOnDepart_ZhouYuanShan> GetLunchRecordOnClassOrderQuery(DateTime beginTime, DateTime endTime, int[] classOrderIDs, int[] departIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("classOrderIDs", classOrderIDs);
            parameters.Add("departIds", departIds);
            this.ValidateMethod("GetLunchRecordOnClassOrderQuery", parameters);
            return base.CreateQuery<ReportRecordInfoOnDepart_ZhouYuanShan>("GetLunchRecordOnClassOrder", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LunchRecordInfoOnDepart"/> entity instances using the 'GetLunchRecordOnDepart' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LunchRecordInfoOnDepart"/> entity instances.</returns>
        public EntityQuery<LunchRecordInfoOnDepart> GetLunchRecordOnDepartQuery(DateTime beginTime, DateTime endTime, int[] departIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIds", departIds);
            this.ValidateMethod("GetLunchRecordOnDepartQuery", parameters);
            return base.CreateQuery<LunchRecordInfoOnDepart>("GetLunchRecordOnDepart", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LunchRecordInfoOnPerson"/> entity instances using the 'GetLunchRecordOnPerson' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="personIds">The value for the 'personIds' parameter of the query.</param>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LunchRecordInfoOnPerson"/> entity instances.</returns>
        public EntityQuery<LunchRecordInfoOnPerson> GetLunchRecordOnPersonQuery(DateTime beginTime, DateTime endTime, int[] personIds, int[] departIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("personIds", personIds);
            parameters.Add("departIds", departIds);
            this.ValidateMethod("GetLunchRecordOnPersonQuery", parameters);
            return base.CreateQuery<LunchRecordInfoOnPerson>("GetLunchRecordOnPerson", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PersonMonthAttend"/> entity instances using the 'GetMonthAttendUnderRuleCollect' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="ruleDataNum">The value for the 'ruleDataNum' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PersonMonthAttend"/> entity instances.</returns>
        public EntityQuery<PersonMonthAttend> GetMonthAttendUnderRuleCollectQuery(DateTime beginTime, DateTime endTime, string[] departName, string[] personName, int ruleDataNum)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departName", departName);
            parameters.Add("personName", personName);
            parameters.Add("ruleDataNum", ruleDataNum);
            this.ValidateMethod("GetMonthAttendUnderRuleCollectQuery", parameters);
            return base.CreateQuery<PersonMonthAttend>("GetMonthAttendUnderRuleCollect", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OfficeAttend"/> entity instances using the 'GetOfficeAttend' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departNames">The value for the 'departNames' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OfficeAttend"/> entity instances.</returns>
        public EntityQuery<OfficeAttend> GetOfficeAttendQuery(DateTime beginTime, DateTime endTime, string[] departNames, string personName, string workSn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departNames", departNames);
            parameters.Add("personName", personName);
            parameters.Add("workSn", workSn);
            this.ValidateMethod("GetOfficeAttendQuery", parameters);
            return base.CreateQuery<OfficeAttend>("GetOfficeAttend", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="operator_potence"/> entity instances using the 'GetOperatorDepartPotence' query.
        /// </summary>
        /// <param name="operatorName">The value for the 'operatorName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="operator_potence"/> entity instances.</returns>
        public EntityQuery<operator_potence> GetOperatorDepartPotenceQuery(string operatorName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("operatorName", operatorName);
            this.ValidateMethod("GetOperatorDepartPotenceQuery", parameters);
            return base.CreateQuery<operator_potence>("GetOperatorDepartPotence", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="operator_purview"/> entity instances using the 'GetOperatorPurview' query.
        /// </summary>
        /// <param name="operatorName">The value for the 'operatorName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="operator_purview"/> entity instances.</returns>
        public EntityQuery<operator_purview> GetOperatorPurviewQuery(string operatorName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("operatorName", operatorName);
            this.ValidateMethod("GetOperatorPurviewQuery", parameters);
            return base.CreateQuery<operator_purview>("GetOperatorPurview", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PersonAttend"/> entity instances using the 'GetPersonAttendDetailList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PersonAttend"/> entity instances.</returns>
        public EntityQuery<PersonAttend> GetPersonAttendDetailListQuery(DateTime beginTime, DateTime endTime, string[] departName, string[] personName, string[] workSn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departName", departName);
            parameters.Add("personName", personName);
            parameters.Add("workSn", workSn);
            this.ValidateMethod("GetPersonAttendDetailListQuery", parameters);
            return base.CreateQuery<PersonAttend>("GetPersonAttendDetailList", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PersonAttendRecord"/> entity instances using the 'GetPersonAttendRecord' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="personId">The value for the 'personId' parameter of the query.</param>
        /// <param name="attendType">The value for the 'attendType' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PersonAttendRecord"/> entity instances.</returns>
        public EntityQuery<PersonAttendRecord> GetPersonAttendRecordQuery(DateTime beginTime, DateTime endTime, int personId, int attendType)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("personId", personId);
            parameters.Add("attendType", attendType);
            this.ValidateMethod("GetPersonAttendRecordQuery", parameters);
            return base.CreateQuery<PersonAttendRecord>("GetPersonAttendRecord", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PersonAttendStatistics"/> entity instances using the 'GetPersonAttendStatistics' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <param name="personIds">The value for the 'personIds' parameter of the query.</param>
        /// <param name="workTypeIds">The value for the 'workTypeIds' parameter of the query.</param>
        /// <param name="classOrderIds">The value for the 'classOrderIds' parameter of the query.</param>
        /// <param name="_showElementType">The value for the '_showElementType' parameter of the query.</param>
        /// <param name="_reportType">The value for the '_reportType' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PersonAttendStatistics"/> entity instances.</returns>
        public EntityQuery<PersonAttendStatistics> GetPersonAttendStatisticsQuery(DateTime beginTime, DateTime endTime, int[] departIds, int[] personIds, int[] workTypeIds, int[] classOrderIds, int _showElementType, int _reportType)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIds", departIds);
            parameters.Add("personIds", personIds);
            parameters.Add("workTypeIds", workTypeIds);
            parameters.Add("classOrderIds", classOrderIds);
            parameters.Add("_showElementType", _showElementType);
            parameters.Add("_reportType", _reportType);
            this.ValidateMethod("GetPersonAttendStatisticsQuery", parameters);
            return base.CreateQuery<PersonAttendStatistics>("GetPersonAttendStatistics", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonInfo"/> entity instances using the 'GetPersonDetailInfo' query.
        /// </summary>
        /// <param name="personID">The value for the 'personID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonInfo"/> entity instances.</returns>
        public EntityQuery<UserPersonInfo> GetPersonDetailInfoQuery(int personID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("personID", personID);
            this.ValidateMethod("GetPersonDetailInfoQuery", parameters);
            return base.CreateQuery<UserPersonInfo>("GetPersonDetailInfo", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonInfo"/> entity instances using the 'GetPersonInfo' query.
        /// </summary>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonInfo"/> entity instances.</returns>
        public EntityQuery<UserPersonInfo> GetPersonInfoQuery(string[] departName, string[] personName, string[] workSn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("departName", departName);
            parameters.Add("personName", personName);
            parameters.Add("workSn", workSn);
            this.ValidateMethod("GetPersonInfoQuery", parameters);
            return base.CreateQuery<UserPersonInfo>("GetPersonInfo", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonInfo"/> entity instances using the 'GetPersonInfo_ZhouYuanShan' query.
        /// </summary>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonInfo"/> entity instances.</returns>
        public EntityQuery<UserPersonInfo> GetPersonInfo_ZhouYuanShanQuery(int[] departIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("departIds", departIds);
            this.ValidateMethod("GetPersonInfo_ZhouYuanShanQuery", parameters);
            return base.CreateQuery<UserPersonInfo>("GetPersonInfo_ZhouYuanShan", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonInfo"/> entity instances using the 'GetPersonInfoByDepartName' query.
        /// </summary>
        /// <param name="depart_Name">The value for the 'depart_Name' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonInfo"/> entity instances.</returns>
        public EntityQuery<UserPersonInfo> GetPersonInfoByDepartNameQuery(string[] depart_Name)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("depart_Name", depart_Name);
            this.ValidateMethod("GetPersonInfoByDepartNameQuery", parameters);
            return base.CreateQuery<UserPersonInfo>("GetPersonInfoByDepartName", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PersonLatearrivalInfo"/> entity instances using the 'GetPersonLatearrivalList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PersonLatearrivalInfo"/> entity instances.</returns>
        public EntityQuery<PersonLatearrivalInfo> GetPersonLatearrivalListQuery(DateTime beginTime, DateTime endTime, string[] departName, string[] personName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departName", departName);
            parameters.Add("personName", personName);
            this.ValidateMethod("GetPersonLatearrivalListQuery", parameters);
            return base.CreateQuery<PersonLatearrivalInfo>("GetPersonLatearrivalList", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PersonLeaveListInfo"/> entity instances using the 'GetPersonLeaveList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PersonLeaveListInfo"/> entity instances.</returns>
        public EntityQuery<PersonLeaveListInfo> GetPersonLeaveListQuery(DateTime beginTime, DateTime endTime, string[] departName, string[] personName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departName", departName);
            parameters.Add("personName", personName);
            this.ValidateMethod("GetPersonLeaveListQuery", parameters);
            return base.CreateQuery<PersonLeaveListInfo>("GetPersonLeaveList", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonInfo"/> entity instances using the 'GetPersonListInfo' query.
        /// </summary>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonInfo"/> entity instances.</returns>
        public EntityQuery<UserPersonInfo> GetPersonListInfoQuery(string[] departName, string[] personName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("departName", departName);
            parameters.Add("personName", personName);
            this.ValidateMethod("GetPersonListInfoQuery", parameters);
            return base.CreateQuery<UserPersonInfo>("GetPersonListInfo", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PersonMealSuppleInfo"/> entity instances using the 'GetPersonMealSuppleList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PersonMealSuppleInfo"/> entity instances.</returns>
        public EntityQuery<PersonMealSuppleInfo> GetPersonMealSuppleListQuery(DateTime beginTime, DateTime endTime, string[] departName, string[] personName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departName", departName);
            parameters.Add("personName", personName);
            this.ValidateMethod("GetPersonMealSuppleListQuery", parameters);
            return base.CreateQuery<PersonMealSuppleInfo>("GetPersonMealSuppleList", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PersonMonthAttend"/> entity instances using the 'GetPersonMonthAttendList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PersonMonthAttend"/> entity instances.</returns>
        public EntityQuery<PersonMonthAttend> GetPersonMonthAttendListQuery(DateTime beginTime, DateTime endTime, string[] departName, string[] personName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departName", departName);
            parameters.Add("personName", personName);
            this.ValidateMethod("GetPersonMonthAttendListQuery", parameters);
            return base.CreateQuery<PersonMonthAttend>("GetPersonMonthAttendList", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PersonOriginInfo"/> entity instances using the 'GetPersonOriginRecList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PersonOriginInfo"/> entity instances.</returns>
        public EntityQuery<PersonOriginInfo> GetPersonOriginRecListQuery(DateTime beginTime, DateTime endTime, string[] departName, string[] personName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departName", departName);
            parameters.Add("personName", personName);
            this.ValidateMethod("GetPersonOriginRecListQuery", parameters);
            return base.CreateQuery<PersonOriginInfo>("GetPersonOriginRecList", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonInfo"/> entity instances using the 'GetPersonsInfoTable' query.
        /// </summary>
        /// <param name="depart_id">The value for the 'depart_id' parameter of the query.</param>
        /// <param name="person_Name">The value for the 'person_Name' parameter of the query.</param>
        /// <param name="person_WorkSn">The value for the 'person_WorkSn' parameter of the query.</param>
        /// <param name="irisStatus">The value for the 'irisStatus' parameter of the query.</param>
        /// <param name="irisRegister">The value for the 'irisRegister' parameter of the query.</param>
        /// <param name="childDepartMode">The value for the 'childDepartMode' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonInfo"/> entity instances.</returns>
        public EntityQuery<UserPersonInfo> GetPersonsInfoTableQuery(int depart_id, string person_Name, string person_WorkSn, string irisStatus, string irisRegister, string childDepartMode)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("depart_id", depart_id);
            parameters.Add("person_Name", person_Name);
            parameters.Add("person_WorkSn", person_WorkSn);
            parameters.Add("irisStatus", irisStatus);
            parameters.Add("irisRegister", irisRegister);
            parameters.Add("childDepartMode", childDepartMode);
            this.ValidateMethod("GetPersonsInfoTableQuery", parameters);
            return base.CreateQuery<UserPersonInfo>("GetPersonsInfoTable", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PersonStopIrisInfo"/> entity instances using the 'GetPersonStopIrisInfo' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PersonStopIrisInfo"/> entity instances.</returns>
        public EntityQuery<PersonStopIrisInfo> GetPersonStopIrisInfoQuery()
        {
            this.ValidateMethod("GetPersonStopIrisInfoQuery", null);
            return base.CreateQuery<PersonStopIrisInfo>("GetPersonStopIrisInfo", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PersonStopIrisInfo"/> entity instances using the 'GetPersonStopIrisTable' query.
        /// </summary>
        /// <param name="persoonId">The value for the 'persoonId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PersonStopIrisInfo"/> entity instances.</returns>
        public EntityQuery<PersonStopIrisInfo> GetPersonStopIrisTableQuery(int[] persoonId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("persoonId", persoonId);
            this.ValidateMethod("GetPersonStopIrisTableQuery", parameters);
            return base.CreateQuery<PersonStopIrisInfo>("GetPersonStopIrisTable", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PersonLatearrivalInfo"/> entity instances using the 'GetPersonTimeProblemList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PersonLatearrivalInfo"/> entity instances.</returns>
        public EntityQuery<PersonLatearrivalInfo> GetPersonTimeProblemListQuery(DateTime beginTime, DateTime endTime, string[] departName, string[] personName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departName", departName);
            parameters.Add("personName", personName);
            this.ValidateMethod("GetPersonTimeProblemListQuery", parameters);
            return base.CreateQuery<PersonLatearrivalInfo>("GetPersonTimeProblemList", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PrincipalInfo"/> entity instances using the 'GetPrincipalInfo' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PrincipalInfo"/> entity instances.</returns>
        public EntityQuery<PrincipalInfo> GetPrincipalInfoQuery()
        {
            this.ValidateMethod("GetPrincipalInfoQuery", null);
            return base.CreateQuery<PrincipalInfo>("GetPrincipalInfo", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PrincipalInfo"/> entity instances using the 'GetPrincipals' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PrincipalInfo"/> entity instances.</returns>
        public EntityQuery<PrincipalInfo> GetPrincipalsQuery()
        {
            this.ValidateMethod("GetPrincipalsQuery", null);
            return base.CreateQuery<PrincipalInfo>("GetPrincipals", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PrincipalTypeInfo"/> entity instances using the 'GetPrincipalTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PrincipalTypeInfo"/> entity instances.</returns>
        public EntityQuery<PrincipalTypeInfo> GetPrincipalTypesQuery()
        {
            this.ValidateMethod("GetPrincipalTypesQuery", null);
            return base.CreateQuery<PrincipalTypeInfo>("GetPrincipalTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="purview"/> entity instances using the 'GetPurview' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="purview"/> entity instances.</returns>
        public EntityQuery<purview> GetPurviewQuery()
        {
            this.ValidateMethod("GetPurviewQuery", null);
            return base.CreateQuery<purview>("GetPurview", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ReportPersonMonth"/> entity instances using the 'GetReportPersonMonthAttend' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ReportPersonMonth"/> entity instances.</returns>
        public EntityQuery<ReportPersonMonth> GetReportPersonMonthAttendQuery(DateTime beginTime, int[] departIds, string personName, string workSn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("departIds", departIds);
            parameters.Add("personName", personName);
            parameters.Add("workSn", workSn);
            this.ValidateMethod("GetReportPersonMonthAttendQuery", parameters);
            return base.CreateQuery<ReportPersonMonth>("GetReportPersonMonthAttend", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserDepartInfo"/> entity instances using the 'GetSupportableChildDepart' query.
        /// </summary>
        /// <param name="depart_ID">The value for the 'depart_ID' parameter of the query.</param>
        /// <param name="parent_depart_ID">The value for the 'parent_depart_ID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserDepartInfo"/> entity instances.</returns>
        public EntityQuery<UserDepartInfo> GetSupportableChildDepartQuery(int depart_ID, int parent_depart_ID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("depart_ID", depart_ID);
            parameters.Add("parent_depart_ID", parent_depart_ID);
            this.ValidateMethod("GetSupportableChildDepartQuery", parameters);
            return base.CreateQuery<UserDepartInfo>("GetSupportableChildDepart", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="system_param"/> entity instances using the 'GetSystemParam' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="system_param"/> entity instances.</returns>
        public EntityQuery<system_param> GetSystemParamQuery()
        {
            this.ValidateMethod("GetSystemParamQuery", null);
            return base.CreateQuery<system_param>("GetSystemParam", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TotalAttend"/> entity instances using the 'GetTotalAttendDetailList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TotalAttend"/> entity instances.</returns>
        public EntityQuery<TotalAttend> GetTotalAttendDetailListQuery(DateTime beginTime, DateTime endTime, string[] departName, string[] personName, string[] workSn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departName", departName);
            parameters.Add("personName", personName);
            parameters.Add("workSn", workSn);
            this.ValidateMethod("GetTotalAttendDetailListQuery", parameters);
            return base.CreateQuery<TotalAttend>("GetTotalAttendDetailList", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ReportRecordInfoOnDepart_ZhouYuanShan"/> entity instances using the 'GetUnCompletedReportRecordInfoOnDepart' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ReportRecordInfoOnDepart_ZhouYuanShan"/> entity instances.</returns>
        public EntityQuery<ReportRecordInfoOnDepart_ZhouYuanShan> GetUnCompletedReportRecordInfoOnDepartQuery(DateTime beginTime, DateTime endTime, int[] departIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIds", departIds);
            this.ValidateMethod("GetUnCompletedReportRecordInfoOnDepartQuery", parameters);
            return base.CreateQuery<ReportRecordInfoOnDepart_ZhouYuanShan>("GetUnCompletedReportRecordInfoOnDepart", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserOperationLog"/> entity instances using the 'GetUserOperationLog' query.
        /// </summary>
        /// <param name="startTime">The value for the 'startTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="logName">The value for the 'logName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserOperationLog"/> entity instances.</returns>
        public EntityQuery<UserOperationLog> GetUserOperationLogQuery(string startTime, string endTime, string logName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("startTime", startTime);
            parameters.Add("endTime", endTime);
            parameters.Add("logName", logName);
            this.ValidateMethod("GetUserOperationLogQuery", parameters);
            return base.CreateQuery<UserOperationLog>("GetUserOperationLog", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserOperationLog"/> entity instances using the 'GetUserOperationLogByRecordCount' query.
        /// </summary>
        /// <param name="maxRecordCount">The value for the 'maxRecordCount' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserOperationLog"/> entity instances.</returns>
        public EntityQuery<UserOperationLog> GetUserOperationLogByRecordCountQuery(int maxRecordCount)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("maxRecordCount", maxRecordCount);
            this.ValidateMethod("GetUserOperationLogByRecordCountQuery", parameters);
            return base.CreateQuery<UserOperationLog>("GetUserOperationLogByRecordCount", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonInfo"/> entity instances using the 'GetUserPersonInfoBySql' query.
        /// </summary>
        /// <param name="condition">The value for the 'condition' parameter of the query.</param>
        /// <param name="orderBy">The value for the 'orderBy' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonInfo"/> entity instances.</returns>
        public EntityQuery<UserPersonInfo> GetUserPersonInfoBySqlQuery(string condition, string orderBy)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("condition", condition);
            parameters.Add("orderBy", orderBy);
            this.ValidateMethod("GetUserPersonInfoBySqlQuery", parameters);
            return base.CreateQuery<UserPersonInfo>("GetUserPersonInfoBySql", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="work_cnt_policy"/> entity instances using the 'GetWorkCntPolicy' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="work_cnt_policy"/> entity instances.</returns>
        public EntityQuery<work_cnt_policy> GetWorkCntPolicyQuery()
        {
            this.ValidateMethod("GetWorkCntPolicyQuery", null);
            return base.CreateQuery<work_cnt_policy>("GetWorkCntPolicy", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="WorkTypeInfo"/> entity instances using the 'GetWorkTypeInfo' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="WorkTypeInfo"/> entity instances.</returns>
        public EntityQuery<WorkTypeInfo> GetWorkTypeInfoQuery()
        {
            this.ValidateMethod("GetWorkTypeInfoQuery", null);
            return base.CreateQuery<WorkTypeInfo>("GetWorkTypeInfo", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="WorkTypeInfo_ZhouYuanShan"/> entity instances using the 'GetWorkTypeInfo_ZhouYuanShan' query.
        /// </summary>
        /// <param name="departIds">The value for the 'departIds' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="WorkTypeInfo_ZhouYuanShan"/> entity instances.</returns>
        public EntityQuery<WorkTypeInfo_ZhouYuanShan> GetWorkTypeInfo_ZhouYuanShanQuery(int[] departIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("departIds", departIds);
            this.ValidateMethod("GetWorkTypeInfo_ZhouYuanShanQuery", parameters);
            return base.CreateQuery<WorkTypeInfo_ZhouYuanShan>("GetWorkTypeInfo_ZhouYuanShan", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="WorkTypeInfo"/> entity instances using the 'GetWorkTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="WorkTypeInfo"/> entity instances.</returns>
        public EntityQuery<WorkTypeInfo> GetWorkTypesQuery()
        {
            this.ValidateMethod("GetWorkTypesQuery", null);
            return base.CreateQuery<WorkTypeInfo>("GetWorkTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="XiGouDayAttendReport"/> entity instances using the 'GetXiGouDayAttendCollect' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="departNames">The value for the 'departNames' parameter of the query.</param>
        /// <param name="classTypeNames">The value for the 'classTypeNames' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="XiGouDayAttendReport"/> entity instances.</returns>
        public EntityQuery<XiGouDayAttendReport> GetXiGouDayAttendCollectQuery(DateTime beginTime, string[] departNames, string[] classTypeNames, string personName, string workSn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("departNames", departNames);
            parameters.Add("classTypeNames", classTypeNames);
            parameters.Add("personName", personName);
            parameters.Add("workSn", workSn);
            this.ValidateMethod("GetXiGouDayAttendCollectQuery", parameters);
            return base.CreateQuery<XiGouDayAttendReport>("GetXiGouDayAttendCollect", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="XiGouInWellPerson"/> entity instances using the 'GetXiGouInWellList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="XiGouInWellPerson"/> entity instances.</returns>
        public EntityQuery<XiGouInWellPerson> GetXiGouInWellListQuery(DateTime beginTime, DateTime endTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            this.ValidateMethod("GetXiGouInWellListQuery", parameters);
            return base.CreateQuery<XiGouInWellPerson>("GetXiGouInWellList", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="XiGouInWellPersonDetailReport"/> entity instances using the 'GetXiGouInWellPersonDetail' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="XiGouInWellPersonDetailReport"/> entity instances.</returns>
        public EntityQuery<XiGouInWellPersonDetailReport> GetXiGouInWellPersonDetailQuery(DateTime beginTime, DateTime endTime, string personName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("personName", personName);
            this.ValidateMethod("GetXiGouInWellPersonDetailQuery", parameters);
            return base.CreateQuery<XiGouInWellPersonDetailReport>("GetXiGouInWellPersonDetail", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="XiGouLeaderAttend"/> entity instances using the 'GetXiGouLeaderAttendRec' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIdLst">The value for the 'departIdLst' parameter of the query.</param>
        /// <param name="person_id">The value for the 'person_id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="XiGouLeaderAttend"/> entity instances.</returns>
        public EntityQuery<XiGouLeaderAttend> GetXiGouLeaderAttendRecQuery(DateTime beginTime, DateTime endTime, int[] departIdLst, int person_id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIdLst", departIdLst);
            parameters.Add("person_id", person_id);
            this.ValidateMethod("GetXiGouLeaderAttendRecQuery", parameters);
            return base.CreateQuery<XiGouLeaderAttend>("GetXiGouLeaderAttendRec", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="XiGouLeaderAttend"/> entity instances using the 'GetXiGouLeaderList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="XiGouLeaderAttend"/> entity instances.</returns>
        public EntityQuery<XiGouLeaderAttend> GetXiGouLeaderListQuery(DateTime beginTime, DateTime endTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            this.ValidateMethod("GetXiGouLeaderListQuery", parameters);
            return base.CreateQuery<XiGouLeaderAttend>("GetXiGouLeaderList", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="XiGouLeaderSchedule"/> entity instances using the 'GetXiGouLeaderScheduleList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="XiGouLeaderSchedule"/> entity instances.</returns>
        public EntityQuery<XiGouLeaderSchedule> GetXiGouLeaderScheduleListQuery(DateTime beginTime, DateTime endTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            this.ValidateMethod("GetXiGouLeaderScheduleListQuery", parameters);
            return base.CreateQuery<XiGouLeaderSchedule>("GetXiGouLeaderScheduleList", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="XiGouLeaderSchedule"/> entity instances using the 'GetXiGouLeaderScheduleRec' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIdLst">The value for the 'departIdLst' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="XiGouLeaderSchedule"/> entity instances.</returns>
        public EntityQuery<XiGouLeaderSchedule> GetXiGouLeaderScheduleRecQuery(DateTime beginTime, DateTime endTime, int[] departIdLst)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIdLst", departIdLst);
            this.ValidateMethod("GetXiGouLeaderScheduleRecQuery", parameters);
            return base.CreateQuery<XiGouLeaderSchedule>("GetXiGouLeaderScheduleRec", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="XiGouLeaderScheduling"/> entity instances using the 'GetXiGouLeaderSchedulingList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="XiGouLeaderScheduling"/> entity instances.</returns>
        public EntityQuery<XiGouLeaderScheduling> GetXiGouLeaderSchedulingListQuery(DateTime beginTime, DateTime endTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            this.ValidateMethod("GetXiGouLeaderSchedulingListQuery", parameters);
            return base.CreateQuery<XiGouLeaderScheduling>("GetXiGouLeaderSchedulingList", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="XiGouMonthAttendReport"/> entity instances using the 'GetXiGouMonthAttendCollect' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departNames">The value for the 'departNames' parameter of the query.</param>
        /// <param name="classTypeNames">The value for the 'classTypeNames' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="XiGouMonthAttendReport"/> entity instances.</returns>
        public EntityQuery<XiGouMonthAttendReport> GetXiGouMonthAttendCollectQuery(DateTime beginTime, DateTime endTime, string[] departNames, string[] classTypeNames, string personName, string workSn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departNames", departNames);
            parameters.Add("classTypeNames", classTypeNames);
            parameters.Add("personName", personName);
            parameters.Add("workSn", workSn);
            this.ValidateMethod("GetXiGouMonthAttendCollectQuery", parameters);
            return base.CreateQuery<XiGouMonthAttendReport>("GetXiGouMonthAttendCollect", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="XiGouLeaderAttend"/> entity instances using the 'GetXiGouPersonLeaderScheuleRec' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIdLst">The value for the 'departIdLst' parameter of the query.</param>
        /// <param name="name">The value for the 'name' parameter of the query.</param>
        /// <param name="personId">The value for the 'personId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="XiGouLeaderAttend"/> entity instances.</returns>
        public EntityQuery<XiGouLeaderAttend> GetXiGouPersonLeaderScheuleRecQuery(DateTime beginTime, DateTime endTime, int[] departIdLst, string name, int personId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIdLst", departIdLst);
            parameters.Add("name", name);
            parameters.Add("personId", personId);
            this.ValidateMethod("GetXiGouPersonLeaderScheuleRecQuery", parameters);
            return base.CreateQuery<XiGouLeaderAttend>("GetXiGouPersonLeaderScheuleRec", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="XlsAttendWuHuShanPersonList"/> entity instances using the 'GetXlsWuHuShanAttendanceDetailList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIdLst">The value for the 'departIdLst' parameter of the query.</param>
        /// <param name="name">The value for the 'name' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <param name="principalIdList">The value for the 'principalIdList' parameter of the query.</param>
        /// <param name="workTypeIdList">The value for the 'workTypeIdList' parameter of the query.</param>
        /// <param name="workTimeMore">The value for the 'workTimeMore' parameter of the query.</param>
        /// <param name="workTimeEqual">The value for the 'workTimeEqual' parameter of the query.</param>
        /// <param name="workTimeLess">The value for the 'workTimeLess' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="XlsAttendWuHuShanPersonList"/> entity instances.</returns>
        public EntityQuery<XlsAttendWuHuShanPersonList> GetXlsWuHuShanAttendanceDetailListQuery(DateTime beginTime, DateTime endTime, int[] departIdLst, string name, string workSn, int[] principalIdList, int[] workTypeIdList, int workTimeMore, int workTimeEqual, int workTimeLess)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIdLst", departIdLst);
            parameters.Add("name", name);
            parameters.Add("workSn", workSn);
            parameters.Add("principalIdList", principalIdList);
            parameters.Add("workTypeIdList", workTypeIdList);
            parameters.Add("workTimeMore", workTimeMore);
            parameters.Add("workTimeEqual", workTimeEqual);
            parameters.Add("workTimeLess", workTimeLess);
            this.ValidateMethod("GetXlsWuHuShanAttendanceDetailListQuery", parameters);
            return base.CreateQuery<XlsAttendWuHuShanPersonList>("GetXlsWuHuShanAttendanceDetailList", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="XlsAttendWuHuShanPersonList"/> entity instances using the 'GetXlsWuHuShanPersonList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIdLst">The value for the 'departIdLst' parameter of the query.</param>
        /// <param name="name">The value for the 'name' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <param name="principalIdList">The value for the 'principalIdList' parameter of the query.</param>
        /// <param name="workTypeIdList">The value for the 'workTypeIdList' parameter of the query.</param>
        /// <param name="workTime">The value for the 'workTime' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="XlsAttendWuHuShanPersonList"/> entity instances.</returns>
        public EntityQuery<XlsAttendWuHuShanPersonList> GetXlsWuHuShanPersonListQuery(DateTime beginTime, DateTime endTime, int[] departIdLst, string name, string workSn, int[] principalIdList, int[] workTypeIdList, int workTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIdLst", departIdLst);
            parameters.Add("name", name);
            parameters.Add("workSn", workSn);
            parameters.Add("principalIdList", principalIdList);
            parameters.Add("workTypeIdList", workTypeIdList);
            parameters.Add("workTime", workTime);
            this.ValidateMethod("GetXlsWuHuShanPersonListQuery", parameters);
            return base.CreateQuery<XlsAttendWuHuShanPersonList>("GetXlsWuHuShanPersonList", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ZhuDuanMonthAttendReport"/> entity instances using the 'GetZhuDuanMonthAttendList' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departNames">The value for the 'departNames' parameter of the query.</param>
        /// <param name="personNames">The value for the 'personNames' parameter of the query.</param>
        /// <param name="workSns">The value for the 'workSns' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ZhuDuanMonthAttendReport"/> entity instances.</returns>
        public EntityQuery<ZhuDuanMonthAttendReport> GetZhuDuanMonthAttendListQuery(DateTime beginTime, DateTime endTime, string[] departNames, string[] personNames, string[] workSns)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departNames", departNames);
            parameters.Add("personNames", personNames);
            parameters.Add("workSns", workSns);
            this.ValidateMethod("GetZhuDuanMonthAttendListQuery", parameters);
            return base.CreateQuery<ZhuDuanMonthAttendReport>("GetZhuDuanMonthAttendList", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonInfo"/> entity instances using the 'GetZKHBPersonInfo' query.
        /// </summary>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonInfo"/> entity instances.</returns>
        public EntityQuery<UserPersonInfo> GetZKHBPersonInfoQuery(string[] departName, string personName, string workSn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("departName", departName);
            parameters.Add("personName", personName);
            parameters.Add("workSn", workSn);
            this.ValidateMethod("GetZKHBPersonInfoQuery", parameters);
            return base.CreateQuery<UserPersonInfo>("GetZKHBPersonInfo", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserAllPersonRecogLog"/> entity instances using the 'IrisGetAllPersonRecog' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="depart_name">The value for the 'depart_name' parameter of the query.</param>
        /// <param name="person_name">The value for the 'person_name' parameter of the query.</param>
        /// <param name="work_sn">The value for the 'work_sn' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserAllPersonRecogLog"/> entity instances.</returns>
        public EntityQuery<UserAllPersonRecogLog> IrisGetAllPersonRecogQuery(DateTime beginTime, DateTime endTime, string depart_name, string person_name, string work_sn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("depart_name", depart_name);
            parameters.Add("person_name", person_name);
            parameters.Add("work_sn", work_sn);
            this.ValidateMethod("IrisGetAllPersonRecogQuery", parameters);
            return base.CreateQuery<UserAllPersonRecogLog>("IrisGetAllPersonRecog", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserAttendRecDetail"/> entity instances using the 'IrisGetAttendDetail' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="devTypeIdLst">The value for the 'devTypeIdLst' parameter of the query.</param>
        /// <param name="workTime">The value for the 'workTime' parameter of the query.</param>
        /// <param name="personId">The value for the 'personId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserAttendRecDetail"/> entity instances.</returns>
        public EntityQuery<UserAttendRecDetail> IrisGetAttendDetailQuery(DateTime beginTime, DateTime endTime, int[] devTypeIdLst, int workTime, int personId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("devTypeIdLst", devTypeIdLst);
            parameters.Add("workTime", workTime);
            parameters.Add("personId", personId);
            this.ValidateMethod("IrisGetAttendDetailQuery", parameters);
            return base.CreateQuery<UserAttendRecDetail>("IrisGetAttendDetail", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserAttendForLeave"/> entity instances using the 'IrisGetAttendForLeave' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserAttendForLeave"/> entity instances.</returns>
        public EntityQuery<UserAttendForLeave> IrisGetAttendForLeaveQuery()
        {
            this.ValidateMethod("IrisGetAttendForLeaveQuery", null);
            return base.CreateQuery<UserAttendForLeave>("IrisGetAttendForLeave", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="attend_for_leave"/> entity instances using the 'IrisGetAttendForLeaveBase' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="attend_for_leave"/> entity instances.</returns>
        public EntityQuery<attend_for_leave> IrisGetAttendForLeaveBaseQuery()
        {
            this.ValidateMethod("IrisGetAttendForLeaveBaseQuery", null);
            return base.CreateQuery<attend_for_leave>("IrisGetAttendForLeaveBase", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserAttendForLeave"/> entity instances using the 'IrisGetAttendLeaveForDepart' query.
        /// </summary>
        /// <param name="lstDepartID">The value for the 'lstDepartID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserAttendForLeave"/> entity instances.</returns>
        public EntityQuery<UserAttendForLeave> IrisGetAttendLeaveForDepartQuery(IEnumerable<int> lstDepartID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("lstDepartID", lstDepartID);
            this.ValidateMethod("IrisGetAttendLeaveForDepartQuery", parameters);
            return base.CreateQuery<UserAttendForLeave>("IrisGetAttendLeaveForDepart", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserAttendRecDetail"/> entity instances using the 'IrisGetAttendRec' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="name">The value for the 'name' parameter of the query.</param>
        /// <param name="workSN">The value for the 'workSN' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserAttendRecDetail"/> entity instances.</returns>
        public EntityQuery<UserAttendRecDetail> IrisGetAttendRecQuery(DateTime beginTime, DateTime endTime, string name, string workSN)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("name", name);
            parameters.Add("workSN", workSN);
            this.ValidateMethod("IrisGetAttendRecQuery", parameters);
            return base.CreateQuery<UserAttendRecDetail>("IrisGetAttendRec", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserAttendRec"/> entity instances using the 'IrisGetAttendRecSign' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIdLst">The value for the 'departIdLst' parameter of the query.</param>
        /// <param name="devTypeIdLst">The value for the 'devTypeIdLst' parameter of the query.</param>
        /// <param name="name">The value for the 'name' parameter of the query.</param>
        /// <param name="workSN">The value for the 'workSN' parameter of the query.</param>
        /// <param name="principalIdList">The value for the 'principalIdList' parameter of the query.</param>
        /// <param name="workTypeIdList">The value for the 'workTypeIdList' parameter of the query.</param>
        /// <param name="workTime">The value for the 'workTime' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserAttendRec"/> entity instances.</returns>
        public EntityQuery<UserAttendRec> IrisGetAttendRecSignQuery(DateTime beginTime, DateTime endTime, IEnumerable<int> departIdLst, IEnumerable<int> devTypeIdLst, string name, string workSN, IEnumerable<int> principalIdList, IEnumerable<int> workTypeIdList, int workTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIdLst", departIdLst);
            parameters.Add("devTypeIdLst", devTypeIdLst);
            parameters.Add("name", name);
            parameters.Add("workSN", workSN);
            parameters.Add("principalIdList", principalIdList);
            parameters.Add("workTypeIdList", workTypeIdList);
            parameters.Add("workTime", workTime);
            this.ValidateMethod("IrisGetAttendRecSignQuery", parameters);
            return base.CreateQuery<UserAttendRec>("IrisGetAttendRecSign", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserAttendRecDetail"/> entity instances using the 'IrisGetAttendSignDetail' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="devTypeIdLst">The value for the 'devTypeIdLst' parameter of the query.</param>
        /// <param name="workTime">The value for the 'workTime' parameter of the query.</param>
        /// <param name="personId">The value for the 'personId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserAttendRecDetail"/> entity instances.</returns>
        public EntityQuery<UserAttendRecDetail> IrisGetAttendSignDetailQuery(DateTime beginTime, DateTime endTime, int[] devTypeIdLst, int workTime, int personId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("devTypeIdLst", devTypeIdLst);
            parameters.Add("workTime", workTime);
            parameters.Add("personId", personId);
            this.ValidateMethod("IrisGetAttendSignDetailQuery", parameters);
            return base.CreateQuery<UserAttendRecDetail>("IrisGetAttendSignDetail", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="depart"/> entity instances using the 'IrisGetDepart' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="depart"/> entity instances.</returns>
        public EntityQuery<depart> IrisGetDepartQuery()
        {
            this.ValidateMethod("IrisGetDepartQuery", null);
            return base.CreateQuery<depart>("IrisGetDepart", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserInWellPerson"/> entity instances using the 'IrisGetInWellPerson' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserInWellPerson"/> entity instances.</returns>
        public EntityQuery<UserInWellPerson> IrisGetInWellPersonQuery()
        {
            this.ValidateMethod("IrisGetInWellPersonQuery", null);
            return base.CreateQuery<UserInWellPerson>("IrisGetInWellPerson", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserInWellPerson"/> entity instances using the 'IrisGetInWellPersonForDepart' query.
        /// </summary>
        /// <param name="lstDepartID">The value for the 'lstDepartID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserInWellPerson"/> entity instances.</returns>
        public EntityQuery<UserInWellPerson> IrisGetInWellPersonForDepartQuery(IEnumerable<int> lstDepartID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("lstDepartID", lstDepartID);
            this.ValidateMethod("IrisGetInWellPersonForDepartQuery", parameters);
            return base.CreateQuery<UserInWellPerson>("IrisGetInWellPersonForDepart", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LeaveType"/> entity instances using the 'IrisGetLeaveType' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LeaveType"/> entity instances.</returns>
        public EntityQuery<LeaveType> IrisGetLeaveTypeQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("IrisGetLeaveTypeQuery", parameters);
            return base.CreateQuery<LeaveType>("IrisGetLeaveType", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonSimple"/> entity instances using the 'IrisGetNeedUserPersonSimple' query.
        /// </summary>
        /// <param name="workSN">The value for the 'workSN' parameter of the query.</param>
        /// <param name="personName">The value for the 'personName' parameter of the query.</param>
        /// <param name="departID">The value for the 'departID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonSimple"/> entity instances.</returns>
        public EntityQuery<UserPersonSimple> IrisGetNeedUserPersonSimpleQuery(string workSN, string personName, int departID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("workSN", workSN);
            parameters.Add("personName", personName);
            parameters.Add("departID", departID);
            this.ValidateMethod("IrisGetNeedUserPersonSimpleQuery", parameters);
            return base.CreateQuery<UserPersonSimple>("IrisGetNeedUserPersonSimple", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonRecogLog"/> entity instances using the 'IrisGetPersonRecog' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="person_id">The value for the 'person_id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonRecogLog"/> entity instances.</returns>
        public EntityQuery<UserPersonRecogLog> IrisGetPersonRecogQuery(DateTime beginTime, DateTime endTime, int person_id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("person_id", person_id);
            this.ValidateMethod("IrisGetPersonRecogQuery", parameters);
            return base.CreateQuery<UserPersonRecogLog>("IrisGetPersonRecog", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonRecogLog"/> entity instances using the 'IrisGetPersonRecogByDevType' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="devTypeIdLst">The value for the 'devTypeIdLst' parameter of the query.</param>
        /// <param name="person_id">The value for the 'person_id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonRecogLog"/> entity instances.</returns>
        public EntityQuery<UserPersonRecogLog> IrisGetPersonRecogByDevTypeQuery(DateTime beginTime, DateTime endTime, int[] devTypeIdLst, int person_id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("devTypeIdLst", devTypeIdLst);
            parameters.Add("person_id", person_id);
            this.ValidateMethod("IrisGetPersonRecogByDevTypeQuery", parameters);
            return base.CreateQuery<UserPersonRecogLog>("IrisGetPersonRecogByDevType", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonSimple"/> entity instances using the 'IrisGetUserPersonSimple' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonSimple"/> entity instances.</returns>
        public EntityQuery<UserPersonSimple> IrisGetUserPersonSimpleQuery()
        {
            this.ValidateMethod("IrisGetUserPersonSimpleQuery", null);
            return base.CreateQuery<UserPersonSimple>("IrisGetUserPersonSimple", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonSimple"/> entity instances using the 'IrisGetUserPersonSimpleForDepart' query.
        /// </summary>
        /// <param name="depart_id">The value for the 'depart_id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonSimple"/> entity instances.</returns>
        public EntityQuery<UserPersonSimple> IrisGetUserPersonSimpleForDepartQuery(int depart_id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("depart_id", depart_id);
            this.ValidateMethod("IrisGetUserPersonSimpleForDepartQuery", parameters);
            return base.CreateQuery<UserPersonSimple>("IrisGetUserPersonSimpleForDepart", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserPersonSimple"/> entity instances using the 'IrisGetUserPersonSimpleForOperatorDepart' query.
        /// </summary>
        /// <param name="lstDepartID">The value for the 'lstDepartID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserPersonSimple"/> entity instances.</returns>
        public EntityQuery<UserPersonSimple> IrisGetUserPersonSimpleForOperatorDepartQuery(IEnumerable<int> lstDepartID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("lstDepartID", lstDepartID);
            this.ValidateMethod("IrisGetUserPersonSimpleForOperatorDepartQuery", parameters);
            return base.CreateQuery<UserPersonSimple>("IrisGetUserPersonSimpleForOperatorDepart", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserAttendRec"/> entity instances using the 'IrisGetZKHBAttendRec' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departName">The value for the 'departName' parameter of the query.</param>
        /// <param name="devTypeIdLst">The value for the 'devTypeIdLst' parameter of the query.</param>
        /// <param name="name">The value for the 'name' parameter of the query.</param>
        /// <param name="workSN">The value for the 'workSN' parameter of the query.</param>
        /// <param name="principalIdList">The value for the 'principalIdList' parameter of the query.</param>
        /// <param name="workTypeIdList">The value for the 'workTypeIdList' parameter of the query.</param>
        /// <param name="workTime">The value for the 'workTime' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserAttendRec"/> entity instances.</returns>
        public EntityQuery<UserAttendRec> IrisGetZKHBAttendRecQuery(DateTime beginTime, DateTime endTime, string[] departName, IEnumerable<int> devTypeIdLst, string name, string workSN, IEnumerable<int> principalIdList, IEnumerable<int> workTypeIdList, int workTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departName", departName);
            parameters.Add("devTypeIdLst", devTypeIdLst);
            parameters.Add("name", name);
            parameters.Add("workSN", workSN);
            parameters.Add("principalIdList", principalIdList);
            parameters.Add("workTypeIdList", workTypeIdList);
            parameters.Add("workTime", workTime);
            this.ValidateMethod("IrisGetZKHBAttendRecQuery", parameters);
            return base.CreateQuery<UserAttendRec>("IrisGetZKHBAttendRec", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="attend_record_base"/> entity instances using the 'IrisTest' query.
        /// </summary>
        /// <param name="SQLstr">The value for the 'SQLstr' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="attend_record_base"/> entity instances.</returns>
        public EntityQuery<attend_record_base> IrisTestQuery(string SQLstr)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("SQLstr", SQLstr);
            this.ValidateMethod("IrisTestQuery", parameters);
            return base.CreateQuery<attend_record_base>("IrisTest", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionInfo"/> entity instances using the 'ModifyClassOrder' query.
        /// </summary>
        /// <param name="class_order_id">The value for the 'class_order_id' parameter of the query.</param>
        /// <param name="class_order_name">The value for the 'class_order_name' parameter of the query.</param>
        /// <param name="attend_sign">The value for the 'attend_sign' parameter of the query.</param>
        /// <param name="class_type_id">The value for the 'class_type_id' parameter of the query.</param>
        /// <param name="attend_off_minutes">The value for the 'attend_off_minutes' parameter of the query.</param>
        /// <param name="in_well_start_time">The value for the 'in_well_start_time' parameter of the query.</param>
        /// <param name="in_well_end_time">The value for the 'in_well_end_time' parameter of the query.</param>
        /// <param name="out_well_start_time">The value for the 'out_well_start_time' parameter of the query.</param>
        /// <param name="out_well_end_time">The value for the 'out_well_end_time' parameter of the query.</param>
        /// <param name="attend_latest_worktime">The value for the 'attend_latest_worktime' parameter of the query.</param>
        /// <param name="attend_max_minutes">The value for the 'attend_max_minutes' parameter of the query.</param>
        /// <param name="Is_workcnt_method_standard">The value for the 'Is_workcnt_method_standard' parameter of the query.</param>
        /// <param name="avail_times">The value for the 'avail_times' parameter of the query.</param>
        /// <param name="work_cnts">The value for the 'work_cnts' parameter of the query.</param>
        /// <param name="avail_time_standard">The value for the 'avail_time_standard' parameter of the query.</param>
        /// <param name="work_cnt_standard">The value for the 'work_cnt_standard' parameter of the query.</param>
        /// <param name="memo">The value for the 'memo' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionInfo"/> entity instances.</returns>
        public EntityQuery<OptionInfo> ModifyClassOrderQuery(
                    string class_order_id, 
                    string class_order_name, 
                    string attend_sign, 
                    string class_type_id, 
                    string attend_off_minutes, 
                    string in_well_start_time, 
                    string in_well_end_time, 
                    string out_well_start_time, 
                    string out_well_end_time, 
                    string attend_latest_worktime, 
                    string attend_max_minutes, 
                    bool Is_workcnt_method_standard, 
                    string[] avail_times, 
                    string[] work_cnts, 
                    string avail_time_standard, 
                    string work_cnt_standard, 
                    string memo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("class_order_id", class_order_id);
            parameters.Add("class_order_name", class_order_name);
            parameters.Add("attend_sign", attend_sign);
            parameters.Add("class_type_id", class_type_id);
            parameters.Add("attend_off_minutes", attend_off_minutes);
            parameters.Add("in_well_start_time", in_well_start_time);
            parameters.Add("in_well_end_time", in_well_end_time);
            parameters.Add("out_well_start_time", out_well_start_time);
            parameters.Add("out_well_end_time", out_well_end_time);
            parameters.Add("attend_latest_worktime", attend_latest_worktime);
            parameters.Add("attend_max_minutes", attend_max_minutes);
            parameters.Add("Is_workcnt_method_standard", Is_workcnt_method_standard);
            parameters.Add("avail_times", avail_times);
            parameters.Add("work_cnts", work_cnts);
            parameters.Add("avail_time_standard", avail_time_standard);
            parameters.Add("work_cnt_standard", work_cnt_standard);
            parameters.Add("memo", memo);
            this.ValidateMethod("ModifyClassOrderQuery", parameters);
            return base.CreateQuery<OptionInfo>("ModifyClassOrder", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionInfo"/> entity instances using the 'ModifyClassType' query.
        /// </summary>
        /// <param name="class_type_id">The value for the 'class_type_id' parameter of the query.</param>
        /// <param name="class_type_name">The value for the 'class_type_name' parameter of the query.</param>
        /// <param name="memo">The value for the 'memo' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionInfo"/> entity instances.</returns>
        public EntityQuery<OptionInfo> ModifyClassTypeQuery(string class_type_id, string class_type_name, string memo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("class_type_id", class_type_id);
            parameters.Add("class_type_name", class_type_name);
            parameters.Add("memo", memo);
            this.ValidateMethod("ModifyClassTypeQuery", parameters);
            return base.CreateQuery<OptionInfo>("ModifyClassType", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="XlsUserAttendRec"/> entity instances using the 'MyGetXlsUserAttendRec' query.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of the query.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of the query.</param>
        /// <param name="departIdLst">The value for the 'departIdLst' parameter of the query.</param>
        /// <param name="ClassTypeId">The value for the 'ClassTypeId' parameter of the query.</param>
        /// <param name="name">The value for the 'name' parameter of the query.</param>
        /// <param name="workSn">The value for the 'workSn' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="XlsUserAttendRec"/> entity instances.</returns>
        public EntityQuery<XlsUserAttendRec> MyGetXlsUserAttendRecQuery(DateTime beginTime, DateTime endTime, int[] departIdLst, int ClassTypeId, string name, string workSn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("departIdLst", departIdLst);
            parameters.Add("ClassTypeId", ClassTypeId);
            parameters.Add("name", name);
            parameters.Add("workSn", workSn);
            this.ValidateMethod("MyGetXlsUserAttendRecQuery", parameters);
            return base.CreateQuery<XlsUserAttendRec>("MyGetXlsUserAttendRec", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionInfo"/> entity instances using the 'UpdatePersonInfoOnMine' query.
        /// </summary>
        /// <param name="person_id">The value for the 'person_id' parameter of the query.</param>
        /// <param name="depart_id">The value for the 'depart_id' parameter of the query.</param>
        /// <param name="class_type_id_on_ground">The value for the 'class_type_id_on_ground' parameter of the query.</param>
        /// <param name="class_type_id">The value for the 'class_type_id' parameter of the query.</param>
        /// <param name="worksn">The value for the 'worksn' parameter of the query.</param>
        /// <param name="name">The value for the 'name' parameter of the query.</param>
        /// <param name="sex">The value for the 'sex' parameter of the query.</param>
        /// <param name="blood_type">The value for the 'blood_type' parameter of the query.</param>
        /// <param name="birthdate">The value for the 'birthdate' parameter of the query.</param>
        /// <param name="workday">The value for the 'workday' parameter of the query.</param>
        /// <param name="id_card">The value for the 'id_card' parameter of the query.</param>
        /// <param name="phone">The value for the 'phone' parameter of the query.</param>
        /// <param name="address">The value for the 'address' parameter of the query.</param>
        /// <param name="zipcode">The value for the 'zipcode' parameter of the query.</param>
        /// <param name="email">The value for the 'email' parameter of the query.</param>
        /// <param name="memo">The value for the 'memo' parameter of the query.</param>
        /// <param name="imgdata">The value for the 'imgdata' parameter of the query.</param>
        /// <param name="imgType">The value for the 'imgType' parameter of the query.</param>
        /// <param name="principal_id">The value for the 'principal_id' parameter of the query.</param>
        /// <param name="work_type_id">The value for the 'work_type_id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionInfo"/> entity instances.</returns>
        public EntityQuery<OptionInfo> UpdatePersonInfoOnMineQuery(
                    int person_id, 
                    string depart_id, 
                    string class_type_id_on_ground, 
                    string class_type_id, 
                    string worksn, 
                    string name, 
                    string sex, 
                    string blood_type, 
                    string birthdate, 
                    string workday, 
                    string id_card, 
                    string phone, 
                    string address, 
                    string zipcode, 
                    string email, 
                    string memo, 
                    byte[] imgdata, 
                    string imgType, 
                    string principal_id, 
                    string work_type_id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("person_id", person_id);
            parameters.Add("depart_id", depart_id);
            parameters.Add("class_type_id_on_ground", class_type_id_on_ground);
            parameters.Add("class_type_id", class_type_id);
            parameters.Add("worksn", worksn);
            parameters.Add("name", name);
            parameters.Add("sex", sex);
            parameters.Add("blood_type", blood_type);
            parameters.Add("birthdate", birthdate);
            parameters.Add("workday", workday);
            parameters.Add("id_card", id_card);
            parameters.Add("phone", phone);
            parameters.Add("address", address);
            parameters.Add("zipcode", zipcode);
            parameters.Add("email", email);
            parameters.Add("memo", memo);
            parameters.Add("imgdata", imgdata);
            parameters.Add("imgType", imgType);
            parameters.Add("principal_id", principal_id);
            parameters.Add("work_type_id", work_type_id);
            this.ValidateMethod("UpdatePersonInfoOnMineQuery", parameters);
            return base.CreateQuery<OptionInfo>("UpdatePersonInfoOnMine", parameters, true, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddClassOrderJiGongShi' method of the DomainService.
        /// </summary>
        /// <param name="userClassOrderJiGongShi">The value for the 'userClassOrderJiGongShi' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> AddClassOrderJiGongShi(UserClassOrderJiGongShiInfo userClassOrderJiGongShi, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userClassOrderJiGongShi", userClassOrderJiGongShi);
            this.ValidateMethod("AddClassOrderJiGongShi", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("AddClassOrderJiGongShi", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddClassOrderJiGongShi' method of the DomainService.
        /// </summary>
        /// <param name="userClassOrderJiGongShi">The value for the 'userClassOrderJiGongShi' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> AddClassOrderJiGongShi(UserClassOrderJiGongShiInfo userClassOrderJiGongShi)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userClassOrderJiGongShi", userClassOrderJiGongShi);
            this.ValidateMethod("AddClassOrderJiGongShi", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("AddClassOrderJiGongShi", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddClassOrderSign' method of the DomainService.
        /// </summary>
        /// <param name="userClassOrerSign">The value for the 'userClassOrerSign' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> AddClassOrderSign(UserClassOrderSignInfo userClassOrerSign, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userClassOrerSign", userClassOrerSign);
            this.ValidateMethod("AddClassOrderSign", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("AddClassOrderSign", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddClassOrderSign' method of the DomainService.
        /// </summary>
        /// <param name="userClassOrerSign">The value for the 'userClassOrerSign' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> AddClassOrderSign(UserClassOrderSignInfo userClassOrerSign)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userClassOrerSign", userClassOrerSign);
            this.ValidateMethod("AddClassOrderSign", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("AddClassOrderSign", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddDepartPotence' method of the DomainService.
        /// </summary>
        /// <param name="operatorName">The value for the 'operatorName' parameter of this action.</param>
        /// <param name="departId">The value for the 'departId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> AddDepartPotence(string operatorName, int departId, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("operatorName", operatorName);
            parameters.Add("departId", departId);
            this.ValidateMethod("AddDepartPotence", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("AddDepartPotence", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddDepartPotence' method of the DomainService.
        /// </summary>
        /// <param name="operatorName">The value for the 'operatorName' parameter of this action.</param>
        /// <param name="departId">The value for the 'departId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> AddDepartPotence(string operatorName, int departId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("operatorName", operatorName);
            parameters.Add("departId", departId);
            this.ValidateMethod("AddDepartPotence", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("AddDepartPotence", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddDevice' method of the DomainService.
        /// </summary>
        /// <param name="deviceSn">The value for the 'deviceSn' parameter of this action.</param>
        /// <param name="place">The value for the 'place' parameter of this action.</param>
        /// <param name="startTimes">The value for the 'startTimes' parameter of this action.</param>
        /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> AddDevice(string deviceSn, string place, string[] startTimes, int[] devTypes, Action<InvokeOperation<byte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("deviceSn", deviceSn);
            parameters.Add("place", place);
            parameters.Add("startTimes", startTimes);
            parameters.Add("devTypes", devTypes);
            this.ValidateMethod("AddDevice", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("AddDevice", typeof(byte), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddDevice' method of the DomainService.
        /// </summary>
        /// <param name="deviceSn">The value for the 'deviceSn' parameter of this action.</param>
        /// <param name="place">The value for the 'place' parameter of this action.</param>
        /// <param name="startTimes">The value for the 'startTimes' parameter of this action.</param>
        /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> AddDevice(string deviceSn, string place, string[] startTimes, int[] devTypes)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("deviceSn", deviceSn);
            parameters.Add("place", place);
            parameters.Add("startTimes", startTimes);
            parameters.Add("devTypes", devTypes);
            this.ValidateMethod("AddDevice", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("AddDevice", typeof(byte), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddDeviceYangMei' method of the DomainService.
        /// </summary>
        /// <param name="deviceSn">The value for the 'deviceSn' parameter of this action.</param>
        /// <param name="place">The value for the 'place' parameter of this action.</param>
        /// <param name="startTimes">The value for the 'startTimes' parameter of this action.</param>
        /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
        /// <param name="devFunction">The value for the 'devFunction' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> AddDeviceYangMei(string deviceSn, string place, string[] startTimes, int[] devTypes, string devFunction, Action<InvokeOperation<byte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("deviceSn", deviceSn);
            parameters.Add("place", place);
            parameters.Add("startTimes", startTimes);
            parameters.Add("devTypes", devTypes);
            parameters.Add("devFunction", devFunction);
            this.ValidateMethod("AddDeviceYangMei", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("AddDeviceYangMei", typeof(byte), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddDeviceYangMei' method of the DomainService.
        /// </summary>
        /// <param name="deviceSn">The value for the 'deviceSn' parameter of this action.</param>
        /// <param name="place">The value for the 'place' parameter of this action.</param>
        /// <param name="startTimes">The value for the 'startTimes' parameter of this action.</param>
        /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
        /// <param name="devFunction">The value for the 'devFunction' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> AddDeviceYangMei(string deviceSn, string place, string[] startTimes, int[] devTypes, string devFunction)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("deviceSn", deviceSn);
            parameters.Add("place", place);
            parameters.Add("startTimes", startTimes);
            parameters.Add("devTypes", devTypes);
            parameters.Add("devFunction", devFunction);
            this.ValidateMethod("AddDeviceYangMei", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("AddDeviceYangMei", typeof(byte), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddFestival' method of the DomainService.
        /// </summary>
        /// <param name="fesval">The value for the 'fesval' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> AddFestival(FestivalInfo fesval, Action<InvokeOperation<byte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fesval", fesval);
            this.ValidateMethod("AddFestival", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("AddFestival", typeof(byte), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddFestival' method of the DomainService.
        /// </summary>
        /// <param name="fesval">The value for the 'fesval' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> AddFestival(FestivalInfo fesval)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fesval", fesval);
            this.ValidateMethod("AddFestival", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("AddFestival", typeof(byte), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddOperator' method of the DomainService.
        /// </summary>
        /// <param name="opInfo">The value for the 'opInfo' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> AddOperator(operator_info opInfo, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("opInfo", opInfo);
            this.ValidateMethod("AddOperator", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("AddOperator", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddOperator' method of the DomainService.
        /// </summary>
        /// <param name="opInfo">The value for the 'opInfo' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> AddOperator(operator_info opInfo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("opInfo", opInfo);
            this.ValidateMethod("AddOperator", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("AddOperator", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddOperatorLog' method of the DomainService.
        /// </summary>
        /// <param name="opLogInfo">The value for the 'opLogInfo' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> AddOperatorLog(UserOperationLog opLogInfo, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("opLogInfo", opLogInfo);
            this.ValidateMethod("AddOperatorLog", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("AddOperatorLog", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddOperatorLog' method of the DomainService.
        /// </summary>
        /// <param name="opLogInfo">The value for the 'opLogInfo' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> AddOperatorLog(UserOperationLog opLogInfo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("opLogInfo", opLogInfo);
            this.ValidateMethod("AddOperatorLog", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("AddOperatorLog", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddPrincipal' method of the DomainService.
        /// </summary>
        /// <param name="principalInfo">The value for the 'principalInfo' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> AddPrincipal(PrincipalInfo principalInfo, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("principalInfo", principalInfo);
            this.ValidateMethod("AddPrincipal", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("AddPrincipal", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddPrincipal' method of the DomainService.
        /// </summary>
        /// <param name="principalInfo">The value for the 'principalInfo' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> AddPrincipal(PrincipalInfo principalInfo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("principalInfo", principalInfo);
            this.ValidateMethod("AddPrincipal", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("AddPrincipal", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddPrincipalType' method of the DomainService.
        /// </summary>
        /// <param name="principalTypeInfo">The value for the 'principalTypeInfo' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> AddPrincipalType(PrincipalTypeInfo principalTypeInfo, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("principalTypeInfo", principalTypeInfo);
            this.ValidateMethod("AddPrincipalType", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("AddPrincipalType", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddPrincipalType' method of the DomainService.
        /// </summary>
        /// <param name="principalTypeInfo">The value for the 'principalTypeInfo' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> AddPrincipalType(PrincipalTypeInfo principalTypeInfo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("principalTypeInfo", principalTypeInfo);
            this.ValidateMethod("AddPrincipalType", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("AddPrincipalType", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddWorkType' method of the DomainService.
        /// </summary>
        /// <param name="workTypeInfo">The value for the 'workTypeInfo' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> AddWorkType(WorkTypeInfo workTypeInfo, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("workTypeInfo", workTypeInfo);
            this.ValidateMethod("AddWorkType", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("AddWorkType", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'AddWorkType' method of the DomainService.
        /// </summary>
        /// <param name="workTypeInfo">The value for the 'workTypeInfo' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> AddWorkType(WorkTypeInfo workTypeInfo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("workTypeInfo", workTypeInfo);
            this.ValidateMethod("AddWorkType", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("AddWorkType", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BatchAddLocateRecord' method of the DomainService.
        /// </summary>
        /// <param name="personIds">The value for the 'personIds' parameter of this action.</param>
        /// <param name="inLocateTimes">The value for the 'inLocateTimes' parameter of this action.</param>
        /// <param name="outLocateTimes">The value for the 'outLocateTimes' parameter of this action.</param>
        /// <param name="attendDays">The value for the 'attendDays' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> BatchAddLocateRecord(int[] personIds, DateTime[] inLocateTimes, DateTime[] outLocateTimes, DateTime[] attendDays, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("personIds", personIds);
            parameters.Add("inLocateTimes", inLocateTimes);
            parameters.Add("outLocateTimes", outLocateTimes);
            parameters.Add("attendDays", attendDays);
            this.ValidateMethod("BatchAddLocateRecord", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("BatchAddLocateRecord", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BatchAddLocateRecord' method of the DomainService.
        /// </summary>
        /// <param name="personIds">The value for the 'personIds' parameter of this action.</param>
        /// <param name="inLocateTimes">The value for the 'inLocateTimes' parameter of this action.</param>
        /// <param name="outLocateTimes">The value for the 'outLocateTimes' parameter of this action.</param>
        /// <param name="attendDays">The value for the 'attendDays' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> BatchAddLocateRecord(int[] personIds, DateTime[] inLocateTimes, DateTime[] outLocateTimes, DateTime[] attendDays)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("personIds", personIds);
            parameters.Add("inLocateTimes", inLocateTimes);
            parameters.Add("outLocateTimes", outLocateTimes);
            parameters.Add("attendDays", attendDays);
            this.ValidateMethod("BatchAddLocateRecord", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("BatchAddLocateRecord", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BatchDeleteDevice' method of the DomainService.
        /// </summary>
        /// <param name="deviceIds">The value for the 'deviceIds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> BatchDeleteDevice(string[] deviceIds, Action<InvokeOperation<byte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("deviceIds", deviceIds);
            this.ValidateMethod("BatchDeleteDevice", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("BatchDeleteDevice", typeof(byte), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BatchDeleteDevice' method of the DomainService.
        /// </summary>
        /// <param name="deviceIds">The value for the 'deviceIds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> BatchDeleteDevice(string[] deviceIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("deviceIds", deviceIds);
            this.ValidateMethod("BatchDeleteDevice", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("BatchDeleteDevice", typeof(byte), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BatchDeleteFestival' method of the DomainService.
        /// </summary>
        /// <param name="festivalIds">The value for the 'festivalIds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> BatchDeleteFestival(int[] festivalIds, Action<InvokeOperation<byte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("festivalIds", festivalIds);
            this.ValidateMethod("BatchDeleteFestival", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("BatchDeleteFestival", typeof(byte), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BatchDeleteFestival' method of the DomainService.
        /// </summary>
        /// <param name="festivalIds">The value for the 'festivalIds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> BatchDeleteFestival(int[] festivalIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("festivalIds", festivalIds);
            this.ValidateMethod("BatchDeleteFestival", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("BatchDeleteFestival", typeof(byte), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BatchDeleteLocateRecord' method of the DomainService.
        /// </summary>
        /// <param name="rocordIds">The value for the 'rocordIds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> BatchDeleteLocateRecord(int[] rocordIds, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("rocordIds", rocordIds);
            this.ValidateMethod("BatchDeleteLocateRecord", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("BatchDeleteLocateRecord", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BatchDeleteLocateRecord' method of the DomainService.
        /// </summary>
        /// <param name="rocordIds">The value for the 'rocordIds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> BatchDeleteLocateRecord(int[] rocordIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("rocordIds", rocordIds);
            this.ValidateMethod("BatchDeleteLocateRecord", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("BatchDeleteLocateRecord", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BatchDeletePerson' method of the DomainService.
        /// </summary>
        /// <param name="person_ids">The value for the 'person_ids' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> BatchDeletePerson(int[] person_ids, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("person_ids", person_ids);
            this.ValidateMethod("BatchDeletePerson", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("BatchDeletePerson", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BatchDeletePerson' method of the DomainService.
        /// </summary>
        /// <param name="person_ids">The value for the 'person_ids' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> BatchDeletePerson(int[] person_ids)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("person_ids", person_ids);
            this.ValidateMethod("BatchDeletePerson", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("BatchDeletePerson", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BatchModifyDevice' method of the DomainService.
        /// </summary>
        /// <param name="devInfos">The value for the 'devInfos' parameter of this action.</param>
        /// <param name="startTimes">The value for the 'startTimes' parameter of this action.</param>
        /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> BatchModifyDevice(DeviceInfo[] devInfos, string[] startTimes, int[] devTypes, Action<InvokeOperation<byte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("devInfos", devInfos);
            parameters.Add("startTimes", startTimes);
            parameters.Add("devTypes", devTypes);
            this.ValidateMethod("BatchModifyDevice", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("BatchModifyDevice", typeof(byte), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BatchModifyDevice' method of the DomainService.
        /// </summary>
        /// <param name="devInfos">The value for the 'devInfos' parameter of this action.</param>
        /// <param name="startTimes">The value for the 'startTimes' parameter of this action.</param>
        /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> BatchModifyDevice(DeviceInfo[] devInfos, string[] startTimes, int[] devTypes)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("devInfos", devInfos);
            parameters.Add("startTimes", startTimes);
            parameters.Add("devTypes", devTypes);
            this.ValidateMethod("BatchModifyDevice", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("BatchModifyDevice", typeof(byte), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BatchModifyPersons' method of the DomainService.
        /// </summary>
        /// <param name="personIDs">The value for the 'personIDs' parameter of this action.</param>
        /// <param name="depart_id">The value for the 'depart_id' parameter of this action.</param>
        /// <param name="class_type_id_on_ground">The value for the 'class_type_id_on_ground' parameter of this action.</param>
        /// <param name="class_type_id_on_mine">The value for the 'class_type_id_on_mine' parameter of this action.</param>
        /// <param name="principalId">The value for the 'principalId' parameter of this action.</param>
        /// <param name="workTypeId">The value for the 'workTypeId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> BatchModifyPersons(int[] personIDs, int depart_id, int class_type_id_on_ground, int class_type_id_on_mine, int principalId, int workTypeId, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("personIDs", personIDs);
            parameters.Add("depart_id", depart_id);
            parameters.Add("class_type_id_on_ground", class_type_id_on_ground);
            parameters.Add("class_type_id_on_mine", class_type_id_on_mine);
            parameters.Add("principalId", principalId);
            parameters.Add("workTypeId", workTypeId);
            this.ValidateMethod("BatchModifyPersons", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("BatchModifyPersons", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BatchModifyPersons' method of the DomainService.
        /// </summary>
        /// <param name="personIDs">The value for the 'personIDs' parameter of this action.</param>
        /// <param name="depart_id">The value for the 'depart_id' parameter of this action.</param>
        /// <param name="class_type_id_on_ground">The value for the 'class_type_id_on_ground' parameter of this action.</param>
        /// <param name="class_type_id_on_mine">The value for the 'class_type_id_on_mine' parameter of this action.</param>
        /// <param name="principalId">The value for the 'principalId' parameter of this action.</param>
        /// <param name="workTypeId">The value for the 'workTypeId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> BatchModifyPersons(int[] personIDs, int depart_id, int class_type_id_on_ground, int class_type_id_on_mine, int principalId, int workTypeId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("personIDs", personIDs);
            parameters.Add("depart_id", depart_id);
            parameters.Add("class_type_id_on_ground", class_type_id_on_ground);
            parameters.Add("class_type_id_on_mine", class_type_id_on_mine);
            parameters.Add("principalId", principalId);
            parameters.Add("workTypeId", workTypeId);
            this.ValidateMethod("BatchModifyPersons", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("BatchModifyPersons", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CancelSyncPerson' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation CancelSyncPerson(Action<InvokeOperation> callback, object userState)
        {
            this.ValidateMethod("CancelSyncPerson", null);
            return this.InvokeOperation("CancelSyncPerson", typeof(void), null, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CancelSyncPerson' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation CancelSyncPerson()
        {
            this.ValidateMethod("CancelSyncPerson", null);
            return this.InvokeOperation("CancelSyncPerson", typeof(void), null, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CheckTableName' method of the DomainService.
        /// </summary>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <param name="sqlControl">The value for the 'sqlControl' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> CheckTableName(string TableName, SqlControl sqlControl, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("TableName", TableName);
            parameters.Add("sqlControl", sqlControl);
            this.ValidateMethod("CheckTableName", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("CheckTableName", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CheckTableName' method of the DomainService.
        /// </summary>
        /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
        /// <param name="sqlControl">The value for the 'sqlControl' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> CheckTableName(string TableName, SqlControl sqlControl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("TableName", TableName);
            parameters.Add("sqlControl", sqlControl);
            this.ValidateMethod("CheckTableName", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("CheckTableName", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CloseDataBase' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> CloseDataBase(Action<InvokeOperation<bool>> callback, object userState)
        {
            this.ValidateMethod("CloseDataBase", null);
            return ((InvokeOperation<bool>)(this.InvokeOperation("CloseDataBase", typeof(bool), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CloseDataBase' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> CloseDataBase()
        {
            this.ValidateMethod("CloseDataBase", null);
            return ((InvokeOperation<bool>)(this.InvokeOperation("CloseDataBase", typeof(bool), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CompOldMD5AndModifyPwd' method of the DomainService.
        /// </summary>
        /// <param name="oldPwdMD5">The value for the 'oldPwdMD5' parameter of this action.</param>
        /// <param name="inputPwd">The value for the 'inputPwd' parameter of this action.</param>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="newPwd">The value for the 'newPwd' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> CompOldMD5AndModifyPwd(string oldPwdMD5, string inputPwd, string userName, string newPwd, Action<InvokeOperation<byte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("oldPwdMD5", oldPwdMD5);
            parameters.Add("inputPwd", inputPwd);
            parameters.Add("userName", userName);
            parameters.Add("newPwd", newPwd);
            this.ValidateMethod("CompOldMD5AndModifyPwd", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("CompOldMD5AndModifyPwd", typeof(byte), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CompOldMD5AndModifyPwd' method of the DomainService.
        /// </summary>
        /// <param name="oldPwdMD5">The value for the 'oldPwdMD5' parameter of this action.</param>
        /// <param name="inputPwd">The value for the 'inputPwd' parameter of this action.</param>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="newPwd">The value for the 'newPwd' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> CompOldMD5AndModifyPwd(string oldPwdMD5, string inputPwd, string userName, string newPwd)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("oldPwdMD5", oldPwdMD5);
            parameters.Add("inputPwd", inputPwd);
            parameters.Add("userName", userName);
            parameters.Add("newPwd", newPwd);
            this.ValidateMethod("CompOldMD5AndModifyPwd", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("CompOldMD5AndModifyPwd", typeof(byte), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateReportRecord' method of the DomainService.
        /// </summary>
        /// <param name="infos">The value for the 'infos' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> CreateReportRecord(ReportRecordInfoOnDepart_ZhouYuanShan[] infos, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("infos", infos);
            this.ValidateMethod("CreateReportRecord", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("CreateReportRecord", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateReportRecord' method of the DomainService.
        /// </summary>
        /// <param name="infos">The value for the 'infos' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> CreateReportRecord(ReportRecordInfoOnDepart_ZhouYuanShan[] infos)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("infos", infos);
            this.ValidateMethod("CreateReportRecord", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("CreateReportRecord", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DelAllStopIrisRecords' method of the DomainService.
        /// </summary>
        /// <param name="perosnIDs">The value for the 'perosnIDs' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> DelAllStopIrisRecords(int[] perosnIDs, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("perosnIDs", perosnIDs);
            this.ValidateMethod("DelAllStopIrisRecords", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("DelAllStopIrisRecords", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DelAllStopIrisRecords' method of the DomainService.
        /// </summary>
        /// <param name="perosnIDs">The value for the 'perosnIDs' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> DelAllStopIrisRecords(int[] perosnIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("perosnIDs", perosnIDs);
            this.ValidateMethod("DelAllStopIrisRecords", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("DelAllStopIrisRecords", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteOperator' method of the DomainService.
        /// </summary>
        /// <param name="logName">The value for the 'logName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> DeleteOperator(string logName, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("logName", logName);
            this.ValidateMethod("DeleteOperator", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("DeleteOperator", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteOperator' method of the DomainService.
        /// </summary>
        /// <param name="logName">The value for the 'logName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> DeleteOperator(string logName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("logName", logName);
            this.ValidateMethod("DeleteOperator", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("DeleteOperator", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteOperatorLog' method of the DomainService.
        /// </summary>
        /// <param name="opLogInfo">The value for the 'opLogInfo' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> DeleteOperatorLog(UserOperationLog opLogInfo, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("opLogInfo", opLogInfo);
            this.ValidateMethod("DeleteOperatorLog", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("DeleteOperatorLog", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteOperatorLog' method of the DomainService.
        /// </summary>
        /// <param name="opLogInfo">The value for the 'opLogInfo' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> DeleteOperatorLog(UserOperationLog opLogInfo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("opLogInfo", opLogInfo);
            this.ValidateMethod("DeleteOperatorLog", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("DeleteOperatorLog", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeletePrincipal' method of the DomainService.
        /// </summary>
        /// <param name="principalIds">The value for the 'principalIds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> DeletePrincipal(int[] principalIds, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("principalIds", principalIds);
            this.ValidateMethod("DeletePrincipal", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("DeletePrincipal", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeletePrincipal' method of the DomainService.
        /// </summary>
        /// <param name="principalIds">The value for the 'principalIds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> DeletePrincipal(int[] principalIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("principalIds", principalIds);
            this.ValidateMethod("DeletePrincipal", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("DeletePrincipal", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeletePrincipalType' method of the DomainService.
        /// </summary>
        /// <param name="ids">The value for the 'ids' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> DeletePrincipalType(int[] ids, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ids", ids);
            this.ValidateMethod("DeletePrincipalType", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("DeletePrincipalType", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeletePrincipalType' method of the DomainService.
        /// </summary>
        /// <param name="ids">The value for the 'ids' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> DeletePrincipalType(int[] ids)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ids", ids);
            this.ValidateMethod("DeletePrincipalType", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("DeletePrincipalType", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteWorkType' method of the DomainService.
        /// </summary>
        /// <param name="workTypeIds">The value for the 'workTypeIds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> DeleteWorkType(int[] workTypeIds, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("workTypeIds", workTypeIds);
            this.ValidateMethod("DeleteWorkType", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("DeleteWorkType", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteWorkType' method of the DomainService.
        /// </summary>
        /// <param name="workTypeIds">The value for the 'workTypeIds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> DeleteWorkType(int[] workTypeIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("workTypeIds", workTypeIds);
            this.ValidateMethod("DeleteWorkType", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("DeleteWorkType", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetApplicationType' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetApplicationType(Action<InvokeOperation<string>> callback, object userState)
        {
            this.ValidateMethod("GetApplicationType", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetApplicationType", typeof(string), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetApplicationType' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetApplicationType()
        {
            this.ValidateMethod("GetApplicationType", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetApplicationType", typeof(string), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetAttendSignal' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Dictionary<string, string>> GetAttendSignal(Action<InvokeOperation<Dictionary<string, string>>> callback, object userState)
        {
            this.ValidateMethod("GetAttendSignal", null);
            return ((InvokeOperation<Dictionary<string, string>>)(this.InvokeOperation("GetAttendSignal", typeof(Dictionary<string, string>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetAttendSignal' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Dictionary<string, string>> GetAttendSignal()
        {
            this.ValidateMethod("GetAttendSignal", null);
            return ((InvokeOperation<Dictionary<string, string>>)(this.InvokeOperation("GetAttendSignal", typeof(Dictionary<string, string>), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetBackupServerIP' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetBackupServerIP(Action<InvokeOperation<string>> callback, object userState)
        {
            this.ValidateMethod("GetBackupServerIP", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetBackupServerIP", typeof(string), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetBackupServerIP' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetBackupServerIP()
        {
            this.ValidateMethod("GetBackupServerIP", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetBackupServerIP", typeof(string), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetBackupServerPort' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetBackupServerPort(Action<InvokeOperation<string>> callback, object userState)
        {
            this.ValidateMethod("GetBackupServerPort", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetBackupServerPort", typeof(string), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetBackupServerPort' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetBackupServerPort()
        {
            this.ValidateMethod("GetBackupServerPort", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetBackupServerPort", typeof(string), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetClassTimesList' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<ClassOrderTimes>> GetClassTimesList(Action<InvokeOperation<List<ClassOrderTimes>>> callback, object userState)
        {
            this.ValidateMethod("GetClassTimesList", null);
            return ((InvokeOperation<List<ClassOrderTimes>>)(this.InvokeOperation("GetClassTimesList", typeof(List<ClassOrderTimes>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetClassTimesList' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<ClassOrderTimes>> GetClassTimesList()
        {
            this.ValidateMethod("GetClassTimesList", null);
            return ((InvokeOperation<List<ClassOrderTimes>>)(this.InvokeOperation("GetClassTimesList", typeof(List<ClassOrderTimes>), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetClientIP' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetClientIP(Action<InvokeOperation<string>> callback, object userState)
        {
            this.ValidateMethod("GetClientIP", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetClientIP", typeof(string), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetClientIP' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetClientIP()
        {
            this.ValidateMethod("GetClientIP", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetClientIP", typeof(string), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetIsMineApp' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> GetIsMineApp(Action<InvokeOperation<bool>> callback, object userState)
        {
            this.ValidateMethod("GetIsMineApp", null);
            return ((InvokeOperation<bool>)(this.InvokeOperation("GetIsMineApp", typeof(bool), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetIsMineApp' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> GetIsMineApp()
        {
            this.ValidateMethod("GetIsMineApp", null);
            return ((InvokeOperation<bool>)(this.InvokeOperation("GetIsMineApp", typeof(bool), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetIsShowRecogType' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetIsShowRecogType(Action<InvokeOperation<int>> callback, object userState)
        {
            this.ValidateMethod("GetIsShowRecogType", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetIsShowRecogType", typeof(int), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetIsShowRecogType' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetIsShowRecogType()
        {
            this.ValidateMethod("GetIsShowRecogType", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetIsShowRecogType", typeof(int), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetIsSupportClassOrderSign' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetIsSupportClassOrderSign(Action<InvokeOperation<int>> callback, object userState)
        {
            this.ValidateMethod("GetIsSupportClassOrderSign", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetIsSupportClassOrderSign", typeof(int), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetIsSupportClassOrderSign' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetIsSupportClassOrderSign()
        {
            this.ValidateMethod("GetIsSupportClassOrderSign", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetIsSupportClassOrderSign", typeof(int), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetMD5String' method of the DomainService.
        /// </summary>
        /// <param name="inputStr">The value for the 'inputStr' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetMD5String(string inputStr, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("inputStr", inputStr);
            this.ValidateMethod("GetMD5String", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetMD5String", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetMD5String' method of the DomainService.
        /// </summary>
        /// <param name="inputStr">The value for the 'inputStr' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetMD5String(string inputStr)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("inputStr", inputStr);
            this.ValidateMethod("GetMD5String", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetMD5String", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetOverTime' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetOverTime(Action<InvokeOperation<int>> callback, object userState)
        {
            this.ValidateMethod("GetOverTime", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetOverTime", typeof(int), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetOverTime' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetOverTime()
        {
            this.ValidateMethod("GetOverTime", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetOverTime", typeof(int), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetPassword' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetPassword(string userName, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            this.ValidateMethod("GetPassword", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetPassword", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetPassword' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetPassword(string userName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            this.ValidateMethod("GetPassword", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetPassword", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSyncLocateState' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetSyncLocateState(Action<InvokeOperation<int>> callback, object userState)
        {
            this.ValidateMethod("GetSyncLocateState", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetSyncLocateState", typeof(int), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSyncLocateState' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetSyncLocateState()
        {
            this.ValidateMethod("GetSyncLocateState", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetSyncLocateState", typeof(int), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InsertOrUpdateLeaveType' method of the DomainService.
        /// </summary>
        /// <param name="leaveType">The value for the 'leaveType' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> InsertOrUpdateLeaveType(LeaveType leaveType, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("leaveType", leaveType);
            this.ValidateMethod("InsertOrUpdateLeaveType", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("InsertOrUpdateLeaveType", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InsertOrUpdateLeaveType' method of the DomainService.
        /// </summary>
        /// <param name="leaveType">The value for the 'leaveType' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> InsertOrUpdateLeaveType(LeaveType leaveType)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("leaveType", leaveType);
            this.ValidateMethod("InsertOrUpdateLeaveType", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("InsertOrUpdateLeaveType", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisBatchInsertRecogLog' method of the DomainService.
        /// </summary>
        /// <param name="personIds">The value for the 'personIds' parameter of this action.</param>
        /// <param name="recog">The value for the 'recog' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisBatchInsertRecogLog(int[] personIds, UserPersonRecogLog recog, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("personIds", personIds);
            parameters.Add("recog", recog);
            this.ValidateMethod("IrisBatchInsertRecogLog", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisBatchInsertRecogLog", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisBatchInsertRecogLog' method of the DomainService.
        /// </summary>
        /// <param name="personIds">The value for the 'personIds' parameter of this action.</param>
        /// <param name="recog">The value for the 'recog' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisBatchInsertRecogLog(int[] personIds, UserPersonRecogLog recog)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("personIds", personIds);
            parameters.Add("recog", recog);
            this.ValidateMethod("IrisBatchInsertRecogLog", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisBatchInsertRecogLog", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisBatchInsertRecogLog_WuHuShan' method of the DomainService.
        /// </summary>
        /// <param name="personIds">The value for the 'personIds' parameter of this action.</param>
        /// <param name="recogTimes">The value for the 'recogTimes' parameter of this action.</param>
        /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
        /// <param name="operatorName">The value for the 'operatorName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisBatchInsertRecogLog_WuHuShan(int[] personIds, DateTime[] recogTimes, int[] devTypes, string operatorName, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("personIds", personIds);
            parameters.Add("recogTimes", recogTimes);
            parameters.Add("devTypes", devTypes);
            parameters.Add("operatorName", operatorName);
            this.ValidateMethod("IrisBatchInsertRecogLog_WuHuShan", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisBatchInsertRecogLog_WuHuShan", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisBatchInsertRecogLog_WuHuShan' method of the DomainService.
        /// </summary>
        /// <param name="personIds">The value for the 'personIds' parameter of this action.</param>
        /// <param name="recogTimes">The value for the 'recogTimes' parameter of this action.</param>
        /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
        /// <param name="operatorName">The value for the 'operatorName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisBatchInsertRecogLog_WuHuShan(int[] personIds, DateTime[] recogTimes, int[] devTypes, string operatorName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("personIds", personIds);
            parameters.Add("recogTimes", recogTimes);
            parameters.Add("devTypes", devTypes);
            parameters.Add("operatorName", operatorName);
            this.ValidateMethod("IrisBatchInsertRecogLog_WuHuShan", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisBatchInsertRecogLog_WuHuShan", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisContinueInsertUserAttendForLeave' method of the DomainService.
        /// </summary>
        /// <param name="attendForLeave">The value for the 'attendForLeave' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IrisContinueInsertUserAttendForLeave(List<UserAttendForLeave> attendForLeave, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("attendForLeave", attendForLeave);
            this.ValidateMethod("IrisContinueInsertUserAttendForLeave", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IrisContinueInsertUserAttendForLeave", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisContinueInsertUserAttendForLeave' method of the DomainService.
        /// </summary>
        /// <param name="attendForLeave">The value for the 'attendForLeave' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IrisContinueInsertUserAttendForLeave(List<UserAttendForLeave> attendForLeave)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("attendForLeave", attendForLeave);
            this.ValidateMethod("IrisContinueInsertUserAttendForLeave", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IrisContinueInsertUserAttendForLeave", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisDeleteLeaveType' method of the DomainService.
        /// </summary>
        /// <param name="leaveTypeIds">The value for the 'leaveTypeIds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IrisDeleteLeaveType(int[] leaveTypeIds, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("leaveTypeIds", leaveTypeIds);
            this.ValidateMethod("IrisDeleteLeaveType", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IrisDeleteLeaveType", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisDeleteLeaveType' method of the DomainService.
        /// </summary>
        /// <param name="leaveTypeIds">The value for the 'leaveTypeIds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IrisDeleteLeaveType(int[] leaveTypeIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("leaveTypeIds", leaveTypeIds);
            this.ValidateMethod("IrisDeleteLeaveType", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IrisDeleteLeaveType", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisDeleteUserAttendForLeave' method of the DomainService.
        /// </summary>
        /// <param name="attend_for_leave_id">The value for the 'attend_for_leave_id' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IrisDeleteUserAttendForLeave(int attend_for_leave_id, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("attend_for_leave_id", attend_for_leave_id);
            this.ValidateMethod("IrisDeleteUserAttendForLeave", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IrisDeleteUserAttendForLeave", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisDeleteUserAttendForLeave' method of the DomainService.
        /// </summary>
        /// <param name="attend_for_leave_id">The value for the 'attend_for_leave_id' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IrisDeleteUserAttendForLeave(int attend_for_leave_id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("attend_for_leave_id", attend_for_leave_id);
            this.ValidateMethod("IrisDeleteUserAttendForLeave", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IrisDeleteUserAttendForLeave", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisDeleteUserPersonRecogLog' method of the DomainService.
        /// </summary>
        /// <param name="recog">The value for the 'recog' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisDeleteUserPersonRecogLog(UserPersonRecogLog recog, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("recog", recog);
            this.ValidateMethod("IrisDeleteUserPersonRecogLog", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisDeleteUserPersonRecogLog", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisDeleteUserPersonRecogLog' method of the DomainService.
        /// </summary>
        /// <param name="recog">The value for the 'recog' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisDeleteUserPersonRecogLog(UserPersonRecogLog recog)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("recog", recog);
            this.ValidateMethod("IrisDeleteUserPersonRecogLog", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisDeleteUserPersonRecogLog", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisDeleteUserPersonRecogLogsForIDS' method of the DomainService.
        /// </summary>
        /// <param name="recogIds">The value for the 'recogIds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisDeleteUserPersonRecogLogsForIDS(int[] recogIds, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("recogIds", recogIds);
            this.ValidateMethod("IrisDeleteUserPersonRecogLogsForIDS", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisDeleteUserPersonRecogLogsForIDS", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisDeleteUserPersonRecogLogsForIDS' method of the DomainService.
        /// </summary>
        /// <param name="recogIds">The value for the 'recogIds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisDeleteUserPersonRecogLogsForIDS(int[] recogIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("recogIds", recogIds);
            this.ValidateMethod("IrisDeleteUserPersonRecogLogsForIDS", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisDeleteUserPersonRecogLogsForIDS", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisGetError' method of the DomainService.
        /// </summary>
        /// <param name="errorId">The value for the 'errorId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> IrisGetError(int errorId, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("errorId", errorId);
            this.ValidateMethod("IrisGetError", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("IrisGetError", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisGetError' method of the DomainService.
        /// </summary>
        /// <param name="errorId">The value for the 'errorId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> IrisGetError(int errorId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("errorId", errorId);
            this.ValidateMethod("IrisGetError", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("IrisGetError", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisGetPersonSum' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisGetPersonSum(Action<InvokeOperation<int>> callback, object userState)
        {
            this.ValidateMethod("IrisGetPersonSum", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisGetPersonSum", typeof(int), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisGetPersonSum' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisGetPersonSum()
        {
            this.ValidateMethod("IrisGetPersonSum", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisGetPersonSum", typeof(int), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisGetUserPersonSimpleForWorkSN' method of the DomainService.
        /// </summary>
        /// <param name="work_sn">The value for the 'work_sn' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<UserPersonSimple> IrisGetUserPersonSimpleForWorkSN(string work_sn, Action<InvokeOperation<UserPersonSimple>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("work_sn", work_sn);
            this.ValidateMethod("IrisGetUserPersonSimpleForWorkSN", parameters);
            return ((InvokeOperation<UserPersonSimple>)(this.InvokeOperation("IrisGetUserPersonSimpleForWorkSN", typeof(UserPersonSimple), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisGetUserPersonSimpleForWorkSN' method of the DomainService.
        /// </summary>
        /// <param name="work_sn">The value for the 'work_sn' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<UserPersonSimple> IrisGetUserPersonSimpleForWorkSN(string work_sn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("work_sn", work_sn);
            this.ValidateMethod("IrisGetUserPersonSimpleForWorkSN", parameters);
            return ((InvokeOperation<UserPersonSimple>)(this.InvokeOperation("IrisGetUserPersonSimpleForWorkSN", typeof(UserPersonSimple), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisInsertUserPersonRecogLog' method of the DomainService.
        /// </summary>
        /// <param name="recog">The value for the 'recog' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisInsertUserPersonRecogLog(UserPersonRecogLog recog, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("recog", recog);
            this.ValidateMethod("IrisInsertUserPersonRecogLog", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisInsertUserPersonRecogLog", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisInsertUserPersonRecogLog' method of the DomainService.
        /// </summary>
        /// <param name="recog">The value for the 'recog' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisInsertUserPersonRecogLog(UserPersonRecogLog recog)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("recog", recog);
            this.ValidateMethod("IrisInsertUserPersonRecogLog", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisInsertUserPersonRecogLog", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisInsertUserPersonRecogLogForOverInWell' method of the DomainService.
        /// </summary>
        /// <param name="personID">The value for the 'personID' parameter of this action.</param>
        /// <param name="dt">The value for the 'dt' parameter of this action.</param>
        /// <param name="devType">The value for the 'devType' parameter of this action.</param>
        /// <param name="remarks">The value for the 'remarks' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisInsertUserPersonRecogLogForOverInWell(int[] personID, DateTime[] dt, int[] devType, string remarks, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("personID", personID);
            parameters.Add("dt", dt);
            parameters.Add("devType", devType);
            parameters.Add("remarks", remarks);
            this.ValidateMethod("IrisInsertUserPersonRecogLogForOverInWell", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisInsertUserPersonRecogLogForOverInWell", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisInsertUserPersonRecogLogForOverInWell' method of the DomainService.
        /// </summary>
        /// <param name="personID">The value for the 'personID' parameter of this action.</param>
        /// <param name="dt">The value for the 'dt' parameter of this action.</param>
        /// <param name="devType">The value for the 'devType' parameter of this action.</param>
        /// <param name="remarks">The value for the 'remarks' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisInsertUserPersonRecogLogForOverInWell(int[] personID, DateTime[] dt, int[] devType, string remarks)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("personID", personID);
            parameters.Add("dt", dt);
            parameters.Add("devType", devType);
            parameters.Add("remarks", remarks);
            this.ValidateMethod("IrisInsertUserPersonRecogLogForOverInWell", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisInsertUserPersonRecogLogForOverInWell", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisInsetOrUpdateUserAttendForLeave' method of the DomainService.
        /// </summary>
        /// <param name="attendForLeave">The value for the 'attendForLeave' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IrisInsetOrUpdateUserAttendForLeave(UserAttendForLeave attendForLeave, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("attendForLeave", attendForLeave);
            this.ValidateMethod("IrisInsetOrUpdateUserAttendForLeave", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IrisInsetOrUpdateUserAttendForLeave", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisInsetOrUpdateUserAttendForLeave' method of the DomainService.
        /// </summary>
        /// <param name="attendForLeave">The value for the 'attendForLeave' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IrisInsetOrUpdateUserAttendForLeave(UserAttendForLeave attendForLeave)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("attendForLeave", attendForLeave);
            this.ValidateMethod("IrisInsetOrUpdateUserAttendForLeave", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IrisInsetOrUpdateUserAttendForLeave", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisRebuildAttend' method of the DomainService.
        /// </summary>
        /// <param name="beginDate">The value for the 'beginDate' parameter of this action.</param>
        /// <param name="person_ids">The value for the 'person_ids' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisRebuildAttend(DateTime beginDate, int[] person_ids, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginDate", beginDate);
            parameters.Add("person_ids", person_ids);
            this.ValidateMethod("IrisRebuildAttend", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisRebuildAttend", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisRebuildAttend' method of the DomainService.
        /// </summary>
        /// <param name="beginDate">The value for the 'beginDate' parameter of this action.</param>
        /// <param name="person_ids">The value for the 'person_ids' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisRebuildAttend(DateTime beginDate, int[] person_ids)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginDate", beginDate);
            parameters.Add("person_ids", person_ids);
            this.ValidateMethod("IrisRebuildAttend", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisRebuildAttend", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisRebuildAttendPart' method of the DomainService.
        /// </summary>
        /// <param name="beginDate">The value for the 'beginDate' parameter of this action.</param>
        /// <param name="offset">The value for the 'offset' parameter of this action.</param>
        /// <param name="count">The value for the 'count' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisRebuildAttendPart(DateTime beginDate, int offset, int count, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginDate", beginDate);
            parameters.Add("offset", offset);
            parameters.Add("count", count);
            this.ValidateMethod("IrisRebuildAttendPart", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisRebuildAttendPart", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisRebuildAttendPart' method of the DomainService.
        /// </summary>
        /// <param name="beginDate">The value for the 'beginDate' parameter of this action.</param>
        /// <param name="offset">The value for the 'offset' parameter of this action.</param>
        /// <param name="count">The value for the 'count' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IrisRebuildAttendPart(DateTime beginDate, int offset, int count)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginDate", beginDate);
            parameters.Add("offset", offset);
            parameters.Add("count", count);
            this.ValidateMethod("IrisRebuildAttendPart", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IrisRebuildAttendPart", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisUpdateUserAttendForLeave' method of the DomainService.
        /// </summary>
        /// <param name="attendForLeave">The value for the 'attendForLeave' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IrisUpdateUserAttendForLeave(UserAttendForLeave attendForLeave, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("attendForLeave", attendForLeave);
            this.ValidateMethod("IrisUpdateUserAttendForLeave", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IrisUpdateUserAttendForLeave", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IrisUpdateUserAttendForLeave' method of the DomainService.
        /// </summary>
        /// <param name="attendForLeave">The value for the 'attendForLeave' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IrisUpdateUserAttendForLeave(UserAttendForLeave attendForLeave)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("attendForLeave", attendForLeave);
            this.ValidateMethod("IrisUpdateUserAttendForLeave", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IrisUpdateUserAttendForLeave", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IsDeviceExist' method of the DomainService.
        /// </summary>
        /// <param name="devSn">The value for the 'devSn' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IsDeviceExist(string devSn, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("devSn", devSn);
            this.ValidateMethod("IsDeviceExist", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IsDeviceExist", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IsDeviceExist' method of the DomainService.
        /// </summary>
        /// <param name="devSn">The value for the 'devSn' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IsDeviceExist(string devSn)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("devSn", devSn);
            this.ValidateMethod("IsDeviceExist", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IsDeviceExist", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IsFestivalExist' method of the DomainService.
        /// </summary>
        /// <param name="fesval">The value for the 'fesval' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IsFestivalExist(FestivalInfo fesval, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fesval", fesval);
            this.ValidateMethod("IsFestivalExist", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IsFestivalExist", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IsFestivalExist' method of the DomainService.
        /// </summary>
        /// <param name="fesval">The value for the 'fesval' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IsFestivalExist(FestivalInfo fesval)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fesval", fesval);
            this.ValidateMethod("IsFestivalExist", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IsFestivalExist", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IsOperatorExist' method of the DomainService.
        /// </summary>
        /// <param name="logName">The value for the 'logName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IsOperatorExist(string logName, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("logName", logName);
            this.ValidateMethod("IsOperatorExist", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IsOperatorExist", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IsOperatorExist' method of the DomainService.
        /// </summary>
        /// <param name="logName">The value for the 'logName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> IsOperatorExist(string logName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("logName", logName);
            this.ValidateMethod("IsOperatorExist", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("IsOperatorExist", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IsPasswordOk' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IsPasswordOk(string userName, string password, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            this.ValidateMethod("IsPasswordOk", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IsPasswordOk", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'IsPasswordOk' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> IsPasswordOk(string userName, string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            this.ValidateMethod("IsPasswordOk", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("IsPasswordOk", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'JudgeTimeIsExist' method of the DomainService.
        /// </summary>
        /// <param name="personIDs">The value for the 'personIDs' parameter of this action.</param>
        /// <param name="startTime">The value for the 'startTime' parameter of this action.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> JudgeTimeIsExist(int[] personIDs, DateTime startTime, DateTime endTime, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("personIDs", personIDs);
            parameters.Add("startTime", startTime);
            parameters.Add("endTime", endTime);
            this.ValidateMethod("JudgeTimeIsExist", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("JudgeTimeIsExist", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'JudgeTimeIsExist' method of the DomainService.
        /// </summary>
        /// <param name="personIDs">The value for the 'personIDs' parameter of this action.</param>
        /// <param name="startTime">The value for the 'startTime' parameter of this action.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> JudgeTimeIsExist(int[] personIDs, DateTime startTime, DateTime endTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("personIDs", personIDs);
            parameters.Add("startTime", startTime);
            parameters.Add("endTime", endTime);
            this.ValidateMethod("JudgeTimeIsExist", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("JudgeTimeIsExist", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyAutoDBBackup' method of the DomainService.
        /// </summary>
        /// <param name="period">The value for the 'period' parameter of this action.</param>
        /// <param name="sub_period">The value for the 'sub_period' parameter of this action.</param>
        /// <param name="concrete_time">The value for the 'concrete_time' parameter of this action.</param>
        /// <param name="backup_destination">The value for the 'backup_destination' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ModifyAutoDBBackup(int period, int sub_period, string concrete_time, string backup_destination, Action<InvokeOperation<byte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("period", period);
            parameters.Add("sub_period", sub_period);
            parameters.Add("concrete_time", concrete_time);
            parameters.Add("backup_destination", backup_destination);
            this.ValidateMethod("ModifyAutoDBBackup", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("ModifyAutoDBBackup", typeof(byte), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyAutoDBBackup' method of the DomainService.
        /// </summary>
        /// <param name="period">The value for the 'period' parameter of this action.</param>
        /// <param name="sub_period">The value for the 'sub_period' parameter of this action.</param>
        /// <param name="concrete_time">The value for the 'concrete_time' parameter of this action.</param>
        /// <param name="backup_destination">The value for the 'backup_destination' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ModifyAutoDBBackup(int period, int sub_period, string concrete_time, string backup_destination)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("period", period);
            parameters.Add("sub_period", sub_period);
            parameters.Add("concrete_time", concrete_time);
            parameters.Add("backup_destination", backup_destination);
            this.ValidateMethod("ModifyAutoDBBackup", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("ModifyAutoDBBackup", typeof(byte), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyClassOrderJiGongShi' method of the DomainService.
        /// </summary>
        /// <param name="userClassOrderJiGongShi">The value for the 'userClassOrderJiGongShi' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> ModifyClassOrderJiGongShi(UserClassOrderJiGongShiInfo userClassOrderJiGongShi, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userClassOrderJiGongShi", userClassOrderJiGongShi);
            this.ValidateMethod("ModifyClassOrderJiGongShi", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("ModifyClassOrderJiGongShi", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyClassOrderJiGongShi' method of the DomainService.
        /// </summary>
        /// <param name="userClassOrderJiGongShi">The value for the 'userClassOrderJiGongShi' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> ModifyClassOrderJiGongShi(UserClassOrderJiGongShiInfo userClassOrderJiGongShi)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userClassOrderJiGongShi", userClassOrderJiGongShi);
            this.ValidateMethod("ModifyClassOrderJiGongShi", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("ModifyClassOrderJiGongShi", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyClassOrderSign' method of the DomainService.
        /// </summary>
        /// <param name="userClassOrerSign">The value for the 'userClassOrerSign' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> ModifyClassOrderSign(UserClassOrderSignInfo userClassOrerSign, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userClassOrerSign", userClassOrerSign);
            this.ValidateMethod("ModifyClassOrderSign", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("ModifyClassOrderSign", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyClassOrderSign' method of the DomainService.
        /// </summary>
        /// <param name="userClassOrerSign">The value for the 'userClassOrerSign' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> ModifyClassOrderSign(UserClassOrderSignInfo userClassOrerSign)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userClassOrerSign", userClassOrerSign);
            this.ValidateMethod("ModifyClassOrderSign", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("ModifyClassOrderSign", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyDepart' method of the DomainService.
        /// </summary>
        /// <param name="departId">The value for the 'departId' parameter of this action.</param>
        /// <param name="departName">The value for the 'departName' parameter of this action.</param>
        /// <param name="departSn">The value for the 'departSn' parameter of this action.</param>
        /// <param name="parentDepartId">The value for the 'parentDepartId' parameter of this action.</param>
        /// <param name="phone">The value for the 'phone' parameter of this action.</param>
        /// <param name="memo">The value for the 'memo' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> ModifyDepart(string departId, string departName, string departSn, string parentDepartId, string phone, string memo, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("departId", departId);
            parameters.Add("departName", departName);
            parameters.Add("departSn", departSn);
            parameters.Add("parentDepartId", parentDepartId);
            parameters.Add("phone", phone);
            parameters.Add("memo", memo);
            this.ValidateMethod("ModifyDepart", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("ModifyDepart", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyDepart' method of the DomainService.
        /// </summary>
        /// <param name="departId">The value for the 'departId' parameter of this action.</param>
        /// <param name="departName">The value for the 'departName' parameter of this action.</param>
        /// <param name="departSn">The value for the 'departSn' parameter of this action.</param>
        /// <param name="parentDepartId">The value for the 'parentDepartId' parameter of this action.</param>
        /// <param name="phone">The value for the 'phone' parameter of this action.</param>
        /// <param name="memo">The value for the 'memo' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> ModifyDepart(string departId, string departName, string departSn, string parentDepartId, string phone, string memo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("departId", departId);
            parameters.Add("departName", departName);
            parameters.Add("departSn", departSn);
            parameters.Add("parentDepartId", parentDepartId);
            parameters.Add("phone", phone);
            parameters.Add("memo", memo);
            this.ValidateMethod("ModifyDepart", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("ModifyDepart", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyDevice' method of the DomainService.
        /// </summary>
        /// <param name="deviceSn">The value for the 'deviceSn' parameter of this action.</param>
        /// <param name="place">The value for the 'place' parameter of this action.</param>
        /// <param name="startTimes">The value for the 'startTimes' parameter of this action.</param>
        /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ModifyDevice(string deviceSn, string place, string[] startTimes, int[] devTypes, Action<InvokeOperation<byte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("deviceSn", deviceSn);
            parameters.Add("place", place);
            parameters.Add("startTimes", startTimes);
            parameters.Add("devTypes", devTypes);
            this.ValidateMethod("ModifyDevice", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("ModifyDevice", typeof(byte), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyDevice' method of the DomainService.
        /// </summary>
        /// <param name="deviceSn">The value for the 'deviceSn' parameter of this action.</param>
        /// <param name="place">The value for the 'place' parameter of this action.</param>
        /// <param name="startTimes">The value for the 'startTimes' parameter of this action.</param>
        /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ModifyDevice(string deviceSn, string place, string[] startTimes, int[] devTypes)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("deviceSn", deviceSn);
            parameters.Add("place", place);
            parameters.Add("startTimes", startTimes);
            parameters.Add("devTypes", devTypes);
            this.ValidateMethod("ModifyDevice", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("ModifyDevice", typeof(byte), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyDeviceYangMei' method of the DomainService.
        /// </summary>
        /// <param name="deviceSn">The value for the 'deviceSn' parameter of this action.</param>
        /// <param name="place">The value for the 'place' parameter of this action.</param>
        /// <param name="startTimes">The value for the 'startTimes' parameter of this action.</param>
        /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
        /// <param name="devFunction">The value for the 'devFunction' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ModifyDeviceYangMei(string deviceSn, string place, string[] startTimes, int[] devTypes, string devFunction, Action<InvokeOperation<byte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("deviceSn", deviceSn);
            parameters.Add("place", place);
            parameters.Add("startTimes", startTimes);
            parameters.Add("devTypes", devTypes);
            parameters.Add("devFunction", devFunction);
            this.ValidateMethod("ModifyDeviceYangMei", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("ModifyDeviceYangMei", typeof(byte), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyDeviceYangMei' method of the DomainService.
        /// </summary>
        /// <param name="deviceSn">The value for the 'deviceSn' parameter of this action.</param>
        /// <param name="place">The value for the 'place' parameter of this action.</param>
        /// <param name="startTimes">The value for the 'startTimes' parameter of this action.</param>
        /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
        /// <param name="devFunction">The value for the 'devFunction' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ModifyDeviceYangMei(string deviceSn, string place, string[] startTimes, int[] devTypes, string devFunction)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("deviceSn", deviceSn);
            parameters.Add("place", place);
            parameters.Add("startTimes", startTimes);
            parameters.Add("devTypes", devTypes);
            parameters.Add("devFunction", devFunction);
            this.ValidateMethod("ModifyDeviceYangMei", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("ModifyDeviceYangMei", typeof(byte), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyFestival' method of the DomainService.
        /// </summary>
        /// <param name="fesval">The value for the 'fesval' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ModifyFestival(FestivalInfo fesval, Action<InvokeOperation<byte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fesval", fesval);
            this.ValidateMethod("ModifyFestival", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("ModifyFestival", typeof(byte), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyFestival' method of the DomainService.
        /// </summary>
        /// <param name="fesval">The value for the 'fesval' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ModifyFestival(FestivalInfo fesval)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fesval", fesval);
            this.ValidateMethod("ModifyFestival", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("ModifyFestival", typeof(byte), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyOperatorInfo' method of the DomainService.
        /// </summary>
        /// <param name="oldLogName">The value for the 'oldLogName' parameter of this action.</param>
        /// <param name="opInfo">The value for the 'opInfo' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ModifyOperatorInfo(string oldLogName, operator_info opInfo, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("oldLogName", oldLogName);
            parameters.Add("opInfo", opInfo);
            this.ValidateMethod("ModifyOperatorInfo", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ModifyOperatorInfo", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyOperatorInfo' method of the DomainService.
        /// </summary>
        /// <param name="oldLogName">The value for the 'oldLogName' parameter of this action.</param>
        /// <param name="opInfo">The value for the 'opInfo' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ModifyOperatorInfo(string oldLogName, operator_info opInfo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("oldLogName", oldLogName);
            parameters.Add("opInfo", opInfo);
            this.ValidateMethod("ModifyOperatorInfo", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ModifyOperatorInfo", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyOperatorPassword' method of the DomainService.
        /// </summary>
        /// <param name="logName">The value for the 'logName' parameter of this action.</param>
        /// <param name="inputPwd">The value for the 'inputPwd' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ModifyOperatorPassword(string logName, string inputPwd, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("logName", logName);
            parameters.Add("inputPwd", inputPwd);
            this.ValidateMethod("ModifyOperatorPassword", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ModifyOperatorPassword", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyOperatorPassword' method of the DomainService.
        /// </summary>
        /// <param name="logName">The value for the 'logName' parameter of this action.</param>
        /// <param name="inputPwd">The value for the 'inputPwd' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ModifyOperatorPassword(string logName, string inputPwd)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("logName", logName);
            parameters.Add("inputPwd", inputPwd);
            this.ValidateMethod("ModifyOperatorPassword", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ModifyOperatorPassword", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyPassword' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="newPwd">The value for the 'newPwd' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ModifyPassword(string userName, string newPwd, Action<InvokeOperation<byte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("newPwd", newPwd);
            this.ValidateMethod("ModifyPassword", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("ModifyPassword", typeof(byte), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyPassword' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="newPwd">The value for the 'newPwd' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ModifyPassword(string userName, string newPwd)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("newPwd", newPwd);
            this.ValidateMethod("ModifyPassword", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("ModifyPassword", typeof(byte), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyPrincipal' method of the DomainService.
        /// </summary>
        /// <param name="principalInfo">The value for the 'principalInfo' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> ModifyPrincipal(PrincipalInfo principalInfo, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("principalInfo", principalInfo);
            this.ValidateMethod("ModifyPrincipal", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("ModifyPrincipal", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyPrincipal' method of the DomainService.
        /// </summary>
        /// <param name="principalInfo">The value for the 'principalInfo' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> ModifyPrincipal(PrincipalInfo principalInfo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("principalInfo", principalInfo);
            this.ValidateMethod("ModifyPrincipal", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("ModifyPrincipal", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyPrincipalType' method of the DomainService.
        /// </summary>
        /// <param name="info">The value for the 'info' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> ModifyPrincipalType(PrincipalTypeInfo info, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("info", info);
            this.ValidateMethod("ModifyPrincipalType", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("ModifyPrincipalType", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyPrincipalType' method of the DomainService.
        /// </summary>
        /// <param name="info">The value for the 'info' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> ModifyPrincipalType(PrincipalTypeInfo info)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("info", info);
            this.ValidateMethod("ModifyPrincipalType", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("ModifyPrincipalType", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifySystemParam' method of the DomainService.
        /// </summary>
        /// <param name="over_time">The value for the 'over_time' parameter of this action.</param>
        /// <param name="dup_time">The value for the 'dup_time' parameter of this action.</param>
        /// <param name="in_dup_recog">The value for the 'in_dup_recog' parameter of this action.</param>
        /// <param name="out_dup_recog">The value for the 'out_dup_recog' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ModifySystemParam(int over_time, short dup_time, short in_dup_recog, short out_dup_recog, Action<InvokeOperation<byte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("over_time", over_time);
            parameters.Add("dup_time", dup_time);
            parameters.Add("in_dup_recog", in_dup_recog);
            parameters.Add("out_dup_recog", out_dup_recog);
            this.ValidateMethod("ModifySystemParam", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("ModifySystemParam", typeof(byte), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifySystemParam' method of the DomainService.
        /// </summary>
        /// <param name="over_time">The value for the 'over_time' parameter of this action.</param>
        /// <param name="dup_time">The value for the 'dup_time' parameter of this action.</param>
        /// <param name="in_dup_recog">The value for the 'in_dup_recog' parameter of this action.</param>
        /// <param name="out_dup_recog">The value for the 'out_dup_recog' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ModifySystemParam(int over_time, short dup_time, short in_dup_recog, short out_dup_recog)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("over_time", over_time);
            parameters.Add("dup_time", dup_time);
            parameters.Add("in_dup_recog", in_dup_recog);
            parameters.Add("out_dup_recog", out_dup_recog);
            this.ValidateMethod("ModifySystemParam", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("ModifySystemParam", typeof(byte), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyWorkCntPolicy' method of the DomainService.
        /// </summary>
        /// <param name="lt">The value for the 'lt' parameter of this action.</param>
        /// <param name="gt">The value for the 'gt' parameter of this action.</param>
        /// <param name="accuracy">The value for the 'accuracy' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ModifyWorkCntPolicy(int lt, int gt, int accuracy, Action<InvokeOperation<byte>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("lt", lt);
            parameters.Add("gt", gt);
            parameters.Add("accuracy", accuracy);
            this.ValidateMethod("ModifyWorkCntPolicy", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("ModifyWorkCntPolicy", typeof(byte), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyWorkCntPolicy' method of the DomainService.
        /// </summary>
        /// <param name="lt">The value for the 'lt' parameter of this action.</param>
        /// <param name="gt">The value for the 'gt' parameter of this action.</param>
        /// <param name="accuracy">The value for the 'accuracy' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte> ModifyWorkCntPolicy(int lt, int gt, int accuracy)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("lt", lt);
            parameters.Add("gt", gt);
            parameters.Add("accuracy", accuracy);
            this.ValidateMethod("ModifyWorkCntPolicy", parameters);
            return ((InvokeOperation<byte>)(this.InvokeOperation("ModifyWorkCntPolicy", typeof(byte), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyWorkType' method of the DomainService.
        /// </summary>
        /// <param name="workTypeInfo">The value for the 'workTypeInfo' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> ModifyWorkType(WorkTypeInfo workTypeInfo, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("workTypeInfo", workTypeInfo);
            this.ValidateMethod("ModifyWorkType", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("ModifyWorkType", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ModifyWorkType' method of the DomainService.
        /// </summary>
        /// <param name="workTypeInfo">The value for the 'workTypeInfo' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> ModifyWorkType(WorkTypeInfo workTypeInfo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("workTypeInfo", workTypeInfo);
            this.ValidateMethod("ModifyWorkType", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("ModifyWorkType", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetLeaderScheduling' method of the DomainService.
        /// </summary>
        /// <param name="leaderSchedulingList">The value for the 'leaderSchedulingList' parameter of this action.</param>
        /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> SetLeaderScheduling(XiGouLeaderScheduling[] leaderSchedulingList, DateTime beginTime, DateTime endTime, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("leaderSchedulingList", leaderSchedulingList);
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            this.ValidateMethod("SetLeaderScheduling", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("SetLeaderScheduling", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetLeaderScheduling' method of the DomainService.
        /// </summary>
        /// <param name="leaderSchedulingList">The value for the 'leaderSchedulingList' parameter of this action.</param>
        /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> SetLeaderScheduling(XiGouLeaderScheduling[] leaderSchedulingList, DateTime beginTime, DateTime endTime)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("leaderSchedulingList", leaderSchedulingList);
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            this.ValidateMethod("SetLeaderScheduling", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("SetLeaderScheduling", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetOperDepartPotenceAndPurvew' method of the DomainService.
        /// </summary>
        /// <param name="operatorName">The value for the 'operatorName' parameter of this action.</param>
        /// <param name="departIDList">The value for the 'departIDList' parameter of this action.</param>
        /// <param name="purviewIDList">The value for the 'purviewIDList' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> SetOperDepartPotenceAndPurvew(string operatorName, IEnumerable<int> departIDList, IEnumerable<int> purviewIDList, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("operatorName", operatorName);
            parameters.Add("departIDList", departIDList);
            parameters.Add("purviewIDList", purviewIDList);
            this.ValidateMethod("SetOperDepartPotenceAndPurvew", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("SetOperDepartPotenceAndPurvew", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetOperDepartPotenceAndPurvew' method of the DomainService.
        /// </summary>
        /// <param name="operatorName">The value for the 'operatorName' parameter of this action.</param>
        /// <param name="departIDList">The value for the 'departIDList' parameter of this action.</param>
        /// <param name="purviewIDList">The value for the 'purviewIDList' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> SetOperDepartPotenceAndPurvew(string operatorName, IEnumerable<int> departIDList, IEnumerable<int> purviewIDList)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("operatorName", operatorName);
            parameters.Add("departIDList", departIDList);
            parameters.Add("purviewIDList", purviewIDList);
            this.ValidateMethod("SetOperDepartPotenceAndPurvew", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("SetOperDepartPotenceAndPurvew", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetStopIrisRecords' method of the DomainService.
        /// </summary>
        /// <param name="personIDs">The value for the 'personIDs' parameter of this action.</param>
        /// <param name="startTime">The value for the 'startTime' parameter of this action.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
        /// <param name="policy">The value for the 'policy' parameter of this action.</param>
        /// <param name="IsBatch">The value for the 'IsBatch' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> SetStopIrisRecords(int[] personIDs, IEnumerable<string> startTime, IEnumerable<string> endTime, IEnumerable<int> policy, bool IsBatch, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("personIDs", personIDs);
            parameters.Add("startTime", startTime);
            parameters.Add("endTime", endTime);
            parameters.Add("policy", policy);
            parameters.Add("IsBatch", IsBatch);
            this.ValidateMethod("SetStopIrisRecords", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("SetStopIrisRecords", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetStopIrisRecords' method of the DomainService.
        /// </summary>
        /// <param name="personIDs">The value for the 'personIDs' parameter of this action.</param>
        /// <param name="startTime">The value for the 'startTime' parameter of this action.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
        /// <param name="policy">The value for the 'policy' parameter of this action.</param>
        /// <param name="IsBatch">The value for the 'IsBatch' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> SetStopIrisRecords(int[] personIDs, IEnumerable<string> startTime, IEnumerable<string> endTime, IEnumerable<int> policy, bool IsBatch)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("personIDs", personIDs);
            parameters.Add("startTime", startTime);
            parameters.Add("endTime", endTime);
            parameters.Add("policy", policy);
            parameters.Add("IsBatch", IsBatch);
            this.ValidateMethod("SetStopIrisRecords", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("SetStopIrisRecords", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'StartMannualDBBackup' method of the DomainService.
        /// </summary>
        /// <param name="backupDestination">The value for the 'backupDestination' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> StartMannualDBBackup(string backupDestination, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("backupDestination", backupDestination);
            this.ValidateMethod("StartMannualDBBackup", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("StartMannualDBBackup", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'StartMannualDBBackup' method of the DomainService.
        /// </summary>
        /// <param name="backupDestination">The value for the 'backupDestination' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> StartMannualDBBackup(string backupDestination)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("backupDestination", backupDestination);
            this.ValidateMethod("StartMannualDBBackup", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("StartMannualDBBackup", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'StartSyncLocateAttendInfo' method of the DomainService.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
        /// <param name="personIds">The value for the 'personIds' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> StartSyncLocateAttendInfo(DateTime beginTime, DateTime endTime, int[] personIds, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("personIds", personIds);
            this.ValidateMethod("StartSyncLocateAttendInfo", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("StartSyncLocateAttendInfo", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'StartSyncLocateAttendInfo' method of the DomainService.
        /// </summary>
        /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
        /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
        /// <param name="personIds">The value for the 'personIds' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> StartSyncLocateAttendInfo(DateTime beginTime, DateTime endTime, int[] personIds)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("beginTime", beginTime);
            parameters.Add("endTime", endTime);
            parameters.Add("personIds", personIds);
            this.ValidateMethod("StartSyncLocateAttendInfo", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("StartSyncLocateAttendInfo", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'StartSyncPerson' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> StartSyncPerson(Action<InvokeOperation<int>> callback, object userState)
        {
            this.ValidateMethod("StartSyncPerson", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("StartSyncPerson", typeof(int), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'StartSyncPerson' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> StartSyncPerson()
        {
            this.ValidateMethod("StartSyncPerson", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("StartSyncPerson", typeof(int), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SyncPersonInfo' method of the DomainService.
        /// </summary>
        /// <param name="startRow">The value for the 'startRow' parameter of this action.</param>
        /// <param name="deltaRow">The value for the 'deltaRow' parameter of this action.</param>
        /// <param name="count">The value for the 'count' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> SyncPersonInfo(int startRow, int deltaRow, int count, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("startRow", startRow);
            parameters.Add("deltaRow", deltaRow);
            parameters.Add("count", count);
            this.ValidateMethod("SyncPersonInfo", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("SyncPersonInfo", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SyncPersonInfo' method of the DomainService.
        /// </summary>
        /// <param name="startRow">The value for the 'startRow' parameter of this action.</param>
        /// <param name="deltaRow">The value for the 'deltaRow' parameter of this action.</param>
        /// <param name="count">The value for the 'count' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> SyncPersonInfo(int startRow, int deltaRow, int count)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("startRow", startRow);
            parameters.Add("deltaRow", deltaRow);
            parameters.Add("count", count);
            this.ValidateMethod("SyncPersonInfo", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("SyncPersonInfo", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UndoReportRecord' method of the DomainService.
        /// </summary>
        /// <param name="infos">The value for the 'infos' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> UndoReportRecord(ReportRecordInfoOnDepart_ZhouYuanShan[] infos, Action<InvokeOperation<OptionInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("infos", infos);
            this.ValidateMethod("UndoReportRecord", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("UndoReportRecord", typeof(OptionInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UndoReportRecord' method of the DomainService.
        /// </summary>
        /// <param name="infos">The value for the 'infos' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<OptionInfo> UndoReportRecord(ReportRecordInfoOnDepart_ZhouYuanShan[] infos)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("infos", infos);
            this.ValidateMethod("UndoReportRecord", parameters);
            return ((InvokeOperation<OptionInfo>)(this.InvokeOperation("UndoReportRecord", typeof(OptionInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new DomainServiceIriskingAttendEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'DomainServiceIriskingAttend' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IDomainServiceIriskingAttendContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'AddChildDepart' operation.
            /// </summary>
            /// <param name="parentDepartId">The value for the 'parentDepartId' parameter of this action.</param>
            /// <param name="childDepartIDs">The value for the 'childDepartIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddChildDepartDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddChildDepart", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddChildDepartResponse")]
            [WebGet()]
            IAsyncResult BeginAddChildDepart(string parentDepartId, string[] childDepartIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddChildDepart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddChildDepart'.</param>
            /// <returns>The 'QueryResult' returned from the 'AddChildDepart' operation.</returns>
            QueryResult<OptionInfo> EndAddChildDepart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'AddClassOrder' operation.
            /// </summary>
            /// <param name="class_order_name">The value for the 'class_order_name' parameter of this action.</param>
            /// <param name="attend_sign">The value for the 'attend_sign' parameter of this action.</param>
            /// <param name="class_type_id">The value for the 'class_type_id' parameter of this action.</param>
            /// <param name="attend_off_minutes">The value for the 'attend_off_minutes' parameter of this action.</param>
            /// <param name="in_well_start_time">The value for the 'in_well_start_time' parameter of this action.</param>
            /// <param name="in_well_end_time">The value for the 'in_well_end_time' parameter of this action.</param>
            /// <param name="out_well_start_time">The value for the 'out_well_start_time' parameter of this action.</param>
            /// <param name="out_well_end_time">The value for the 'out_well_end_time' parameter of this action.</param>
            /// <param name="attend_latest_worktime">The value for the 'attend_latest_worktime' parameter of this action.</param>
            /// <param name="attend_max_minutes">The value for the 'attend_max_minutes' parameter of this action.</param>
            /// <param name="Is_workcnt_method_standard">The value for the 'Is_workcnt_method_standard' parameter of this action.</param>
            /// <param name="avail_times">The value for the 'avail_times' parameter of this action.</param>
            /// <param name="work_cnts">The value for the 'work_cnts' parameter of this action.</param>
            /// <param name="avail_time_standard">The value for the 'avail_time_standard' parameter of this action.</param>
            /// <param name="work_cnt_standard">The value for the 'work_cnt_standard' parameter of this action.</param>
            /// <param name="memo">The value for the 'memo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddClassOrderDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddClassOrder", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddClassOrderResponse")]
            [WebGet()]
            IAsyncResult BeginAddClassOrder(
                        string class_order_name, 
                        string attend_sign, 
                        string class_type_id, 
                        string attend_off_minutes, 
                        string in_well_start_time, 
                        string in_well_end_time, 
                        string out_well_start_time, 
                        string out_well_end_time, 
                        string attend_latest_worktime, 
                        string attend_max_minutes, 
                        bool Is_workcnt_method_standard, 
                        string[] avail_times, 
                        string[] work_cnts, 
                        string avail_time_standard, 
                        string work_cnt_standard, 
                        string memo, 
                        AsyncCallback callback, 
                        object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddClassOrder'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddClassOrder'.</param>
            /// <returns>The 'QueryResult' returned from the 'AddClassOrder' operation.</returns>
            QueryResult<OptionInfo> EndAddClassOrder(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'AddClassOrderJiGongShi' operation.
            /// </summary>
            /// <param name="userClassOrderJiGongShi">The value for the 'userClassOrderJiGongShi' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddClassOrderJiGongShiDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddClassOrderJiGongShi", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddClassOrderJiGongShiResponse")]
            IAsyncResult BeginAddClassOrderJiGongShi(UserClassOrderJiGongShiInfo userClassOrderJiGongShi, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddClassOrderJiGongShi'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddClassOrderJiGongShi'.</param>
            /// <returns>The 'OptionInfo' returned from the 'AddClassOrderJiGongShi' operation.</returns>
            OptionInfo EndAddClassOrderJiGongShi(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'AddClassOrderSign' operation.
            /// </summary>
            /// <param name="userClassOrerSign">The value for the 'userClassOrerSign' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddClassOrderSignDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddClassOrderSign", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddClassOrderSignResponse")]
            IAsyncResult BeginAddClassOrderSign(UserClassOrderSignInfo userClassOrerSign, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddClassOrderSign'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddClassOrderSign'.</param>
            /// <returns>The 'OptionInfo' returned from the 'AddClassOrderSign' operation.</returns>
            OptionInfo EndAddClassOrderSign(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'AddClassType' operation.
            /// </summary>
            /// <param name="class_type_name">The value for the 'class_type_name' parameter of this action.</param>
            /// <param name="memo">The value for the 'memo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddClassTypeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddClassType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddClassTypeResponse")]
            [WebGet()]
            IAsyncResult BeginAddClassType(string class_type_name, string memo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddClassType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddClassType'.</param>
            /// <returns>The 'QueryResult' returned from the 'AddClassType' operation.</returns>
            QueryResult<OptionInfo> EndAddClassType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'AddDepart' operation.
            /// </summary>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="departSn">The value for the 'departSn' parameter of this action.</param>
            /// <param name="parentDepartId">The value for the 'parentDepartId' parameter of this action.</param>
            /// <param name="phone">The value for the 'phone' parameter of this action.</param>
            /// <param name="memo">The value for the 'memo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddDepartDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddDepart", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddDepartResponse")]
            [WebGet()]
            IAsyncResult BeginAddDepart(string departName, string departSn, string parentDepartId, string phone, string memo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddDepart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddDepart'.</param>
            /// <returns>The 'QueryResult' returned from the 'AddDepart' operation.</returns>
            QueryResult<OptionInfo> EndAddDepart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'AddDepartPotence' operation.
            /// </summary>
            /// <param name="operatorName">The value for the 'operatorName' parameter of this action.</param>
            /// <param name="departId">The value for the 'departId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddDepartPotenceDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddDepartPotence", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddDepartPotenceResponse")]
            IAsyncResult BeginAddDepartPotence(string operatorName, int departId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddDepartPotence'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddDepartPotence'.</param>
            /// <returns>The 'Boolean' returned from the 'AddDepartPotence' operation.</returns>
            bool EndAddDepartPotence(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'AddDevice' operation.
            /// </summary>
            /// <param name="deviceSn">The value for the 'deviceSn' parameter of this action.</param>
            /// <param name="place">The value for the 'place' parameter of this action.</param>
            /// <param name="startTimes">The value for the 'startTimes' parameter of this action.</param>
            /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddDeviceDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddDevice", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddDeviceResponse")]
            IAsyncResult BeginAddDevice(string deviceSn, string place, string[] startTimes, int[] devTypes, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddDevice'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddDevice'.</param>
            /// <returns>The 'Byte' returned from the 'AddDevice' operation.</returns>
            byte EndAddDevice(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'AddDeviceYangMei' operation.
            /// </summary>
            /// <param name="deviceSn">The value for the 'deviceSn' parameter of this action.</param>
            /// <param name="place">The value for the 'place' parameter of this action.</param>
            /// <param name="startTimes">The value for the 'startTimes' parameter of this action.</param>
            /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
            /// <param name="devFunction">The value for the 'devFunction' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddDeviceYangMeiDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddDeviceYangMei", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddDeviceYangMeiResponse")]
            IAsyncResult BeginAddDeviceYangMei(string deviceSn, string place, string[] startTimes, int[] devTypes, string devFunction, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddDeviceYangMei'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddDeviceYangMei'.</param>
            /// <returns>The 'Byte' returned from the 'AddDeviceYangMei' operation.</returns>
            byte EndAddDeviceYangMei(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'AddFestival' operation.
            /// </summary>
            /// <param name="fesval">The value for the 'fesval' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddFestivalDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddFestival", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddFestivalResponse")]
            IAsyncResult BeginAddFestival(FestivalInfo fesval, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddFestival'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddFestival'.</param>
            /// <returns>The 'Byte' returned from the 'AddFestival' operation.</returns>
            byte EndAddFestival(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'AddOperator' operation.
            /// </summary>
            /// <param name="opInfo">The value for the 'opInfo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddOperatorDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddOperator", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddOperatorResponse")]
            IAsyncResult BeginAddOperator(operator_info opInfo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddOperator'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddOperator'.</param>
            /// <returns>The 'Boolean' returned from the 'AddOperator' operation.</returns>
            bool EndAddOperator(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'AddOperatorLog' operation.
            /// </summary>
            /// <param name="opLogInfo">The value for the 'opLogInfo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddOperatorLogDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddOperatorLog", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddOperatorLogResponse")]
            IAsyncResult BeginAddOperatorLog(UserOperationLog opLogInfo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddOperatorLog'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddOperatorLog'.</param>
            /// <returns>The 'Boolean' returned from the 'AddOperatorLog' operation.</returns>
            bool EndAddOperatorLog(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'AddPersonOnMine' operation.
            /// </summary>
            /// <param name="depart_id">The value for the 'depart_id' parameter of this action.</param>
            /// <param name="class_type_id_on_ground">The value for the 'class_type_id_on_ground' parameter of this action.</param>
            /// <param name="class_type_id">The value for the 'class_type_id' parameter of this action.</param>
            /// <param name="worksn">The value for the 'worksn' parameter of this action.</param>
            /// <param name="name">The value for the 'name' parameter of this action.</param>
            /// <param name="sex">The value for the 'sex' parameter of this action.</param>
            /// <param name="blood_type">The value for the 'blood_type' parameter of this action.</param>
            /// <param name="birthdate">The value for the 'birthdate' parameter of this action.</param>
            /// <param name="workday">The value for the 'workday' parameter of this action.</param>
            /// <param name="id_card">The value for the 'id_card' parameter of this action.</param>
            /// <param name="phone">The value for the 'phone' parameter of this action.</param>
            /// <param name="address">The value for the 'address' parameter of this action.</param>
            /// <param name="zipcode">The value for the 'zipcode' parameter of this action.</param>
            /// <param name="email">The value for the 'email' parameter of this action.</param>
            /// <param name="memo">The value for the 'memo' parameter of this action.</param>
            /// <param name="imgdata">The value for the 'imgdata' parameter of this action.</param>
            /// <param name="imgType">The value for the 'imgType' parameter of this action.</param>
            /// <param name="principal_id">The value for the 'principal_id' parameter of this action.</param>
            /// <param name="work_type_id">The value for the 'work_type_id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddPersonOnMineDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddPersonOnMine", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddPersonOnMineResponse")]
            IAsyncResult BeginAddPersonOnMine(
                        string depart_id, 
                        string class_type_id_on_ground, 
                        string class_type_id, 
                        string worksn, 
                        string name, 
                        string sex, 
                        string blood_type, 
                        string birthdate, 
                        string workday, 
                        string id_card, 
                        string phone, 
                        string address, 
                        string zipcode, 
                        string email, 
                        string memo, 
                        byte[] imgdata, 
                        string imgType, 
                        string principal_id, 
                        string work_type_id, 
                        AsyncCallback callback, 
                        object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddPersonOnMine'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddPersonOnMine'.</param>
            /// <returns>The 'QueryResult' returned from the 'AddPersonOnMine' operation.</returns>
            QueryResult<OptionInfo> EndAddPersonOnMine(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'AddPrincipal' operation.
            /// </summary>
            /// <param name="principalInfo">The value for the 'principalInfo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddPrincipalDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddPrincipal", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddPrincipalResponse")]
            IAsyncResult BeginAddPrincipal(PrincipalInfo principalInfo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddPrincipal'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddPrincipal'.</param>
            /// <returns>The 'OptionInfo' returned from the 'AddPrincipal' operation.</returns>
            OptionInfo EndAddPrincipal(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'AddPrincipalType' operation.
            /// </summary>
            /// <param name="principalTypeInfo">The value for the 'principalTypeInfo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddPrincipalTypeDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddPrincipalType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddPrincipalTypeResponse")]
            IAsyncResult BeginAddPrincipalType(PrincipalTypeInfo principalTypeInfo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddPrincipalType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddPrincipalType'.</param>
            /// <returns>The 'OptionInfo' returned from the 'AddPrincipalType' operation.</returns>
            OptionInfo EndAddPrincipalType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'AddWorkType' operation.
            /// </summary>
            /// <param name="workTypeInfo">The value for the 'workTypeInfo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/AddWorkTypeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/AddWorkType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/AddWorkTypeResponse")]
            IAsyncResult BeginAddWorkType(WorkTypeInfo workTypeInfo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginAddWorkType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginAddWorkType'.</param>
            /// <returns>The 'OptionInfo' returned from the 'AddWorkType' operation.</returns>
            OptionInfo EndAddWorkType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'BatchAddLocateRecord' operation.
            /// </summary>
            /// <param name="personIds">The value for the 'personIds' parameter of this action.</param>
            /// <param name="inLocateTimes">The value for the 'inLocateTimes' parameter of this action.</param>
            /// <param name="outLocateTimes">The value for the 'outLocateTimes' parameter of this action.</param>
            /// <param name="attendDays">The value for the 'attendDays' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/BatchAddLocateRecordDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/BatchAddLocateRecord", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/BatchAddLocateRecordResponse")]
            IAsyncResult BeginBatchAddLocateRecord(int[] personIds, DateTime[] inLocateTimes, DateTime[] outLocateTimes, DateTime[] attendDays, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginBatchAddLocateRecord'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginBatchAddLocateRecord'.</param>
            /// <returns>The 'Boolean' returned from the 'BatchAddLocateRecord' operation.</returns>
            bool EndBatchAddLocateRecord(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'BatchDeleteDevice' operation.
            /// </summary>
            /// <param name="deviceIds">The value for the 'deviceIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/BatchDeleteDeviceDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/BatchDeleteDevice", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/BatchDeleteDeviceResponse")]
            IAsyncResult BeginBatchDeleteDevice(string[] deviceIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginBatchDeleteDevice'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginBatchDeleteDevice'.</param>
            /// <returns>The 'Byte' returned from the 'BatchDeleteDevice' operation.</returns>
            byte EndBatchDeleteDevice(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'BatchDeleteFestival' operation.
            /// </summary>
            /// <param name="festivalIds">The value for the 'festivalIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/BatchDeleteFestivalDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/BatchDeleteFestival", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/BatchDeleteFestivalResponse")]
            IAsyncResult BeginBatchDeleteFestival(int[] festivalIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginBatchDeleteFestival'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginBatchDeleteFestival'.</param>
            /// <returns>The 'Byte' returned from the 'BatchDeleteFestival' operation.</returns>
            byte EndBatchDeleteFestival(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'BatchDeleteLocateRecord' operation.
            /// </summary>
            /// <param name="rocordIds">The value for the 'rocordIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/BatchDeleteLocateRecordDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/BatchDeleteLocateRecord", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/BatchDeleteLocateRecordResponse")]
            IAsyncResult BeginBatchDeleteLocateRecord(int[] rocordIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginBatchDeleteLocateRecord'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginBatchDeleteLocateRecord'.</param>
            /// <returns>The 'Boolean' returned from the 'BatchDeleteLocateRecord' operation.</returns>
            bool EndBatchDeleteLocateRecord(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'BatchDeletePerson' operation.
            /// </summary>
            /// <param name="person_ids">The value for the 'person_ids' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/BatchDeletePersonDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/BatchDeletePerson", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/BatchDeletePersonResponse")]
            IAsyncResult BeginBatchDeletePerson(int[] person_ids, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginBatchDeletePerson'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginBatchDeletePerson'.</param>
            /// <returns>The 'OptionInfo' returned from the 'BatchDeletePerson' operation.</returns>
            OptionInfo EndBatchDeletePerson(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'BatchModifyDevice' operation.
            /// </summary>
            /// <param name="devInfos">The value for the 'devInfos' parameter of this action.</param>
            /// <param name="startTimes">The value for the 'startTimes' parameter of this action.</param>
            /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/BatchModifyDeviceDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/BatchModifyDevice", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/BatchModifyDeviceResponse")]
            IAsyncResult BeginBatchModifyDevice(DeviceInfo[] devInfos, string[] startTimes, int[] devTypes, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginBatchModifyDevice'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginBatchModifyDevice'.</param>
            /// <returns>The 'Byte' returned from the 'BatchModifyDevice' operation.</returns>
            byte EndBatchModifyDevice(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'BatchModifyPersons' operation.
            /// </summary>
            /// <param name="personIDs">The value for the 'personIDs' parameter of this action.</param>
            /// <param name="depart_id">The value for the 'depart_id' parameter of this action.</param>
            /// <param name="class_type_id_on_ground">The value for the 'class_type_id_on_ground' parameter of this action.</param>
            /// <param name="class_type_id_on_mine">The value for the 'class_type_id_on_mine' parameter of this action.</param>
            /// <param name="principalId">The value for the 'principalId' parameter of this action.</param>
            /// <param name="workTypeId">The value for the 'workTypeId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/BatchModifyPersonsDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/BatchModifyPersons", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/BatchModifyPersonsResponse")]
            IAsyncResult BeginBatchModifyPersons(int[] personIDs, int depart_id, int class_type_id_on_ground, int class_type_id_on_mine, int principalId, int workTypeId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginBatchModifyPersons'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginBatchModifyPersons'.</param>
            /// <returns>The 'OptionInfo' returned from the 'BatchModifyPersons' operation.</returns>
            OptionInfo EndBatchModifyPersons(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CancelSyncPerson' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/CancelSyncPersonDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/CancelSyncPerson", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/CancelSyncPersonResponse")]
            IAsyncResult BeginCancelSyncPerson(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCancelSyncPerson'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCancelSyncPerson'.</param>
            void EndCancelSyncPerson(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CheckTableName' operation.
            /// </summary>
            /// <param name="TableName">The value for the 'TableName' parameter of this action.</param>
            /// <param name="sqlControl">The value for the 'sqlControl' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/CheckTableNameDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/CheckTableName", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/CheckTableNameResponse")]
            IAsyncResult BeginCheckTableName(string TableName, SqlControl sqlControl, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCheckTableName'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCheckTableName'.</param>
            /// <returns>The 'Boolean' returned from the 'CheckTableName' operation.</returns>
            bool EndCheckTableName(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CloseDataBase' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/CloseDataBaseDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/CloseDataBase", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/CloseDataBaseResponse")]
            IAsyncResult BeginCloseDataBase(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCloseDataBase'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCloseDataBase'.</param>
            /// <returns>The 'Boolean' returned from the 'CloseDataBase' operation.</returns>
            bool EndCloseDataBase(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CompOldMD5AndModifyPwd' operation.
            /// </summary>
            /// <param name="oldPwdMD5">The value for the 'oldPwdMD5' parameter of this action.</param>
            /// <param name="inputPwd">The value for the 'inputPwd' parameter of this action.</param>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="newPwd">The value for the 'newPwd' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/CompOldMD5AndModifyPwdDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/CompOldMD5AndModifyPwd", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/CompOldMD5AndModifyPwdResponse")]
            IAsyncResult BeginCompOldMD5AndModifyPwd(string oldPwdMD5, string inputPwd, string userName, string newPwd, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCompOldMD5AndModifyPwd'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCompOldMD5AndModifyPwd'.</param>
            /// <returns>The 'Byte' returned from the 'CompOldMD5AndModifyPwd' operation.</returns>
            byte EndCompOldMD5AndModifyPwd(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CreateReportRecord' operation.
            /// </summary>
            /// <param name="infos">The value for the 'infos' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/CreateReportRecordDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/CreateReportRecord", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/CreateReportRecordResponse")]
            IAsyncResult BeginCreateReportRecord(ReportRecordInfoOnDepart_ZhouYuanShan[] infos, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateReportRecord'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateReportRecord'.</param>
            /// <returns>The 'OptionInfo' returned from the 'CreateReportRecord' operation.</returns>
            OptionInfo EndCreateReportRecord(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DelAllStopIrisRecords' operation.
            /// </summary>
            /// <param name="perosnIDs">The value for the 'perosnIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/DelAllStopIrisRecordsDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/DelAllStopIrisRecords", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/DelAllStopIrisRecordsResponse")]
            IAsyncResult BeginDelAllStopIrisRecords(int[] perosnIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDelAllStopIrisRecords'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDelAllStopIrisRecords'.</param>
            /// <returns>The 'OptionInfo' returned from the 'DelAllStopIrisRecords' operation.</returns>
            OptionInfo EndDelAllStopIrisRecords(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeleteChildDepart' operation.
            /// </summary>
            /// <param name="parentDepartId">The value for the 'parentDepartId' parameter of this action.</param>
            /// <param name="childDepartIDs">The value for the 'childDepartIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteChildDepartDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteChildDepart", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/DeleteChildDepartResponse")]
            [WebGet()]
            IAsyncResult BeginDeleteChildDepart(string parentDepartId, string[] childDepartIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeleteChildDepart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeleteChildDepart'.</param>
            /// <returns>The 'QueryResult' returned from the 'DeleteChildDepart' operation.</returns>
            QueryResult<OptionInfo> EndDeleteChildDepart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeleteClassOrder' operation.
            /// </summary>
            /// <param name="class_order_ids">The value for the 'class_order_ids' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteClassOrderDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteClassOrder", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/DeleteClassOrderResponse")]
            [WebGet()]
            IAsyncResult BeginDeleteClassOrder(string[] class_order_ids, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeleteClassOrder'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeleteClassOrder'.</param>
            /// <returns>The 'QueryResult' returned from the 'DeleteClassOrder' operation.</returns>
            QueryResult<OptionInfo> EndDeleteClassOrder(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeleteClassOrderJiGongShi' operation.
            /// </summary>
            /// <param name="class_order_ids">The value for the 'class_order_ids' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteClassOrderJiGongShiDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteClassOrderJiGongShi", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/DeleteClassOrderJiGongShiResponse")]
            [WebGet()]
            IAsyncResult BeginDeleteClassOrderJiGongShi(string[] class_order_ids, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeleteClassOrderJiGongShi'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeleteClassOrderJiGongShi'.</param>
            /// <returns>The 'QueryResult' returned from the 'DeleteClassOrderJiGongShi' operation.</returns>
            QueryResult<OptionInfo> EndDeleteClassOrderJiGongShi(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeleteClassOrderSign' operation.
            /// </summary>
            /// <param name="class_order_ids">The value for the 'class_order_ids' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteClassOrderSignDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteClassOrderSign", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/DeleteClassOrderSignResponse")]
            [WebGet()]
            IAsyncResult BeginDeleteClassOrderSign(string[] class_order_ids, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeleteClassOrderSign'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeleteClassOrderSign'.</param>
            /// <returns>The 'QueryResult' returned from the 'DeleteClassOrderSign' operation.</returns>
            QueryResult<OptionInfo> EndDeleteClassOrderSign(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeleteClassType' operation.
            /// </summary>
            /// <param name="class_type_ids">The value for the 'class_type_ids' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteClassTypeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteClassType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/DeleteClassTypeResponse")]
            [WebGet()]
            IAsyncResult BeginDeleteClassType(string[] class_type_ids, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeleteClassType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeleteClassType'.</param>
            /// <returns>The 'QueryResult' returned from the 'DeleteClassType' operation.</returns>
            QueryResult<OptionInfo> EndDeleteClassType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeleteDepart' operation.
            /// </summary>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteDepartDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteDepart", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/DeleteDepartResponse")]
            [WebGet()]
            IAsyncResult BeginDeleteDepart(string[] departIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeleteDepart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeleteDepart'.</param>
            /// <returns>The 'QueryResult' returned from the 'DeleteDepart' operation.</returns>
            QueryResult<OptionInfo> EndDeleteDepart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeleteOperator' operation.
            /// </summary>
            /// <param name="logName">The value for the 'logName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteOperatorDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteOperator", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/DeleteOperatorResponse")]
            IAsyncResult BeginDeleteOperator(string logName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeleteOperator'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeleteOperator'.</param>
            /// <returns>The 'Boolean' returned from the 'DeleteOperator' operation.</returns>
            bool EndDeleteOperator(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeleteOperatorLog' operation.
            /// </summary>
            /// <param name="opLogInfo">The value for the 'opLogInfo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteOperatorLogDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteOperatorLog", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/DeleteOperatorLogResponse")]
            IAsyncResult BeginDeleteOperatorLog(UserOperationLog opLogInfo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeleteOperatorLog'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeleteOperatorLog'.</param>
            /// <returns>The 'Boolean' returned from the 'DeleteOperatorLog' operation.</returns>
            bool EndDeleteOperatorLog(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeletePrincipal' operation.
            /// </summary>
            /// <param name="principalIds">The value for the 'principalIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/DeletePrincipalDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/DeletePrincipal", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/DeletePrincipalResponse")]
            IAsyncResult BeginDeletePrincipal(int[] principalIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeletePrincipal'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeletePrincipal'.</param>
            /// <returns>The 'OptionInfo' returned from the 'DeletePrincipal' operation.</returns>
            OptionInfo EndDeletePrincipal(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeletePrincipalType' operation.
            /// </summary>
            /// <param name="ids">The value for the 'ids' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/DeletePrincipalTypeDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/DeletePrincipalType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/DeletePrincipalTypeResponse")]
            IAsyncResult BeginDeletePrincipalType(int[] ids, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeletePrincipalType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeletePrincipalType'.</param>
            /// <returns>The 'OptionInfo' returned from the 'DeletePrincipalType' operation.</returns>
            OptionInfo EndDeletePrincipalType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeleteWorkType' operation.
            /// </summary>
            /// <param name="workTypeIds">The value for the 'workTypeIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteWorkTypeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/DeleteWorkType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/DeleteWorkTypeResponse")]
            IAsyncResult BeginDeleteWorkType(int[] workTypeIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeleteWorkType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeleteWorkType'.</param>
            /// <returns>The 'OptionInfo' returned from the 'DeleteWorkType' operation.</returns>
            OptionInfo EndDeleteWorkType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAbnormalAttendRecordInfo_WuHuShan' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetAbnormalAttendRecordInfo_WuHuSh" +
                "anDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetAbnormalAttendRecordInfo_WuHuSh" +
                "an", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetAbnormalAttendRecordInfo_WuHuSh" +
                "anResponse")]
            [WebGet()]
            IAsyncResult BeginGetAbnormalAttendRecordInfo_WuHuShan(DateTime beginTime, DateTime endTime, int[] departIds, string personName, string workSn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAbnormalAttendRecordInfo_WuHuShan'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAbnormalAttendRecordInfo_WuHuShan'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAbnormalAttendRecordInfo_WuHuShan' operation.</returns>
            QueryResult<AttendRecordInfo_WuhuShan> EndGetAbnormalAttendRecordInfo_WuHuShan(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAllDevice' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetAllDeviceDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetAllDevice", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetAllDeviceResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllDevice(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAllDevice'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAllDevice'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAllDevice' operation.</returns>
            QueryResult<DeviceInfo> EndGetAllDevice(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAllFestival' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetAllFestivalDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetAllFestival", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetAllFestivalResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllFestival(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAllFestival'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAllFestival'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAllFestival' operation.</returns>
            QueryResult<FestivalInfo> EndGetAllFestival(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAllOperator' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetAllOperatorDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetAllOperator", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetAllOperatorResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllOperator(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAllOperator'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAllOperator'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAllOperator' operation.</returns>
            QueryResult<operator_info> EndGetAllOperator(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAllPersonIds' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetAllPersonIdsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetAllPersonIds", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetAllPersonIdsResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllPersonIds(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAllPersonIds'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAllPersonIds'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAllPersonIds' operation.</returns>
            QueryResult<UserPersonInfo> EndGetAllPersonIds(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetApplicationType' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetApplicationTypeDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetApplicationType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetApplicationTypeResponse")]
            IAsyncResult BeginGetApplicationType(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetApplicationType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetApplicationType'.</param>
            /// <returns>The 'String' returned from the 'GetApplicationType' operation.</returns>
            string EndGetApplicationType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAttendDepartInWellCollect' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetAttendDepartInWellCollectDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetAttendDepartInWellCollect", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetAttendDepartInWellCollectRespon" +
                "se")]
            IAsyncResult BeginGetAttendDepartInWellCollect(DateTime beginTime, DateTime endTime, int[] departIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAttendDepartInWellCollect'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAttendDepartInWellCollect'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAttendDepartInWellCollect' operation.</returns>
            QueryResult<AttendDepartInWellQuery> EndGetAttendDepartInWellCollect(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAttendDepartInWellDetail' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departId">The value for the 'departId' parameter of this action.</param>
            /// <param name="attendSign">The value for the 'attendSign' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetAttendDepartInWellDetailDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetAttendDepartInWellDetail", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetAttendDepartInWellDetailRespons" +
                "e")]
            IAsyncResult BeginGetAttendDepartInWellDetail(DateTime beginTime, DateTime endTime, int departId, string attendSign, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAttendDepartInWellDetail'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAttendDepartInWellDetail'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAttendDepartInWellDetail' operation.</returns>
            QueryResult<AttendDepartInWellDetail> EndGetAttendDepartInWellDetail(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAttendPersonInWellCollect' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="workTime">The value for the 'workTime' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetAttendPersonInWellCollectDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetAttendPersonInWellCollect", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetAttendPersonInWellCollectRespon" +
                "se")]
            IAsyncResult BeginGetAttendPersonInWellCollect(DateTime beginTime, DateTime endTime, int[] departIds, string personName, string workSn, int workTime, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAttendPersonInWellCollect'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAttendPersonInWellCollect'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAttendPersonInWellCollect' operation.</returns>
            QueryResult<AttendPersonInWellQuery> EndGetAttendPersonInWellCollect(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAttendSignal' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetAttendSignalDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetAttendSignal", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetAttendSignalResponse")]
            IAsyncResult BeginGetAttendSignal(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAttendSignal'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAttendSignal'.</param>
            /// <returns>The 'Dictionary`2' returned from the 'GetAttendSignal' operation.</returns>
            Dictionary<string, string> EndGetAttendSignal(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBackupServerIP' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetBackupServerIPDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetBackupServerIP", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetBackupServerIPResponse")]
            IAsyncResult BeginGetBackupServerIP(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBackupServerIP'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBackupServerIP'.</param>
            /// <returns>The 'String' returned from the 'GetBackupServerIP' operation.</returns>
            string EndGetBackupServerIP(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBackupServerPort' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetBackupServerPortDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetBackupServerPort", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetBackupServerPortResponse")]
            IAsyncResult BeginGetBackupServerPort(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBackupServerPort'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBackupServerPort'.</param>
            /// <returns>The 'String' returned from the 'GetBackupServerPort' operation.</returns>
            string EndGetBackupServerPort(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetChildDepart' operation.
            /// </summary>
            /// <param name="parentDepartID">The value for the 'parentDepartID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetChildDepartDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetChildDepart", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetChildDepartResponse")]
            [WebGet()]
            IAsyncResult BeginGetChildDepart(string parentDepartID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetChildDepart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetChildDepart'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetChildDepart' operation.</returns>
            QueryResult<UserDepartInfo> EndGetChildDepart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetClassOrderInfos' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetClassOrderInfosDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetClassOrderInfos", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetClassOrderInfosResponse")]
            [WebGet()]
            IAsyncResult BeginGetClassOrderInfos(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClassOrderInfos'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClassOrderInfos'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetClassOrderInfos' operation.</returns>
            QueryResult<UserClassOrderInfo> EndGetClassOrderInfos(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetClassOrderInfosByClassType' operation.
            /// </summary>
            /// <param name="classTypeId">The value for the 'classTypeId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetClassOrderInfosByClassTypeDomai" +
                "nServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetClassOrderInfosByClassType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetClassOrderInfosByClassTypeRespo" +
                "nse")]
            [WebGet()]
            IAsyncResult BeginGetClassOrderInfosByClassType(int classTypeId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClassOrderInfosByClassType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClassOrderInfosByClassType'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetClassOrderInfosByClassType' operation.</returns>
            QueryResult<UserClassOrderInfo> EndGetClassOrderInfosByClassType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetClassOrderJiGongShiInfosByClassType' operation.
            /// </summary>
            /// <param name="classTypeId">The value for the 'classTypeId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetClassOrderJiGongShiInfosByClass" +
                "TypeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetClassOrderJiGongShiInfosByClass" +
                "Type", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetClassOrderJiGongShiInfosByClass" +
                "TypeResponse")]
            [WebGet()]
            IAsyncResult BeginGetClassOrderJiGongShiInfosByClassType(int classTypeId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClassOrderJiGongShiInfosByClassType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClassOrderJiGongShiInfosByClassType'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetClassOrderJiGongShiInfosByClassType' operation.</returns>
            QueryResult<UserClassOrderJiGongShiInfo> EndGetClassOrderJiGongShiInfosByClassType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetClassOrderSignInfosByClassType' operation.
            /// </summary>
            /// <param name="classTypeId">The value for the 'classTypeId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetClassOrderSignInfosByClassTypeD" +
                "omainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetClassOrderSignInfosByClassType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetClassOrderSignInfosByClassTypeR" +
                "esponse")]
            [WebGet()]
            IAsyncResult BeginGetClassOrderSignInfosByClassType(int classTypeId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClassOrderSignInfosByClassType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClassOrderSignInfosByClassType'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetClassOrderSignInfosByClassType' operation.</returns>
            QueryResult<UserClassOrderSignInfo> EndGetClassOrderSignInfosByClassType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetClassTimesList' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetClassTimesListDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetClassTimesList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetClassTimesListResponse")]
            IAsyncResult BeginGetClassTimesList(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClassTimesList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClassTimesList'.</param>
            /// <returns>The 'List`1' returned from the 'GetClassTimesList' operation.</returns>
            List<ClassOrderTimes> EndGetClassTimesList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetClassTypeInfos' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetClassTypeInfosDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetClassTypeInfos", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetClassTypeInfosResponse")]
            [WebGet()]
            IAsyncResult BeginGetClassTypeInfos(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClassTypeInfos'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClassTypeInfos'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetClassTypeInfos' operation.</returns>
            QueryResult<UserClassTypeInfo> EndGetClassTypeInfos(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetClientIP' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetClientIPDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetClientIP", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetClientIPResponse")]
            IAsyncResult BeginGetClientIP(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClientIP'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClientIP'.</param>
            /// <returns>The 'String' returned from the 'GetClientIP' operation.</returns>
            string EndGetClientIP(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompletedReportRecordInfoOnDepart' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetCompletedReportRecordInfoOnDepa" +
                "rtDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetCompletedReportRecordInfoOnDepa" +
                "rt", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetCompletedReportRecordInfoOnDepa" +
                "rtResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompletedReportRecordInfoOnDepart(DateTime beginTime, DateTime endTime, int[] departIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompletedReportRecordInfoOnDepart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompletedReportRecordInfoOnDepart'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompletedReportRecordInfoOnDepart' operation.</returns>
            QueryResult<ReportRecordInfoOnDepart_ZhouYuanShan> EndGetCompletedReportRecordInfoOnDepart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomOrderbyDepartsInfo' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetCustomOrderbyDepartsInfoDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetCustomOrderbyDepartsInfo", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetCustomOrderbyDepartsInfoRespons" +
                "e")]
            [WebGet()]
            IAsyncResult BeginGetCustomOrderbyDepartsInfo(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomOrderbyDepartsInfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomOrderbyDepartsInfo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomOrderbyDepartsInfo' operation.</returns>
            QueryResult<depart> EndGetCustomOrderbyDepartsInfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDayList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetDayListDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetDayList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetDayListResponse")]
            IAsyncResult BeginGetDayList(DateTime beginTime, DateTime endTime, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDayList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDayList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDayList' operation.</returns>
            QueryResult<ZKHBMonthList> EndGetDayList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDayPersonAttendZhouYuanShan' operation.
            /// </summary>
            /// <param name="sqlQuery">The value for the 'sqlQuery' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetDayPersonAttendZhouYuanShanDoma" +
                "inServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetDayPersonAttendZhouYuanShan", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetDayPersonAttendZhouYuanShanResp" +
                "onse")]
            IAsyncResult BeginGetDayPersonAttendZhouYuanShan(string sqlQuery, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDayPersonAttendZhouYuanShan'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDayPersonAttendZhouYuanShan'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDayPersonAttendZhouYuanShan' operation.</returns>
            QueryResult<PersonDayAttend> EndGetDayPersonAttendZhouYuanShan(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDBBackupParam' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetDBBackupParamDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetDBBackupParam", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetDBBackupParamResponse")]
            [WebGet()]
            IAsyncResult BeginGetDBBackupParam(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDBBackupParam'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDBBackupParam'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDBBackupParam' operation.</returns>
            QueryResult<backup_param> EndGetDBBackupParam(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDepartInfo' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetDepartInfoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetDepartInfo", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetDepartInfoResponse")]
            [WebGet()]
            IAsyncResult BeginGetDepartInfo(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDepartInfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDepartInfo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDepartInfo' operation.</returns>
            QueryResult<UserDepartInfo> EndGetDepartInfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDepartMonthAttendZhouYuanShan' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetDepartMonthAttendZhouYuanShanDo" +
                "mainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetDepartMonthAttendZhouYuanShan", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetDepartMonthAttendZhouYuanShanRe" +
                "sponse")]
            [WebGet()]
            IAsyncResult BeginGetDepartMonthAttendZhouYuanShan(DateTime beginTime, DateTime endTime, int[] departIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDepartMonthAttendZhouYuanShan'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDepartMonthAttendZhouYuanShan'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDepartMonthAttendZhouYuanShan' operation.</returns>
            QueryResult<DepartMonthAttend> EndGetDepartMonthAttendZhouYuanShan(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDepartsInfo' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetDepartsInfoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetDepartsInfo", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetDepartsInfoResponse")]
            [WebGet()]
            IAsyncResult BeginGetDepartsInfo(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDepartsInfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDepartsInfo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDepartsInfo' operation.</returns>
            QueryResult<UserDepartInfo> EndGetDepartsInfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFestivalBySql' operation.
            /// </summary>
            /// <param name="querySql">The value for the 'querySql' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetFestivalBySqlDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetFestivalBySql", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetFestivalBySqlResponse")]
            [WebGet()]
            IAsyncResult BeginGetFestivalBySql(string querySql, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFestivalBySql'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFestivalBySql'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFestivalBySql' operation.</returns>
            QueryResult<FestivalInfo> EndGetFestivalBySql(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFullPersonList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetFullPersonListDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetFullPersonList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetFullPersonListResponse")]
            IAsyncResult BeginGetFullPersonList(DateTime beginTime, DateTime endTime, string[] departName, string[] personName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFullPersonList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFullPersonList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFullPersonList' operation.</returns>
            QueryResult<PersonFullAttendInfo> EndGetFullPersonList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetGuoDianReport' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetGuoDianReportDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetGuoDianReport", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetGuoDianReportResponse")]
            [WebGet()]
            IAsyncResult BeginGetGuoDianReport(DateTime beginTime, DateTime endTime, string personName, string workSn, int[] departIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetGuoDianReport'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetGuoDianReport'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetGuoDianReport' operation.</returns>
            QueryResult<GuoDianReportData> EndGetGuoDianReport(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetGuoDianReportFromExcel' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetGuoDianReportFromExcelDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetGuoDianReportFromExcel", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetGuoDianReportFromExcelResponse")]
            [WebGet()]
            IAsyncResult BeginGetGuoDianReportFromExcel(DateTime beginTime, DateTime endTime, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetGuoDianReportFromExcel'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetGuoDianReportFromExcel'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetGuoDianReportFromExcel' operation.</returns>
            QueryResult<GuoDianReportData> EndGetGuoDianReportFromExcel(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetHuFengDayAttendCollect' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="departNames">The value for the 'departNames' parameter of this action.</param>
            /// <param name="classOrderNames">The value for the 'classOrderNames' parameter of this action.</param>
            /// <param name="principalNames">The value for the 'principalNames' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetHuFengDayAttendCollectDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetHuFengDayAttendCollect", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetHuFengDayAttendCollectResponse")]
            IAsyncResult BeginGetHuFengDayAttendCollect(DateTime beginTime, string[] departNames, string[] classOrderNames, string[] principalNames, string personName, string workSn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetHuFengDayAttendCollect'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetHuFengDayAttendCollect'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetHuFengDayAttendCollect' operation.</returns>
            QueryResult<HuFengDayAttendReport> EndGetHuFengDayAttendCollect(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetHuFengMonthAttendCollect' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departNames">The value for the 'departNames' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetHuFengMonthAttendCollectDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetHuFengMonthAttendCollect", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetHuFengMonthAttendCollectRespons" +
                "e")]
            IAsyncResult BeginGetHuFengMonthAttendCollect(DateTime beginTime, DateTime endTime, string[] departNames, string personName, string workSn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetHuFengMonthAttendCollect'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetHuFengMonthAttendCollect'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetHuFengMonthAttendCollect' operation.</returns>
            QueryResult<HuFengMonthAttendReport> EndGetHuFengMonthAttendCollect(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetInCompleteCollect' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetInCompleteCollectDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetInCompleteCollect", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetInCompleteCollectResponse")]
            IAsyncResult BeginGetInCompleteCollect(DateTime beginTime, DateTime endTime, int[] departIds, string personName, string workSn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetInCompleteCollect'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetInCompleteCollect'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetInCompleteCollect' operation.</returns>
            QueryResult<AttendInComplete> EndGetInCompleteCollect(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetInCompleteRecord' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="personId">The value for the 'personId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetInCompleteRecordDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetInCompleteRecord", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetInCompleteRecordResponse")]
            IAsyncResult BeginGetInCompleteRecord(DateTime beginTime, DateTime endTime, int personId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetInCompleteRecord'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetInCompleteRecord'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetInCompleteRecord' operation.</returns>
            QueryResult<InCompleteRecord> EndGetInCompleteRecord(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIrisAttendQuery' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIdLst">The value for the 'departIdLst' parameter of this action.</param>
            /// <param name="name">The value for the 'name' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="principalIdList">The value for the 'principalIdList' parameter of this action.</param>
            /// <param name="workTypeIdList">The value for the 'workTypeIdList' parameter of this action.</param>
            /// <param name="workTime">The value for the 'workTime' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetIrisAttendQueryDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetIrisAttendQuery", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetIrisAttendQueryResponse")]
            [WebGet()]
            IAsyncResult BeginGetIrisAttendQuery(DateTime beginTime, DateTime endTime, int[] departIdLst, string name, string workSn, int[] principalIdList, int[] workTypeIdList, int workTime, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIrisAttendQuery'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIrisAttendQuery'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIrisAttendQuery' operation.</returns>
            QueryResult<XlsAttendWuHuShanPersonList> EndGetIrisAttendQuery(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIsMineApp' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetIsMineAppDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetIsMineApp", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetIsMineAppResponse")]
            IAsyncResult BeginGetIsMineApp(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIsMineApp'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIsMineApp'.</param>
            /// <returns>The 'Boolean' returned from the 'GetIsMineApp' operation.</returns>
            bool EndGetIsMineApp(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIsShowRecogType' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetIsShowRecogTypeDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetIsShowRecogType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetIsShowRecogTypeResponse")]
            IAsyncResult BeginGetIsShowRecogType(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIsShowRecogType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIsShowRecogType'.</param>
            /// <returns>The 'Int32' returned from the 'GetIsShowRecogType' operation.</returns>
            int EndGetIsShowRecogType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIsSupportClassOrderSign' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetIsSupportClassOrderSignDomainSe" +
                "rviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetIsSupportClassOrderSign", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetIsSupportClassOrderSignResponse" +
                "")]
            IAsyncResult BeginGetIsSupportClassOrderSign(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIsSupportClassOrderSign'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIsSupportClassOrderSign'.</param>
            /// <returns>The 'Int32' returned from the 'GetIsSupportClassOrderSign' operation.</returns>
            int EndGetIsSupportClassOrderSign(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLeaderPersonInfoList' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetLeaderPersonInfoListDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetLeaderPersonInfoList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetLeaderPersonInfoListResponse")]
            IAsyncResult BeginGetLeaderPersonInfoList(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLeaderPersonInfoList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLeaderPersonInfoList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLeaderPersonInfoList' operation.</returns>
            QueryResult<UserPersonInfo> EndGetLeaderPersonInfoList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLeakageAttendanceCollect' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetLeakageAttendanceCollectDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetLeakageAttendanceCollect", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetLeakageAttendanceCollectRespons" +
                "e")]
            IAsyncResult BeginGetLeakageAttendanceCollect(DateTime beginTime, DateTime endTime, string[] departName, string[] personName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLeakageAttendanceCollect'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLeakageAttendanceCollect'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLeakageAttendanceCollect' operation.</returns>
            QueryResult<LeakageAttendance> EndGetLeakageAttendanceCollect(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLocateRecord' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetLocateRecordDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetLocateRecord", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetLocateRecordResponse")]
            [WebGet()]
            IAsyncResult BeginGetLocateRecord(DateTime beginTime, DateTime endTime, int[] departIds, string personName, string workSn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLocateRecord'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLocateRecord'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLocateRecord' operation.</returns>
            QueryResult<LocateRecordAddedEntity> EndGetLocateRecord(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLunchRecordOnClassOrder' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="classOrderIDs">The value for the 'classOrderIDs' parameter of this action.</param>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetLunchRecordOnClassOrderDomainSe" +
                "rviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetLunchRecordOnClassOrder", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetLunchRecordOnClassOrderResponse" +
                "")]
            [WebGet()]
            IAsyncResult BeginGetLunchRecordOnClassOrder(DateTime beginTime, DateTime endTime, int[] classOrderIDs, int[] departIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLunchRecordOnClassOrder'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLunchRecordOnClassOrder'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLunchRecordOnClassOrder' operation.</returns>
            QueryResult<ReportRecordInfoOnDepart_ZhouYuanShan> EndGetLunchRecordOnClassOrder(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLunchRecordOnDepart' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetLunchRecordOnDepartDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetLunchRecordOnDepart", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetLunchRecordOnDepartResponse")]
            [WebGet()]
            IAsyncResult BeginGetLunchRecordOnDepart(DateTime beginTime, DateTime endTime, int[] departIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLunchRecordOnDepart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLunchRecordOnDepart'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLunchRecordOnDepart' operation.</returns>
            QueryResult<LunchRecordInfoOnDepart> EndGetLunchRecordOnDepart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLunchRecordOnPerson' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="personIds">The value for the 'personIds' parameter of this action.</param>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetLunchRecordOnPersonDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetLunchRecordOnPerson", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetLunchRecordOnPersonResponse")]
            [WebGet()]
            IAsyncResult BeginGetLunchRecordOnPerson(DateTime beginTime, DateTime endTime, int[] personIds, int[] departIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLunchRecordOnPerson'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLunchRecordOnPerson'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLunchRecordOnPerson' operation.</returns>
            QueryResult<LunchRecordInfoOnPerson> EndGetLunchRecordOnPerson(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMD5String' operation.
            /// </summary>
            /// <param name="inputStr">The value for the 'inputStr' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetMD5StringDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetMD5String", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetMD5StringResponse")]
            IAsyncResult BeginGetMD5String(string inputStr, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMD5String'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMD5String'.</param>
            /// <returns>The 'String' returned from the 'GetMD5String' operation.</returns>
            string EndGetMD5String(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMonthAttendUnderRuleCollect' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="ruleDataNum">The value for the 'ruleDataNum' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetMonthAttendUnderRuleCollectDoma" +
                "inServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetMonthAttendUnderRuleCollect", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetMonthAttendUnderRuleCollectResp" +
                "onse")]
            [WebGet()]
            IAsyncResult BeginGetMonthAttendUnderRuleCollect(DateTime beginTime, DateTime endTime, string[] departName, string[] personName, int ruleDataNum, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMonthAttendUnderRuleCollect'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMonthAttendUnderRuleCollect'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMonthAttendUnderRuleCollect' operation.</returns>
            QueryResult<PersonMonthAttend> EndGetMonthAttendUnderRuleCollect(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOfficeAttend' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departNames">The value for the 'departNames' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetOfficeAttendDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetOfficeAttend", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetOfficeAttendResponse")]
            [WebGet()]
            IAsyncResult BeginGetOfficeAttend(DateTime beginTime, DateTime endTime, string[] departNames, string personName, string workSn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOfficeAttend'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOfficeAttend'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOfficeAttend' operation.</returns>
            QueryResult<OfficeAttend> EndGetOfficeAttend(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOperatorDepartPotence' operation.
            /// </summary>
            /// <param name="operatorName">The value for the 'operatorName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetOperatorDepartPotenceDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetOperatorDepartPotence", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetOperatorDepartPotenceResponse")]
            [WebGet()]
            IAsyncResult BeginGetOperatorDepartPotence(string operatorName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOperatorDepartPotence'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOperatorDepartPotence'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOperatorDepartPotence' operation.</returns>
            QueryResult<operator_potence> EndGetOperatorDepartPotence(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOperatorPurview' operation.
            /// </summary>
            /// <param name="operatorName">The value for the 'operatorName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetOperatorPurviewDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetOperatorPurview", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetOperatorPurviewResponse")]
            [WebGet()]
            IAsyncResult BeginGetOperatorPurview(string operatorName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOperatorPurview'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOperatorPurview'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOperatorPurview' operation.</returns>
            QueryResult<operator_purview> EndGetOperatorPurview(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOverTime' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetOverTimeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetOverTime", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetOverTimeResponse")]
            IAsyncResult BeginGetOverTime(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOverTime'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOverTime'.</param>
            /// <returns>The 'Int32' returned from the 'GetOverTime' operation.</returns>
            int EndGetOverTime(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPassword' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPasswordDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPassword", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPasswordResponse")]
            IAsyncResult BeginGetPassword(string userName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPassword'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPassword'.</param>
            /// <returns>The 'String' returned from the 'GetPassword' operation.</returns>
            string EndGetPassword(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonAttendDetailList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonAttendDetailListDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonAttendDetailList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonAttendDetailListResponse")]
            IAsyncResult BeginGetPersonAttendDetailList(DateTime beginTime, DateTime endTime, string[] departName, string[] personName, string[] workSn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonAttendDetailList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonAttendDetailList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonAttendDetailList' operation.</returns>
            QueryResult<PersonAttend> EndGetPersonAttendDetailList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonAttendRecord' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="personId">The value for the 'personId' parameter of this action.</param>
            /// <param name="attendType">The value for the 'attendType' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonAttendRecordDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonAttendRecord", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonAttendRecordResponse")]
            IAsyncResult BeginGetPersonAttendRecord(DateTime beginTime, DateTime endTime, int personId, int attendType, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonAttendRecord'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonAttendRecord'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonAttendRecord' operation.</returns>
            QueryResult<PersonAttendRecord> EndGetPersonAttendRecord(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonAttendStatistics' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="personIds">The value for the 'personIds' parameter of this action.</param>
            /// <param name="workTypeIds">The value for the 'workTypeIds' parameter of this action.</param>
            /// <param name="classOrderIds">The value for the 'classOrderIds' parameter of this action.</param>
            /// <param name="_showElementType">The value for the '_showElementType' parameter of this action.</param>
            /// <param name="_reportType">The value for the '_reportType' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonAttendStatisticsDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonAttendStatistics", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonAttendStatisticsResponse")]
            IAsyncResult BeginGetPersonAttendStatistics(DateTime beginTime, DateTime endTime, int[] departIds, int[] personIds, int[] workTypeIds, int[] classOrderIds, int _showElementType, int _reportType, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonAttendStatistics'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonAttendStatistics'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonAttendStatistics' operation.</returns>
            QueryResult<PersonAttendStatistics> EndGetPersonAttendStatistics(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonDetailInfo' operation.
            /// </summary>
            /// <param name="personID">The value for the 'personID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonDetailInfoDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonDetailInfo", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonDetailInfoResponse")]
            [WebGet()]
            IAsyncResult BeginGetPersonDetailInfo(int personID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonDetailInfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonDetailInfo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonDetailInfo' operation.</returns>
            QueryResult<UserPersonInfo> EndGetPersonDetailInfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonInfo' operation.
            /// </summary>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonInfoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonInfo", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonInfoResponse")]
            IAsyncResult BeginGetPersonInfo(string[] departName, string[] personName, string[] workSn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonInfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonInfo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonInfo' operation.</returns>
            QueryResult<UserPersonInfo> EndGetPersonInfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonInfo_ZhouYuanShan' operation.
            /// </summary>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonInfo_ZhouYuanShanDomainSe" +
                "rviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonInfo_ZhouYuanShan", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonInfo_ZhouYuanShanResponse" +
                "")]
            [WebGet()]
            IAsyncResult BeginGetPersonInfo_ZhouYuanShan(int[] departIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonInfo_ZhouYuanShan'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonInfo_ZhouYuanShan'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonInfo_ZhouYuanShan' operation.</returns>
            QueryResult<UserPersonInfo> EndGetPersonInfo_ZhouYuanShan(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonInfoByDepartName' operation.
            /// </summary>
            /// <param name="depart_Name">The value for the 'depart_Name' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonInfoByDepartNameDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonInfoByDepartName", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonInfoByDepartNameResponse")]
            IAsyncResult BeginGetPersonInfoByDepartName(string[] depart_Name, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonInfoByDepartName'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonInfoByDepartName'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonInfoByDepartName' operation.</returns>
            QueryResult<UserPersonInfo> EndGetPersonInfoByDepartName(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonLatearrivalList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonLatearrivalListDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonLatearrivalList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonLatearrivalListResponse")]
            IAsyncResult BeginGetPersonLatearrivalList(DateTime beginTime, DateTime endTime, string[] departName, string[] personName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonLatearrivalList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonLatearrivalList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonLatearrivalList' operation.</returns>
            QueryResult<PersonLatearrivalInfo> EndGetPersonLatearrivalList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonLeaveList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonLeaveListDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonLeaveList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonLeaveListResponse")]
            IAsyncResult BeginGetPersonLeaveList(DateTime beginTime, DateTime endTime, string[] departName, string[] personName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonLeaveList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonLeaveList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonLeaveList' operation.</returns>
            QueryResult<PersonLeaveListInfo> EndGetPersonLeaveList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonListInfo' operation.
            /// </summary>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonListInfoDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonListInfo", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonListInfoResponse")]
            IAsyncResult BeginGetPersonListInfo(string[] departName, string[] personName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonListInfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonListInfo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonListInfo' operation.</returns>
            QueryResult<UserPersonInfo> EndGetPersonListInfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonMealSuppleList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonMealSuppleListDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonMealSuppleList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonMealSuppleListResponse")]
            IAsyncResult BeginGetPersonMealSuppleList(DateTime beginTime, DateTime endTime, string[] departName, string[] personName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonMealSuppleList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonMealSuppleList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonMealSuppleList' operation.</returns>
            QueryResult<PersonMealSuppleInfo> EndGetPersonMealSuppleList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonMonthAttendList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonMonthAttendListDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonMonthAttendList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonMonthAttendListResponse")]
            [WebGet()]
            IAsyncResult BeginGetPersonMonthAttendList(DateTime beginTime, DateTime endTime, string[] departName, string[] personName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonMonthAttendList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonMonthAttendList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonMonthAttendList' operation.</returns>
            QueryResult<PersonMonthAttend> EndGetPersonMonthAttendList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonOriginRecList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonOriginRecListDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonOriginRecList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonOriginRecListResponse")]
            IAsyncResult BeginGetPersonOriginRecList(DateTime beginTime, DateTime endTime, string[] departName, string[] personName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonOriginRecList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonOriginRecList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonOriginRecList' operation.</returns>
            QueryResult<PersonOriginInfo> EndGetPersonOriginRecList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonsInfoTable' operation.
            /// </summary>
            /// <param name="depart_id">The value for the 'depart_id' parameter of this action.</param>
            /// <param name="person_Name">The value for the 'person_Name' parameter of this action.</param>
            /// <param name="person_WorkSn">The value for the 'person_WorkSn' parameter of this action.</param>
            /// <param name="irisStatus">The value for the 'irisStatus' parameter of this action.</param>
            /// <param name="irisRegister">The value for the 'irisRegister' parameter of this action.</param>
            /// <param name="childDepartMode">The value for the 'childDepartMode' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonsInfoTableDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonsInfoTable", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonsInfoTableResponse")]
            [WebGet()]
            IAsyncResult BeginGetPersonsInfoTable(int depart_id, string person_Name, string person_WorkSn, string irisStatus, string irisRegister, string childDepartMode, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonsInfoTable'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonsInfoTable'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonsInfoTable' operation.</returns>
            QueryResult<UserPersonInfo> EndGetPersonsInfoTable(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonStopIrisInfo' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonStopIrisInfoDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonStopIrisInfo", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonStopIrisInfoResponse")]
            [WebGet()]
            IAsyncResult BeginGetPersonStopIrisInfo(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonStopIrisInfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonStopIrisInfo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonStopIrisInfo' operation.</returns>
            QueryResult<PersonStopIrisInfo> EndGetPersonStopIrisInfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonStopIrisTable' operation.
            /// </summary>
            /// <param name="persoonId">The value for the 'persoonId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonStopIrisTableDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonStopIrisTable", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonStopIrisTableResponse")]
            IAsyncResult BeginGetPersonStopIrisTable(int[] persoonId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonStopIrisTable'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonStopIrisTable'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonStopIrisTable' operation.</returns>
            QueryResult<PersonStopIrisInfo> EndGetPersonStopIrisTable(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPersonTimeProblemList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonTimeProblemListDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPersonTimeProblemList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPersonTimeProblemListResponse")]
            IAsyncResult BeginGetPersonTimeProblemList(DateTime beginTime, DateTime endTime, string[] departName, string[] personName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPersonTimeProblemList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPersonTimeProblemList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPersonTimeProblemList' operation.</returns>
            QueryResult<PersonLatearrivalInfo> EndGetPersonTimeProblemList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPrincipalInfo' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPrincipalInfoDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPrincipalInfo", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPrincipalInfoResponse")]
            [WebGet()]
            IAsyncResult BeginGetPrincipalInfo(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPrincipalInfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPrincipalInfo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPrincipalInfo' operation.</returns>
            QueryResult<PrincipalInfo> EndGetPrincipalInfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPrincipals' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPrincipalsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPrincipals", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPrincipalsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPrincipals(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPrincipals'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPrincipals'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPrincipals' operation.</returns>
            QueryResult<PrincipalInfo> EndGetPrincipals(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPrincipalTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPrincipalTypesDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPrincipalTypes", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPrincipalTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetPrincipalTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPrincipalTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPrincipalTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPrincipalTypes' operation.</returns>
            QueryResult<PrincipalTypeInfo> EndGetPrincipalTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPurview' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetPurviewDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetPurview", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetPurviewResponse")]
            [WebGet()]
            IAsyncResult BeginGetPurview(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPurview'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPurview'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPurview' operation.</returns>
            QueryResult<purview> EndGetPurview(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetReportPersonMonthAttend' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetReportPersonMonthAttendDomainSe" +
                "rviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetReportPersonMonthAttend", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetReportPersonMonthAttendResponse" +
                "")]
            IAsyncResult BeginGetReportPersonMonthAttend(DateTime beginTime, int[] departIds, string personName, string workSn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetReportPersonMonthAttend'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetReportPersonMonthAttend'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetReportPersonMonthAttend' operation.</returns>
            QueryResult<ReportPersonMonth> EndGetReportPersonMonthAttend(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSupportableChildDepart' operation.
            /// </summary>
            /// <param name="depart_ID">The value for the 'depart_ID' parameter of this action.</param>
            /// <param name="parent_depart_ID">The value for the 'parent_depart_ID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetSupportableChildDepartDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetSupportableChildDepart", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetSupportableChildDepartResponse")]
            [WebGet()]
            IAsyncResult BeginGetSupportableChildDepart(int depart_ID, int parent_depart_ID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSupportableChildDepart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSupportableChildDepart'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSupportableChildDepart' operation.</returns>
            QueryResult<UserDepartInfo> EndGetSupportableChildDepart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSyncLocateState' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetSyncLocateStateDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetSyncLocateState", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetSyncLocateStateResponse")]
            IAsyncResult BeginGetSyncLocateState(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSyncLocateState'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSyncLocateState'.</param>
            /// <returns>The 'Int32' returned from the 'GetSyncLocateState' operation.</returns>
            int EndGetSyncLocateState(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSystemParam' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetSystemParamDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetSystemParam", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetSystemParamResponse")]
            [WebGet()]
            IAsyncResult BeginGetSystemParam(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSystemParam'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSystemParam'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSystemParam' operation.</returns>
            QueryResult<system_param> EndGetSystemParam(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTotalAttendDetailList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetTotalAttendDetailListDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetTotalAttendDetailList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetTotalAttendDetailListResponse")]
            IAsyncResult BeginGetTotalAttendDetailList(DateTime beginTime, DateTime endTime, string[] departName, string[] personName, string[] workSn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTotalAttendDetailList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTotalAttendDetailList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTotalAttendDetailList' operation.</returns>
            QueryResult<TotalAttend> EndGetTotalAttendDetailList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUnCompletedReportRecordInfoOnDepart' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetUnCompletedReportRecordInfoOnDe" +
                "partDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetUnCompletedReportRecordInfoOnDe" +
                "part", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetUnCompletedReportRecordInfoOnDe" +
                "partResponse")]
            [WebGet()]
            IAsyncResult BeginGetUnCompletedReportRecordInfoOnDepart(DateTime beginTime, DateTime endTime, int[] departIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUnCompletedReportRecordInfoOnDepart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUnCompletedReportRecordInfoOnDepart'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUnCompletedReportRecordInfoOnDepart' operation.</returns>
            QueryResult<ReportRecordInfoOnDepart_ZhouYuanShan> EndGetUnCompletedReportRecordInfoOnDepart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserOperationLog' operation.
            /// </summary>
            /// <param name="startTime">The value for the 'startTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="logName">The value for the 'logName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetUserOperationLogDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetUserOperationLog", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetUserOperationLogResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserOperationLog(string startTime, string endTime, string logName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserOperationLog'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserOperationLog'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserOperationLog' operation.</returns>
            QueryResult<UserOperationLog> EndGetUserOperationLog(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserOperationLogByRecordCount' operation.
            /// </summary>
            /// <param name="maxRecordCount">The value for the 'maxRecordCount' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetUserOperationLogByRecordCountDo" +
                "mainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetUserOperationLogByRecordCount", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetUserOperationLogByRecordCountRe" +
                "sponse")]
            [WebGet()]
            IAsyncResult BeginGetUserOperationLogByRecordCount(int maxRecordCount, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserOperationLogByRecordCount'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserOperationLogByRecordCount'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserOperationLogByRecordCount' operation.</returns>
            QueryResult<UserOperationLog> EndGetUserOperationLogByRecordCount(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserPersonInfoBySql' operation.
            /// </summary>
            /// <param name="condition">The value for the 'condition' parameter of this action.</param>
            /// <param name="orderBy">The value for the 'orderBy' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetUserPersonInfoBySqlDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetUserPersonInfoBySql", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetUserPersonInfoBySqlResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserPersonInfoBySql(string condition, string orderBy, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserPersonInfoBySql'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserPersonInfoBySql'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserPersonInfoBySql' operation.</returns>
            QueryResult<UserPersonInfo> EndGetUserPersonInfoBySql(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetWorkCntPolicy' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetWorkCntPolicyDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetWorkCntPolicy", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetWorkCntPolicyResponse")]
            [WebGet()]
            IAsyncResult BeginGetWorkCntPolicy(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetWorkCntPolicy'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetWorkCntPolicy'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetWorkCntPolicy' operation.</returns>
            QueryResult<work_cnt_policy> EndGetWorkCntPolicy(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetWorkTypeInfo' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetWorkTypeInfoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetWorkTypeInfo", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetWorkTypeInfoResponse")]
            [WebGet()]
            IAsyncResult BeginGetWorkTypeInfo(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetWorkTypeInfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetWorkTypeInfo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetWorkTypeInfo' operation.</returns>
            QueryResult<WorkTypeInfo> EndGetWorkTypeInfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetWorkTypeInfo_ZhouYuanShan' operation.
            /// </summary>
            /// <param name="departIds">The value for the 'departIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetWorkTypeInfo_ZhouYuanShanDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetWorkTypeInfo_ZhouYuanShan", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetWorkTypeInfo_ZhouYuanShanRespon" +
                "se")]
            [WebGet()]
            IAsyncResult BeginGetWorkTypeInfo_ZhouYuanShan(int[] departIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetWorkTypeInfo_ZhouYuanShan'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetWorkTypeInfo_ZhouYuanShan'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetWorkTypeInfo_ZhouYuanShan' operation.</returns>
            QueryResult<WorkTypeInfo_ZhouYuanShan> EndGetWorkTypeInfo_ZhouYuanShan(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetWorkTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetWorkTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetWorkTypes", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetWorkTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetWorkTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetWorkTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetWorkTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetWorkTypes' operation.</returns>
            QueryResult<WorkTypeInfo> EndGetWorkTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetXiGouDayAttendCollect' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="departNames">The value for the 'departNames' parameter of this action.</param>
            /// <param name="classTypeNames">The value for the 'classTypeNames' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouDayAttendCollectDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouDayAttendCollect", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouDayAttendCollectResponse")]
            IAsyncResult BeginGetXiGouDayAttendCollect(DateTime beginTime, string[] departNames, string[] classTypeNames, string personName, string workSn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetXiGouDayAttendCollect'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetXiGouDayAttendCollect'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetXiGouDayAttendCollect' operation.</returns>
            QueryResult<XiGouDayAttendReport> EndGetXiGouDayAttendCollect(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetXiGouInWellList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouInWellListDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouInWellList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouInWellListResponse")]
            IAsyncResult BeginGetXiGouInWellList(DateTime beginTime, DateTime endTime, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetXiGouInWellList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetXiGouInWellList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetXiGouInWellList' operation.</returns>
            QueryResult<XiGouInWellPerson> EndGetXiGouInWellList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetXiGouInWellPersonDetail' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouInWellPersonDetailDomainSe" +
                "rviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouInWellPersonDetail", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouInWellPersonDetailResponse" +
                "")]
            IAsyncResult BeginGetXiGouInWellPersonDetail(DateTime beginTime, DateTime endTime, string personName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetXiGouInWellPersonDetail'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetXiGouInWellPersonDetail'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetXiGouInWellPersonDetail' operation.</returns>
            QueryResult<XiGouInWellPersonDetailReport> EndGetXiGouInWellPersonDetail(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetXiGouLeaderAttendRec' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIdLst">The value for the 'departIdLst' parameter of this action.</param>
            /// <param name="person_id">The value for the 'person_id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouLeaderAttendRecDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouLeaderAttendRec", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouLeaderAttendRecResponse")]
            IAsyncResult BeginGetXiGouLeaderAttendRec(DateTime beginTime, DateTime endTime, int[] departIdLst, int person_id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetXiGouLeaderAttendRec'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetXiGouLeaderAttendRec'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetXiGouLeaderAttendRec' operation.</returns>
            QueryResult<XiGouLeaderAttend> EndGetXiGouLeaderAttendRec(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetXiGouLeaderList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouLeaderListDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouLeaderList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouLeaderListResponse")]
            [WebGet()]
            IAsyncResult BeginGetXiGouLeaderList(DateTime beginTime, DateTime endTime, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetXiGouLeaderList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetXiGouLeaderList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetXiGouLeaderList' operation.</returns>
            QueryResult<XiGouLeaderAttend> EndGetXiGouLeaderList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetXiGouLeaderScheduleList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouLeaderScheduleListDomainSe" +
                "rviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouLeaderScheduleList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouLeaderScheduleListResponse" +
                "")]
            [WebGet()]
            IAsyncResult BeginGetXiGouLeaderScheduleList(DateTime beginTime, DateTime endTime, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetXiGouLeaderScheduleList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetXiGouLeaderScheduleList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetXiGouLeaderScheduleList' operation.</returns>
            QueryResult<XiGouLeaderSchedule> EndGetXiGouLeaderScheduleList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetXiGouLeaderScheduleRec' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIdLst">The value for the 'departIdLst' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouLeaderScheduleRecDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouLeaderScheduleRec", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouLeaderScheduleRecResponse")]
            IAsyncResult BeginGetXiGouLeaderScheduleRec(DateTime beginTime, DateTime endTime, int[] departIdLst, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetXiGouLeaderScheduleRec'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetXiGouLeaderScheduleRec'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetXiGouLeaderScheduleRec' operation.</returns>
            QueryResult<XiGouLeaderSchedule> EndGetXiGouLeaderScheduleRec(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetXiGouLeaderSchedulingList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouLeaderSchedulingListDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouLeaderSchedulingList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouLeaderSchedulingListRespon" +
                "se")]
            IAsyncResult BeginGetXiGouLeaderSchedulingList(DateTime beginTime, DateTime endTime, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetXiGouLeaderSchedulingList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetXiGouLeaderSchedulingList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetXiGouLeaderSchedulingList' operation.</returns>
            QueryResult<XiGouLeaderScheduling> EndGetXiGouLeaderSchedulingList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetXiGouMonthAttendCollect' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departNames">The value for the 'departNames' parameter of this action.</param>
            /// <param name="classTypeNames">The value for the 'classTypeNames' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouMonthAttendCollectDomainSe" +
                "rviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouMonthAttendCollect", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouMonthAttendCollectResponse" +
                "")]
            IAsyncResult BeginGetXiGouMonthAttendCollect(DateTime beginTime, DateTime endTime, string[] departNames, string[] classTypeNames, string personName, string workSn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetXiGouMonthAttendCollect'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetXiGouMonthAttendCollect'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetXiGouMonthAttendCollect' operation.</returns>
            QueryResult<XiGouMonthAttendReport> EndGetXiGouMonthAttendCollect(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetXiGouPersonLeaderScheuleRec' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIdLst">The value for the 'departIdLst' parameter of this action.</param>
            /// <param name="name">The value for the 'name' parameter of this action.</param>
            /// <param name="personId">The value for the 'personId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouPersonLeaderScheuleRecDoma" +
                "inServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouPersonLeaderScheuleRec", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetXiGouPersonLeaderScheuleRecResp" +
                "onse")]
            IAsyncResult BeginGetXiGouPersonLeaderScheuleRec(DateTime beginTime, DateTime endTime, int[] departIdLst, string name, int personId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetXiGouPersonLeaderScheuleRec'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetXiGouPersonLeaderScheuleRec'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetXiGouPersonLeaderScheuleRec' operation.</returns>
            QueryResult<XiGouLeaderAttend> EndGetXiGouPersonLeaderScheuleRec(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetXlsWuHuShanAttendanceDetailList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIdLst">The value for the 'departIdLst' parameter of this action.</param>
            /// <param name="name">The value for the 'name' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="principalIdList">The value for the 'principalIdList' parameter of this action.</param>
            /// <param name="workTypeIdList">The value for the 'workTypeIdList' parameter of this action.</param>
            /// <param name="workTimeMore">The value for the 'workTimeMore' parameter of this action.</param>
            /// <param name="workTimeEqual">The value for the 'workTimeEqual' parameter of this action.</param>
            /// <param name="workTimeLess">The value for the 'workTimeLess' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetXlsWuHuShanAttendanceDetailList" +
                "DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetXlsWuHuShanAttendanceDetailList" +
                "", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetXlsWuHuShanAttendanceDetailList" +
                "Response")]
            [WebGet()]
            IAsyncResult BeginGetXlsWuHuShanAttendanceDetailList(DateTime beginTime, DateTime endTime, int[] departIdLst, string name, string workSn, int[] principalIdList, int[] workTypeIdList, int workTimeMore, int workTimeEqual, int workTimeLess, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetXlsWuHuShanAttendanceDetailList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetXlsWuHuShanAttendanceDetailList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetXlsWuHuShanAttendanceDetailList' operation.</returns>
            QueryResult<XlsAttendWuHuShanPersonList> EndGetXlsWuHuShanAttendanceDetailList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetXlsWuHuShanPersonList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIdLst">The value for the 'departIdLst' parameter of this action.</param>
            /// <param name="name">The value for the 'name' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="principalIdList">The value for the 'principalIdList' parameter of this action.</param>
            /// <param name="workTypeIdList">The value for the 'workTypeIdList' parameter of this action.</param>
            /// <param name="workTime">The value for the 'workTime' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetXlsWuHuShanPersonListDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetXlsWuHuShanPersonList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetXlsWuHuShanPersonListResponse")]
            [WebGet()]
            IAsyncResult BeginGetXlsWuHuShanPersonList(DateTime beginTime, DateTime endTime, int[] departIdLst, string name, string workSn, int[] principalIdList, int[] workTypeIdList, int workTime, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetXlsWuHuShanPersonList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetXlsWuHuShanPersonList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetXlsWuHuShanPersonList' operation.</returns>
            QueryResult<XlsAttendWuHuShanPersonList> EndGetXlsWuHuShanPersonList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetZhuDuanMonthAttendList' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departNames">The value for the 'departNames' parameter of this action.</param>
            /// <param name="personNames">The value for the 'personNames' parameter of this action.</param>
            /// <param name="workSns">The value for the 'workSns' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetZhuDuanMonthAttendListDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetZhuDuanMonthAttendList", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetZhuDuanMonthAttendListResponse")]
            IAsyncResult BeginGetZhuDuanMonthAttendList(DateTime beginTime, DateTime endTime, string[] departNames, string[] personNames, string[] workSns, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetZhuDuanMonthAttendList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetZhuDuanMonthAttendList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetZhuDuanMonthAttendList' operation.</returns>
            QueryResult<ZhuDuanMonthAttendReport> EndGetZhuDuanMonthAttendList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetZKHBPersonInfo' operation.
            /// </summary>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/GetZKHBPersonInfoDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/GetZKHBPersonInfo", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/GetZKHBPersonInfoResponse")]
            IAsyncResult BeginGetZKHBPersonInfo(string[] departName, string personName, string workSn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetZKHBPersonInfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetZKHBPersonInfo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetZKHBPersonInfo' operation.</returns>
            QueryResult<UserPersonInfo> EndGetZKHBPersonInfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'InsertOrUpdateLeaveType' operation.
            /// </summary>
            /// <param name="leaveType">The value for the 'leaveType' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/InsertOrUpdateLeaveTypeDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/InsertOrUpdateLeaveType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/InsertOrUpdateLeaveTypeResponse")]
            IAsyncResult BeginInsertOrUpdateLeaveType(LeaveType leaveType, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginInsertOrUpdateLeaveType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginInsertOrUpdateLeaveType'.</param>
            /// <returns>The 'String' returned from the 'InsertOrUpdateLeaveType' operation.</returns>
            string EndInsertOrUpdateLeaveType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisBatchInsertRecogLog' operation.
            /// </summary>
            /// <param name="personIds">The value for the 'personIds' parameter of this action.</param>
            /// <param name="recog">The value for the 'recog' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisBatchInsertRecogLogDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisBatchInsertRecogLog", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisBatchInsertRecogLogResponse")]
            IAsyncResult BeginIrisBatchInsertRecogLog(int[] personIds, UserPersonRecogLog recog, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisBatchInsertRecogLog'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisBatchInsertRecogLog'.</param>
            /// <returns>The 'Int32' returned from the 'IrisBatchInsertRecogLog' operation.</returns>
            int EndIrisBatchInsertRecogLog(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisBatchInsertRecogLog_WuHuShan' operation.
            /// </summary>
            /// <param name="personIds">The value for the 'personIds' parameter of this action.</param>
            /// <param name="recogTimes">The value for the 'recogTimes' parameter of this action.</param>
            /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
            /// <param name="operatorName">The value for the 'operatorName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisBatchInsertRecogLog_WuHuShanDo" +
                "mainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisBatchInsertRecogLog_WuHuShan", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisBatchInsertRecogLog_WuHuShanRe" +
                "sponse")]
            IAsyncResult BeginIrisBatchInsertRecogLog_WuHuShan(int[] personIds, DateTime[] recogTimes, int[] devTypes, string operatorName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisBatchInsertRecogLog_WuHuShan'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisBatchInsertRecogLog_WuHuShan'.</param>
            /// <returns>The 'Int32' returned from the 'IrisBatchInsertRecogLog_WuHuShan' operation.</returns>
            int EndIrisBatchInsertRecogLog_WuHuShan(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisContinueInsertUserAttendForLeave' operation.
            /// </summary>
            /// <param name="attendForLeave">The value for the 'attendForLeave' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisContinueInsertUserAttendForLea" +
                "veDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisContinueInsertUserAttendForLea" +
                "ve", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisContinueInsertUserAttendForLea" +
                "veResponse")]
            IAsyncResult BeginIrisContinueInsertUserAttendForLeave(List<UserAttendForLeave> attendForLeave, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisContinueInsertUserAttendForLeave'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisContinueInsertUserAttendForLeave'.</param>
            /// <returns>The 'Boolean' returned from the 'IrisContinueInsertUserAttendForLeave' operation.</returns>
            bool EndIrisContinueInsertUserAttendForLeave(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisDeleteLeaveType' operation.
            /// </summary>
            /// <param name="leaveTypeIds">The value for the 'leaveTypeIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisDeleteLeaveTypeDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisDeleteLeaveType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisDeleteLeaveTypeResponse")]
            IAsyncResult BeginIrisDeleteLeaveType(int[] leaveTypeIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisDeleteLeaveType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisDeleteLeaveType'.</param>
            /// <returns>The 'Boolean' returned from the 'IrisDeleteLeaveType' operation.</returns>
            bool EndIrisDeleteLeaveType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisDeleteUserAttendForLeave' operation.
            /// </summary>
            /// <param name="attend_for_leave_id">The value for the 'attend_for_leave_id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisDeleteUserAttendForLeaveDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisDeleteUserAttendForLeave", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisDeleteUserAttendForLeaveRespon" +
                "se")]
            IAsyncResult BeginIrisDeleteUserAttendForLeave(int attend_for_leave_id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisDeleteUserAttendForLeave'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisDeleteUserAttendForLeave'.</param>
            /// <returns>The 'Boolean' returned from the 'IrisDeleteUserAttendForLeave' operation.</returns>
            bool EndIrisDeleteUserAttendForLeave(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisDeleteUserPersonRecogLog' operation.
            /// </summary>
            /// <param name="recog">The value for the 'recog' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisDeleteUserPersonRecogLogDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisDeleteUserPersonRecogLog", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisDeleteUserPersonRecogLogRespon" +
                "se")]
            IAsyncResult BeginIrisDeleteUserPersonRecogLog(UserPersonRecogLog recog, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisDeleteUserPersonRecogLog'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisDeleteUserPersonRecogLog'.</param>
            /// <returns>The 'Int32' returned from the 'IrisDeleteUserPersonRecogLog' operation.</returns>
            int EndIrisDeleteUserPersonRecogLog(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisDeleteUserPersonRecogLogsForIDS' operation.
            /// </summary>
            /// <param name="recogIds">The value for the 'recogIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisDeleteUserPersonRecogLogsForID" +
                "SDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisDeleteUserPersonRecogLogsForID" +
                "S", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisDeleteUserPersonRecogLogsForID" +
                "SResponse")]
            IAsyncResult BeginIrisDeleteUserPersonRecogLogsForIDS(int[] recogIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisDeleteUserPersonRecogLogsForIDS'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisDeleteUserPersonRecogLogsForIDS'.</param>
            /// <returns>The 'Int32' returned from the 'IrisDeleteUserPersonRecogLogsForIDS' operation.</returns>
            int EndIrisDeleteUserPersonRecogLogsForIDS(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetAllPersonRecog' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="depart_name">The value for the 'depart_name' parameter of this action.</param>
            /// <param name="person_name">The value for the 'person_name' parameter of this action.</param>
            /// <param name="work_sn">The value for the 'work_sn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAllPersonRecogDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAllPersonRecog", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAllPersonRecogResponse")]
            [WebGet()]
            IAsyncResult BeginIrisGetAllPersonRecog(DateTime beginTime, DateTime endTime, string depart_name, string person_name, string work_sn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetAllPersonRecog'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetAllPersonRecog'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetAllPersonRecog' operation.</returns>
            QueryResult<UserAllPersonRecogLog> EndIrisGetAllPersonRecog(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetAttendDetail' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="devTypeIdLst">The value for the 'devTypeIdLst' parameter of this action.</param>
            /// <param name="workTime">The value for the 'workTime' parameter of this action.</param>
            /// <param name="personId">The value for the 'personId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendDetailDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendDetail", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendDetailResponse")]
            [WebGet()]
            IAsyncResult BeginIrisGetAttendDetail(DateTime beginTime, DateTime endTime, int[] devTypeIdLst, int workTime, int personId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetAttendDetail'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetAttendDetail'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetAttendDetail' operation.</returns>
            QueryResult<UserAttendRecDetail> EndIrisGetAttendDetail(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetAttendForLeave' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendForLeaveDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendForLeave", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendForLeaveResponse")]
            [WebGet()]
            IAsyncResult BeginIrisGetAttendForLeave(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetAttendForLeave'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetAttendForLeave'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetAttendForLeave' operation.</returns>
            QueryResult<UserAttendForLeave> EndIrisGetAttendForLeave(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetAttendForLeaveBase' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendForLeaveBaseDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendForLeaveBase", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendForLeaveBaseResponse")]
            [WebGet()]
            IAsyncResult BeginIrisGetAttendForLeaveBase(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetAttendForLeaveBase'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetAttendForLeaveBase'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetAttendForLeaveBase' operation.</returns>
            QueryResult<attend_for_leave> EndIrisGetAttendForLeaveBase(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetAttendLeaveForDepart' operation.
            /// </summary>
            /// <param name="lstDepartID">The value for the 'lstDepartID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendLeaveForDepartDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendLeaveForDepart", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendLeaveForDepartRespons" +
                "e")]
            [WebGet()]
            IAsyncResult BeginIrisGetAttendLeaveForDepart(IEnumerable<int> lstDepartID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetAttendLeaveForDepart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetAttendLeaveForDepart'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetAttendLeaveForDepart' operation.</returns>
            QueryResult<UserAttendForLeave> EndIrisGetAttendLeaveForDepart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetAttendRec' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="name">The value for the 'name' parameter of this action.</param>
            /// <param name="workSN">The value for the 'workSN' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendRecDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendRec", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendRecResponse")]
            [WebGet()]
            IAsyncResult BeginIrisGetAttendRec(DateTime beginTime, DateTime endTime, string name, string workSN, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetAttendRec'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetAttendRec'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetAttendRec' operation.</returns>
            QueryResult<UserAttendRecDetail> EndIrisGetAttendRec(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetAttendRecSign' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIdLst">The value for the 'departIdLst' parameter of this action.</param>
            /// <param name="devTypeIdLst">The value for the 'devTypeIdLst' parameter of this action.</param>
            /// <param name="name">The value for the 'name' parameter of this action.</param>
            /// <param name="workSN">The value for the 'workSN' parameter of this action.</param>
            /// <param name="principalIdList">The value for the 'principalIdList' parameter of this action.</param>
            /// <param name="workTypeIdList">The value for the 'workTypeIdList' parameter of this action.</param>
            /// <param name="workTime">The value for the 'workTime' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendRecSignDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendRecSign", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendRecSignResponse")]
            [WebGet()]
            IAsyncResult BeginIrisGetAttendRecSign(DateTime beginTime, DateTime endTime, IEnumerable<int> departIdLst, IEnumerable<int> devTypeIdLst, string name, string workSN, IEnumerable<int> principalIdList, IEnumerable<int> workTypeIdList, int workTime, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetAttendRecSign'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetAttendRecSign'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetAttendRecSign' operation.</returns>
            QueryResult<UserAttendRec> EndIrisGetAttendRecSign(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetAttendSignDetail' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="devTypeIdLst">The value for the 'devTypeIdLst' parameter of this action.</param>
            /// <param name="workTime">The value for the 'workTime' parameter of this action.</param>
            /// <param name="personId">The value for the 'personId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendSignDetailDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendSignDetail", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetAttendSignDetailResponse")]
            IAsyncResult BeginIrisGetAttendSignDetail(DateTime beginTime, DateTime endTime, int[] devTypeIdLst, int workTime, int personId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetAttendSignDetail'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetAttendSignDetail'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetAttendSignDetail' operation.</returns>
            QueryResult<UserAttendRecDetail> EndIrisGetAttendSignDetail(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetDepart' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetDepartDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetDepart", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetDepartResponse")]
            [WebGet()]
            IAsyncResult BeginIrisGetDepart(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetDepart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetDepart'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetDepart' operation.</returns>
            QueryResult<depart> EndIrisGetDepart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetError' operation.
            /// </summary>
            /// <param name="errorId">The value for the 'errorId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetErrorDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetError", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetErrorResponse")]
            IAsyncResult BeginIrisGetError(int errorId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetError'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetError'.</param>
            /// <returns>The 'String' returned from the 'IrisGetError' operation.</returns>
            string EndIrisGetError(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetInWellPerson' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetInWellPersonDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetInWellPerson", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetInWellPersonResponse")]
            [WebGet()]
            IAsyncResult BeginIrisGetInWellPerson(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetInWellPerson'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetInWellPerson'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetInWellPerson' operation.</returns>
            QueryResult<UserInWellPerson> EndIrisGetInWellPerson(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetInWellPersonForDepart' operation.
            /// </summary>
            /// <param name="lstDepartID">The value for the 'lstDepartID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetInWellPersonForDepartDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetInWellPersonForDepart", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetInWellPersonForDepartRespon" +
                "se")]
            [WebGet()]
            IAsyncResult BeginIrisGetInWellPersonForDepart(IEnumerable<int> lstDepartID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetInWellPersonForDepart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetInWellPersonForDepart'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetInWellPersonForDepart' operation.</returns>
            QueryResult<UserInWellPerson> EndIrisGetInWellPersonForDepart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetLeaveType' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetLeaveTypeDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetLeaveType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetLeaveTypeResponse")]
            [WebGet()]
            IAsyncResult BeginIrisGetLeaveType(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetLeaveType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetLeaveType'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetLeaveType' operation.</returns>
            QueryResult<LeaveType> EndIrisGetLeaveType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetNeedUserPersonSimple' operation.
            /// </summary>
            /// <param name="workSN">The value for the 'workSN' parameter of this action.</param>
            /// <param name="personName">The value for the 'personName' parameter of this action.</param>
            /// <param name="departID">The value for the 'departID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetNeedUserPersonSimpleDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetNeedUserPersonSimple", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetNeedUserPersonSimpleRespons" +
                "e")]
            [WebGet()]
            IAsyncResult BeginIrisGetNeedUserPersonSimple(string workSN, string personName, int departID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetNeedUserPersonSimple'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetNeedUserPersonSimple'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetNeedUserPersonSimple' operation.</returns>
            QueryResult<UserPersonSimple> EndIrisGetNeedUserPersonSimple(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetPersonRecog' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="person_id">The value for the 'person_id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetPersonRecogDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetPersonRecog", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetPersonRecogResponse")]
            [WebGet()]
            IAsyncResult BeginIrisGetPersonRecog(DateTime beginTime, DateTime endTime, int person_id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetPersonRecog'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetPersonRecog'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetPersonRecog' operation.</returns>
            QueryResult<UserPersonRecogLog> EndIrisGetPersonRecog(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetPersonRecogByDevType' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="devTypeIdLst">The value for the 'devTypeIdLst' parameter of this action.</param>
            /// <param name="person_id">The value for the 'person_id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetPersonRecogByDevTypeDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetPersonRecogByDevType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetPersonRecogByDevTypeRespons" +
                "e")]
            [WebGet()]
            IAsyncResult BeginIrisGetPersonRecogByDevType(DateTime beginTime, DateTime endTime, int[] devTypeIdLst, int person_id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetPersonRecogByDevType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetPersonRecogByDevType'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetPersonRecogByDevType' operation.</returns>
            QueryResult<UserPersonRecogLog> EndIrisGetPersonRecogByDevType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetPersonSum' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetPersonSumDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetPersonSum", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetPersonSumResponse")]
            IAsyncResult BeginIrisGetPersonSum(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetPersonSum'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetPersonSum'.</param>
            /// <returns>The 'Int32' returned from the 'IrisGetPersonSum' operation.</returns>
            int EndIrisGetPersonSum(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetUserPersonSimple' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetUserPersonSimpleDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetUserPersonSimple", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetUserPersonSimpleResponse")]
            [WebGet()]
            IAsyncResult BeginIrisGetUserPersonSimple(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetUserPersonSimple'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetUserPersonSimple'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetUserPersonSimple' operation.</returns>
            QueryResult<UserPersonSimple> EndIrisGetUserPersonSimple(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetUserPersonSimpleForDepart' operation.
            /// </summary>
            /// <param name="depart_id">The value for the 'depart_id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetUserPersonSimpleForDepartDo" +
                "mainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetUserPersonSimpleForDepart", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetUserPersonSimpleForDepartRe" +
                "sponse")]
            [WebGet()]
            IAsyncResult BeginIrisGetUserPersonSimpleForDepart(int depart_id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetUserPersonSimpleForDepart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetUserPersonSimpleForDepart'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetUserPersonSimpleForDepart' operation.</returns>
            QueryResult<UserPersonSimple> EndIrisGetUserPersonSimpleForDepart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetUserPersonSimpleForOperatorDepart' operation.
            /// </summary>
            /// <param name="lstDepartID">The value for the 'lstDepartID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetUserPersonSimpleForOperator" +
                "DepartDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetUserPersonSimpleForOperator" +
                "Depart", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetUserPersonSimpleForOperator" +
                "DepartResponse")]
            [WebGet()]
            IAsyncResult BeginIrisGetUserPersonSimpleForOperatorDepart(IEnumerable<int> lstDepartID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetUserPersonSimpleForOperatorDepart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetUserPersonSimpleForOperatorDepart'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetUserPersonSimpleForOperatorDepart' operation.</returns>
            QueryResult<UserPersonSimple> EndIrisGetUserPersonSimpleForOperatorDepart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetUserPersonSimpleForWorkSN' operation.
            /// </summary>
            /// <param name="work_sn">The value for the 'work_sn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetUserPersonSimpleForWorkSNDo" +
                "mainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetUserPersonSimpleForWorkSN", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetUserPersonSimpleForWorkSNRe" +
                "sponse")]
            IAsyncResult BeginIrisGetUserPersonSimpleForWorkSN(string work_sn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetUserPersonSimpleForWorkSN'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetUserPersonSimpleForWorkSN'.</param>
            /// <returns>The 'UserPersonSimple' returned from the 'IrisGetUserPersonSimpleForWorkSN' operation.</returns>
            UserPersonSimple EndIrisGetUserPersonSimpleForWorkSN(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisGetZKHBAttendRec' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="devTypeIdLst">The value for the 'devTypeIdLst' parameter of this action.</param>
            /// <param name="name">The value for the 'name' parameter of this action.</param>
            /// <param name="workSN">The value for the 'workSN' parameter of this action.</param>
            /// <param name="principalIdList">The value for the 'principalIdList' parameter of this action.</param>
            /// <param name="workTypeIdList">The value for the 'workTypeIdList' parameter of this action.</param>
            /// <param name="workTime">The value for the 'workTime' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetZKHBAttendRecDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisGetZKHBAttendRec", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisGetZKHBAttendRecResponse")]
            [WebGet()]
            IAsyncResult BeginIrisGetZKHBAttendRec(DateTime beginTime, DateTime endTime, string[] departName, IEnumerable<int> devTypeIdLst, string name, string workSN, IEnumerable<int> principalIdList, IEnumerable<int> workTypeIdList, int workTime, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisGetZKHBAttendRec'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisGetZKHBAttendRec'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisGetZKHBAttendRec' operation.</returns>
            QueryResult<UserAttendRec> EndIrisGetZKHBAttendRec(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisInsertUserPersonRecogLog' operation.
            /// </summary>
            /// <param name="recog">The value for the 'recog' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisInsertUserPersonRecogLogDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisInsertUserPersonRecogLog", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisInsertUserPersonRecogLogRespon" +
                "se")]
            IAsyncResult BeginIrisInsertUserPersonRecogLog(UserPersonRecogLog recog, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisInsertUserPersonRecogLog'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisInsertUserPersonRecogLog'.</param>
            /// <returns>The 'Int32' returned from the 'IrisInsertUserPersonRecogLog' operation.</returns>
            int EndIrisInsertUserPersonRecogLog(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisInsertUserPersonRecogLogForOverInWell' operation.
            /// </summary>
            /// <param name="personID">The value for the 'personID' parameter of this action.</param>
            /// <param name="dt">The value for the 'dt' parameter of this action.</param>
            /// <param name="devType">The value for the 'devType' parameter of this action.</param>
            /// <param name="remarks">The value for the 'remarks' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisInsertUserPersonRecogLogForOve" +
                "rInWellDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisInsertUserPersonRecogLogForOve" +
                "rInWell", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisInsertUserPersonRecogLogForOve" +
                "rInWellResponse")]
            IAsyncResult BeginIrisInsertUserPersonRecogLogForOverInWell(int[] personID, DateTime[] dt, int[] devType, string remarks, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisInsertUserPersonRecogLogForOverInWell'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisInsertUserPersonRecogLogForOverInWell'.</param>
            /// <returns>The 'Int32' returned from the 'IrisInsertUserPersonRecogLogForOverInWell' operation.</returns>
            int EndIrisInsertUserPersonRecogLogForOverInWell(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisInsetOrUpdateUserAttendForLeave' operation.
            /// </summary>
            /// <param name="attendForLeave">The value for the 'attendForLeave' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisInsetOrUpdateUserAttendForLeav" +
                "eDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisInsetOrUpdateUserAttendForLeav" +
                "e", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisInsetOrUpdateUserAttendForLeav" +
                "eResponse")]
            IAsyncResult BeginIrisInsetOrUpdateUserAttendForLeave(UserAttendForLeave attendForLeave, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisInsetOrUpdateUserAttendForLeave'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisInsetOrUpdateUserAttendForLeave'.</param>
            /// <returns>The 'Boolean' returned from the 'IrisInsetOrUpdateUserAttendForLeave' operation.</returns>
            bool EndIrisInsetOrUpdateUserAttendForLeave(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisRebuildAttend' operation.
            /// </summary>
            /// <param name="beginDate">The value for the 'beginDate' parameter of this action.</param>
            /// <param name="person_ids">The value for the 'person_ids' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisRebuildAttendDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisRebuildAttend", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisRebuildAttendResponse")]
            IAsyncResult BeginIrisRebuildAttend(DateTime beginDate, int[] person_ids, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisRebuildAttend'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisRebuildAttend'.</param>
            /// <returns>The 'Int32' returned from the 'IrisRebuildAttend' operation.</returns>
            int EndIrisRebuildAttend(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisRebuildAttendPart' operation.
            /// </summary>
            /// <param name="beginDate">The value for the 'beginDate' parameter of this action.</param>
            /// <param name="offset">The value for the 'offset' parameter of this action.</param>
            /// <param name="count">The value for the 'count' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisRebuildAttendPartDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisRebuildAttendPart", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisRebuildAttendPartResponse")]
            IAsyncResult BeginIrisRebuildAttendPart(DateTime beginDate, int offset, int count, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisRebuildAttendPart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisRebuildAttendPart'.</param>
            /// <returns>The 'Int32' returned from the 'IrisRebuildAttendPart' operation.</returns>
            int EndIrisRebuildAttendPart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisTest' operation.
            /// </summary>
            /// <param name="SQLstr">The value for the 'SQLstr' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisTestDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisTest", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisTestResponse")]
            [WebGet()]
            IAsyncResult BeginIrisTest(string SQLstr, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisTest'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisTest'.</param>
            /// <returns>The 'QueryResult' returned from the 'IrisTest' operation.</returns>
            QueryResult<attend_record_base> EndIrisTest(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IrisUpdateUserAttendForLeave' operation.
            /// </summary>
            /// <param name="attendForLeave">The value for the 'attendForLeave' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IrisUpdateUserAttendForLeaveDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IrisUpdateUserAttendForLeave", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IrisUpdateUserAttendForLeaveRespon" +
                "se")]
            IAsyncResult BeginIrisUpdateUserAttendForLeave(UserAttendForLeave attendForLeave, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIrisUpdateUserAttendForLeave'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIrisUpdateUserAttendForLeave'.</param>
            /// <returns>The 'Boolean' returned from the 'IrisUpdateUserAttendForLeave' operation.</returns>
            bool EndIrisUpdateUserAttendForLeave(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IsDeviceExist' operation.
            /// </summary>
            /// <param name="devSn">The value for the 'devSn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IsDeviceExistDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IsDeviceExist", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IsDeviceExistResponse")]
            IAsyncResult BeginIsDeviceExist(string devSn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIsDeviceExist'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIsDeviceExist'.</param>
            /// <returns>The 'Boolean' returned from the 'IsDeviceExist' operation.</returns>
            bool EndIsDeviceExist(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IsFestivalExist' operation.
            /// </summary>
            /// <param name="fesval">The value for the 'fesval' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IsFestivalExistDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IsFestivalExist", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IsFestivalExistResponse")]
            IAsyncResult BeginIsFestivalExist(FestivalInfo fesval, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIsFestivalExist'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIsFestivalExist'.</param>
            /// <returns>The 'Boolean' returned from the 'IsFestivalExist' operation.</returns>
            bool EndIsFestivalExist(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IsOperatorExist' operation.
            /// </summary>
            /// <param name="logName">The value for the 'logName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IsOperatorExistDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IsOperatorExist", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IsOperatorExistResponse")]
            IAsyncResult BeginIsOperatorExist(string logName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIsOperatorExist'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIsOperatorExist'.</param>
            /// <returns>The 'Boolean' returned from the 'IsOperatorExist' operation.</returns>
            bool EndIsOperatorExist(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'IsPasswordOk' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/IsPasswordOkDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/IsPasswordOk", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/IsPasswordOkResponse")]
            IAsyncResult BeginIsPasswordOk(string userName, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginIsPasswordOk'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginIsPasswordOk'.</param>
            /// <returns>The 'Int32' returned from the 'IsPasswordOk' operation.</returns>
            int EndIsPasswordOk(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'JudgeTimeIsExist' operation.
            /// </summary>
            /// <param name="personIDs">The value for the 'personIDs' parameter of this action.</param>
            /// <param name="startTime">The value for the 'startTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/JudgeTimeIsExistDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/JudgeTimeIsExist", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/JudgeTimeIsExistResponse")]
            IAsyncResult BeginJudgeTimeIsExist(int[] personIDs, DateTime startTime, DateTime endTime, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginJudgeTimeIsExist'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginJudgeTimeIsExist'.</param>
            /// <returns>The 'Boolean' returned from the 'JudgeTimeIsExist' operation.</returns>
            bool EndJudgeTimeIsExist(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyAutoDBBackup' operation.
            /// </summary>
            /// <param name="period">The value for the 'period' parameter of this action.</param>
            /// <param name="sub_period">The value for the 'sub_period' parameter of this action.</param>
            /// <param name="concrete_time">The value for the 'concrete_time' parameter of this action.</param>
            /// <param name="backup_destination">The value for the 'backup_destination' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyAutoDBBackupDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyAutoDBBackup", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyAutoDBBackupResponse")]
            IAsyncResult BeginModifyAutoDBBackup(int period, int sub_period, string concrete_time, string backup_destination, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyAutoDBBackup'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyAutoDBBackup'.</param>
            /// <returns>The 'Byte' returned from the 'ModifyAutoDBBackup' operation.</returns>
            byte EndModifyAutoDBBackup(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyClassOrder' operation.
            /// </summary>
            /// <param name="class_order_id">The value for the 'class_order_id' parameter of this action.</param>
            /// <param name="class_order_name">The value for the 'class_order_name' parameter of this action.</param>
            /// <param name="attend_sign">The value for the 'attend_sign' parameter of this action.</param>
            /// <param name="class_type_id">The value for the 'class_type_id' parameter of this action.</param>
            /// <param name="attend_off_minutes">The value for the 'attend_off_minutes' parameter of this action.</param>
            /// <param name="in_well_start_time">The value for the 'in_well_start_time' parameter of this action.</param>
            /// <param name="in_well_end_time">The value for the 'in_well_end_time' parameter of this action.</param>
            /// <param name="out_well_start_time">The value for the 'out_well_start_time' parameter of this action.</param>
            /// <param name="out_well_end_time">The value for the 'out_well_end_time' parameter of this action.</param>
            /// <param name="attend_latest_worktime">The value for the 'attend_latest_worktime' parameter of this action.</param>
            /// <param name="attend_max_minutes">The value for the 'attend_max_minutes' parameter of this action.</param>
            /// <param name="Is_workcnt_method_standard">The value for the 'Is_workcnt_method_standard' parameter of this action.</param>
            /// <param name="avail_times">The value for the 'avail_times' parameter of this action.</param>
            /// <param name="work_cnts">The value for the 'work_cnts' parameter of this action.</param>
            /// <param name="avail_time_standard">The value for the 'avail_time_standard' parameter of this action.</param>
            /// <param name="work_cnt_standard">The value for the 'work_cnt_standard' parameter of this action.</param>
            /// <param name="memo">The value for the 'memo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyClassOrderDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyClassOrder", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyClassOrderResponse")]
            [WebGet()]
            IAsyncResult BeginModifyClassOrder(
                        string class_order_id, 
                        string class_order_name, 
                        string attend_sign, 
                        string class_type_id, 
                        string attend_off_minutes, 
                        string in_well_start_time, 
                        string in_well_end_time, 
                        string out_well_start_time, 
                        string out_well_end_time, 
                        string attend_latest_worktime, 
                        string attend_max_minutes, 
                        bool Is_workcnt_method_standard, 
                        string[] avail_times, 
                        string[] work_cnts, 
                        string avail_time_standard, 
                        string work_cnt_standard, 
                        string memo, 
                        AsyncCallback callback, 
                        object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyClassOrder'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyClassOrder'.</param>
            /// <returns>The 'QueryResult' returned from the 'ModifyClassOrder' operation.</returns>
            QueryResult<OptionInfo> EndModifyClassOrder(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyClassOrderJiGongShi' operation.
            /// </summary>
            /// <param name="userClassOrderJiGongShi">The value for the 'userClassOrderJiGongShi' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyClassOrderJiGongShiDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyClassOrderJiGongShi", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyClassOrderJiGongShiResponse")]
            IAsyncResult BeginModifyClassOrderJiGongShi(UserClassOrderJiGongShiInfo userClassOrderJiGongShi, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyClassOrderJiGongShi'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyClassOrderJiGongShi'.</param>
            /// <returns>The 'OptionInfo' returned from the 'ModifyClassOrderJiGongShi' operation.</returns>
            OptionInfo EndModifyClassOrderJiGongShi(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyClassOrderSign' operation.
            /// </summary>
            /// <param name="userClassOrerSign">The value for the 'userClassOrerSign' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyClassOrderSignDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyClassOrderSign", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyClassOrderSignResponse")]
            IAsyncResult BeginModifyClassOrderSign(UserClassOrderSignInfo userClassOrerSign, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyClassOrderSign'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyClassOrderSign'.</param>
            /// <returns>The 'OptionInfo' returned from the 'ModifyClassOrderSign' operation.</returns>
            OptionInfo EndModifyClassOrderSign(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyClassType' operation.
            /// </summary>
            /// <param name="class_type_id">The value for the 'class_type_id' parameter of this action.</param>
            /// <param name="class_type_name">The value for the 'class_type_name' parameter of this action.</param>
            /// <param name="memo">The value for the 'memo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyClassTypeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyClassType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyClassTypeResponse")]
            [WebGet()]
            IAsyncResult BeginModifyClassType(string class_type_id, string class_type_name, string memo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyClassType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyClassType'.</param>
            /// <returns>The 'QueryResult' returned from the 'ModifyClassType' operation.</returns>
            QueryResult<OptionInfo> EndModifyClassType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyDepart' operation.
            /// </summary>
            /// <param name="departId">The value for the 'departId' parameter of this action.</param>
            /// <param name="departName">The value for the 'departName' parameter of this action.</param>
            /// <param name="departSn">The value for the 'departSn' parameter of this action.</param>
            /// <param name="parentDepartId">The value for the 'parentDepartId' parameter of this action.</param>
            /// <param name="phone">The value for the 'phone' parameter of this action.</param>
            /// <param name="memo">The value for the 'memo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyDepartDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyDepart", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyDepartResponse")]
            IAsyncResult BeginModifyDepart(string departId, string departName, string departSn, string parentDepartId, string phone, string memo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyDepart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyDepart'.</param>
            /// <returns>The 'OptionInfo' returned from the 'ModifyDepart' operation.</returns>
            OptionInfo EndModifyDepart(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyDevice' operation.
            /// </summary>
            /// <param name="deviceSn">The value for the 'deviceSn' parameter of this action.</param>
            /// <param name="place">The value for the 'place' parameter of this action.</param>
            /// <param name="startTimes">The value for the 'startTimes' parameter of this action.</param>
            /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyDeviceDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyDevice", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyDeviceResponse")]
            IAsyncResult BeginModifyDevice(string deviceSn, string place, string[] startTimes, int[] devTypes, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyDevice'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyDevice'.</param>
            /// <returns>The 'Byte' returned from the 'ModifyDevice' operation.</returns>
            byte EndModifyDevice(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyDeviceYangMei' operation.
            /// </summary>
            /// <param name="deviceSn">The value for the 'deviceSn' parameter of this action.</param>
            /// <param name="place">The value for the 'place' parameter of this action.</param>
            /// <param name="startTimes">The value for the 'startTimes' parameter of this action.</param>
            /// <param name="devTypes">The value for the 'devTypes' parameter of this action.</param>
            /// <param name="devFunction">The value for the 'devFunction' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyDeviceYangMeiDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyDeviceYangMei", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyDeviceYangMeiResponse")]
            IAsyncResult BeginModifyDeviceYangMei(string deviceSn, string place, string[] startTimes, int[] devTypes, string devFunction, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyDeviceYangMei'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyDeviceYangMei'.</param>
            /// <returns>The 'Byte' returned from the 'ModifyDeviceYangMei' operation.</returns>
            byte EndModifyDeviceYangMei(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyFestival' operation.
            /// </summary>
            /// <param name="fesval">The value for the 'fesval' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyFestivalDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyFestival", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyFestivalResponse")]
            IAsyncResult BeginModifyFestival(FestivalInfo fesval, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyFestival'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyFestival'.</param>
            /// <returns>The 'Byte' returned from the 'ModifyFestival' operation.</returns>
            byte EndModifyFestival(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyOperatorInfo' operation.
            /// </summary>
            /// <param name="oldLogName">The value for the 'oldLogName' parameter of this action.</param>
            /// <param name="opInfo">The value for the 'opInfo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyOperatorInfoDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyOperatorInfo", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyOperatorInfoResponse")]
            IAsyncResult BeginModifyOperatorInfo(string oldLogName, operator_info opInfo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyOperatorInfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyOperatorInfo'.</param>
            /// <returns>The 'Boolean' returned from the 'ModifyOperatorInfo' operation.</returns>
            bool EndModifyOperatorInfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyOperatorPassword' operation.
            /// </summary>
            /// <param name="logName">The value for the 'logName' parameter of this action.</param>
            /// <param name="inputPwd">The value for the 'inputPwd' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyOperatorPasswordDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyOperatorPassword", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyOperatorPasswordResponse")]
            IAsyncResult BeginModifyOperatorPassword(string logName, string inputPwd, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyOperatorPassword'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyOperatorPassword'.</param>
            /// <returns>The 'Boolean' returned from the 'ModifyOperatorPassword' operation.</returns>
            bool EndModifyOperatorPassword(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyPassword' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="newPwd">The value for the 'newPwd' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyPasswordDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyPassword", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyPasswordResponse")]
            IAsyncResult BeginModifyPassword(string userName, string newPwd, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyPassword'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyPassword'.</param>
            /// <returns>The 'Byte' returned from the 'ModifyPassword' operation.</returns>
            byte EndModifyPassword(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyPrincipal' operation.
            /// </summary>
            /// <param name="principalInfo">The value for the 'principalInfo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyPrincipalDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyPrincipal", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyPrincipalResponse")]
            IAsyncResult BeginModifyPrincipal(PrincipalInfo principalInfo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyPrincipal'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyPrincipal'.</param>
            /// <returns>The 'OptionInfo' returned from the 'ModifyPrincipal' operation.</returns>
            OptionInfo EndModifyPrincipal(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyPrincipalType' operation.
            /// </summary>
            /// <param name="info">The value for the 'info' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyPrincipalTypeDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyPrincipalType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyPrincipalTypeResponse")]
            IAsyncResult BeginModifyPrincipalType(PrincipalTypeInfo info, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyPrincipalType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyPrincipalType'.</param>
            /// <returns>The 'OptionInfo' returned from the 'ModifyPrincipalType' operation.</returns>
            OptionInfo EndModifyPrincipalType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifySystemParam' operation.
            /// </summary>
            /// <param name="over_time">The value for the 'over_time' parameter of this action.</param>
            /// <param name="dup_time">The value for the 'dup_time' parameter of this action.</param>
            /// <param name="in_dup_recog">The value for the 'in_dup_recog' parameter of this action.</param>
            /// <param name="out_dup_recog">The value for the 'out_dup_recog' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifySystemParamDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifySystemParam", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifySystemParamResponse")]
            IAsyncResult BeginModifySystemParam(int over_time, short dup_time, short in_dup_recog, short out_dup_recog, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifySystemParam'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifySystemParam'.</param>
            /// <returns>The 'Byte' returned from the 'ModifySystemParam' operation.</returns>
            byte EndModifySystemParam(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyWorkCntPolicy' operation.
            /// </summary>
            /// <param name="lt">The value for the 'lt' parameter of this action.</param>
            /// <param name="gt">The value for the 'gt' parameter of this action.</param>
            /// <param name="accuracy">The value for the 'accuracy' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyWorkCntPolicyDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyWorkCntPolicy", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyWorkCntPolicyResponse")]
            IAsyncResult BeginModifyWorkCntPolicy(int lt, int gt, int accuracy, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyWorkCntPolicy'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyWorkCntPolicy'.</param>
            /// <returns>The 'Byte' returned from the 'ModifyWorkCntPolicy' operation.</returns>
            byte EndModifyWorkCntPolicy(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ModifyWorkType' operation.
            /// </summary>
            /// <param name="workTypeInfo">The value for the 'workTypeInfo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyWorkTypeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/ModifyWorkType", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/ModifyWorkTypeResponse")]
            IAsyncResult BeginModifyWorkType(WorkTypeInfo workTypeInfo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginModifyWorkType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginModifyWorkType'.</param>
            /// <returns>The 'OptionInfo' returned from the 'ModifyWorkType' operation.</returns>
            OptionInfo EndModifyWorkType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'MyGetXlsUserAttendRec' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="departIdLst">The value for the 'departIdLst' parameter of this action.</param>
            /// <param name="ClassTypeId">The value for the 'ClassTypeId' parameter of this action.</param>
            /// <param name="name">The value for the 'name' parameter of this action.</param>
            /// <param name="workSn">The value for the 'workSn' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/MyGetXlsUserAttendRecDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/MyGetXlsUserAttendRec", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/MyGetXlsUserAttendRecResponse")]
            [WebGet()]
            IAsyncResult BeginMyGetXlsUserAttendRec(DateTime beginTime, DateTime endTime, int[] departIdLst, int ClassTypeId, string name, string workSn, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginMyGetXlsUserAttendRec'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginMyGetXlsUserAttendRec'.</param>
            /// <returns>The 'QueryResult' returned from the 'MyGetXlsUserAttendRec' operation.</returns>
            QueryResult<XlsUserAttendRec> EndMyGetXlsUserAttendRec(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SetLeaderScheduling' operation.
            /// </summary>
            /// <param name="leaderSchedulingList">The value for the 'leaderSchedulingList' parameter of this action.</param>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/SetLeaderSchedulingDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/SetLeaderScheduling", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/SetLeaderSchedulingResponse")]
            IAsyncResult BeginSetLeaderScheduling(XiGouLeaderScheduling[] leaderSchedulingList, DateTime beginTime, DateTime endTime, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSetLeaderScheduling'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSetLeaderScheduling'.</param>
            /// <returns>The 'Boolean' returned from the 'SetLeaderScheduling' operation.</returns>
            bool EndSetLeaderScheduling(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SetOperDepartPotenceAndPurvew' operation.
            /// </summary>
            /// <param name="operatorName">The value for the 'operatorName' parameter of this action.</param>
            /// <param name="departIDList">The value for the 'departIDList' parameter of this action.</param>
            /// <param name="purviewIDList">The value for the 'purviewIDList' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/SetOperDepartPotenceAndPurvewDomai" +
                "nServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/SetOperDepartPotenceAndPurvew", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/SetOperDepartPotenceAndPurvewRespo" +
                "nse")]
            IAsyncResult BeginSetOperDepartPotenceAndPurvew(string operatorName, IEnumerable<int> departIDList, IEnumerable<int> purviewIDList, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSetOperDepartPotenceAndPurvew'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSetOperDepartPotenceAndPurvew'.</param>
            /// <returns>The 'Boolean' returned from the 'SetOperDepartPotenceAndPurvew' operation.</returns>
            bool EndSetOperDepartPotenceAndPurvew(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SetStopIrisRecords' operation.
            /// </summary>
            /// <param name="personIDs">The value for the 'personIDs' parameter of this action.</param>
            /// <param name="startTime">The value for the 'startTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="policy">The value for the 'policy' parameter of this action.</param>
            /// <param name="IsBatch">The value for the 'IsBatch' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/SetStopIrisRecordsDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/SetStopIrisRecords", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/SetStopIrisRecordsResponse")]
            IAsyncResult BeginSetStopIrisRecords(int[] personIDs, IEnumerable<string> startTime, IEnumerable<string> endTime, IEnumerable<int> policy, bool IsBatch, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSetStopIrisRecords'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSetStopIrisRecords'.</param>
            /// <returns>The 'OptionInfo' returned from the 'SetStopIrisRecords' operation.</returns>
            OptionInfo EndSetStopIrisRecords(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'StartMannualDBBackup' operation.
            /// </summary>
            /// <param name="backupDestination">The value for the 'backupDestination' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/StartMannualDBBackupDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/StartMannualDBBackup", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/StartMannualDBBackupResponse")]
            IAsyncResult BeginStartMannualDBBackup(string backupDestination, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginStartMannualDBBackup'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginStartMannualDBBackup'.</param>
            /// <returns>The 'Int32' returned from the 'StartMannualDBBackup' operation.</returns>
            int EndStartMannualDBBackup(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'StartSyncLocateAttendInfo' operation.
            /// </summary>
            /// <param name="beginTime">The value for the 'beginTime' parameter of this action.</param>
            /// <param name="endTime">The value for the 'endTime' parameter of this action.</param>
            /// <param name="personIds">The value for the 'personIds' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/StartSyncLocateAttendInfoDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/StartSyncLocateAttendInfo", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/StartSyncLocateAttendInfoResponse")]
            IAsyncResult BeginStartSyncLocateAttendInfo(DateTime beginTime, DateTime endTime, int[] personIds, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginStartSyncLocateAttendInfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginStartSyncLocateAttendInfo'.</param>
            /// <returns>The 'String' returned from the 'StartSyncLocateAttendInfo' operation.</returns>
            string EndStartSyncLocateAttendInfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'StartSyncPerson' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/StartSyncPersonDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/StartSyncPerson", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/StartSyncPersonResponse")]
            IAsyncResult BeginStartSyncPerson(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginStartSyncPerson'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginStartSyncPerson'.</param>
            /// <returns>The 'Int32' returned from the 'StartSyncPerson' operation.</returns>
            int EndStartSyncPerson(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SyncPersonInfo' operation.
            /// </summary>
            /// <param name="startRow">The value for the 'startRow' parameter of this action.</param>
            /// <param name="deltaRow">The value for the 'deltaRow' parameter of this action.</param>
            /// <param name="count">The value for the 'count' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/SyncPersonInfoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/SyncPersonInfo", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/SyncPersonInfoResponse")]
            IAsyncResult BeginSyncPersonInfo(int startRow, int deltaRow, int count, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSyncPersonInfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSyncPersonInfo'.</param>
            /// <returns>The 'OptionInfo' returned from the 'SyncPersonInfo' operation.</returns>
            OptionInfo EndSyncPersonInfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UndoReportRecord' operation.
            /// </summary>
            /// <param name="infos">The value for the 'infos' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/UndoReportRecordDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/UndoReportRecord", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/UndoReportRecordResponse")]
            IAsyncResult BeginUndoReportRecord(ReportRecordInfoOnDepart_ZhouYuanShan[] infos, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUndoReportRecord'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUndoReportRecord'.</param>
            /// <returns>The 'OptionInfo' returned from the 'UndoReportRecord' operation.</returns>
            OptionInfo EndUndoReportRecord(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdatePersonInfoOnMine' operation.
            /// </summary>
            /// <param name="person_id">The value for the 'person_id' parameter of this action.</param>
            /// <param name="depart_id">The value for the 'depart_id' parameter of this action.</param>
            /// <param name="class_type_id_on_ground">The value for the 'class_type_id_on_ground' parameter of this action.</param>
            /// <param name="class_type_id">The value for the 'class_type_id' parameter of this action.</param>
            /// <param name="worksn">The value for the 'worksn' parameter of this action.</param>
            /// <param name="name">The value for the 'name' parameter of this action.</param>
            /// <param name="sex">The value for the 'sex' parameter of this action.</param>
            /// <param name="blood_type">The value for the 'blood_type' parameter of this action.</param>
            /// <param name="birthdate">The value for the 'birthdate' parameter of this action.</param>
            /// <param name="workday">The value for the 'workday' parameter of this action.</param>
            /// <param name="id_card">The value for the 'id_card' parameter of this action.</param>
            /// <param name="phone">The value for the 'phone' parameter of this action.</param>
            /// <param name="address">The value for the 'address' parameter of this action.</param>
            /// <param name="zipcode">The value for the 'zipcode' parameter of this action.</param>
            /// <param name="email">The value for the 'email' parameter of this action.</param>
            /// <param name="memo">The value for the 'memo' parameter of this action.</param>
            /// <param name="imgdata">The value for the 'imgdata' parameter of this action.</param>
            /// <param name="imgType">The value for the 'imgType' parameter of this action.</param>
            /// <param name="principal_id">The value for the 'principal_id' parameter of this action.</param>
            /// <param name="work_type_id">The value for the 'work_type_id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/UpdatePersonInfoOnMineDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/UpdatePersonInfoOnMine", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/UpdatePersonInfoOnMineResponse")]
            IAsyncResult BeginUpdatePersonInfoOnMine(
                        int person_id, 
                        string depart_id, 
                        string class_type_id_on_ground, 
                        string class_type_id, 
                        string worksn, 
                        string name, 
                        string sex, 
                        string blood_type, 
                        string birthdate, 
                        string workday, 
                        string id_card, 
                        string phone, 
                        string address, 
                        string zipcode, 
                        string email, 
                        string memo, 
                        byte[] imgdata, 
                        string imgType, 
                        string principal_id, 
                        string work_type_id, 
                        AsyncCallback callback, 
                        object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdatePersonInfoOnMine'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdatePersonInfoOnMine'.</param>
            /// <returns>The 'QueryResult' returned from the 'UpdatePersonInfoOnMine' operation.</returns>
            QueryResult<OptionInfo> EndUpdatePersonInfoOnMine(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainServiceIriskingAttend/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainServiceIriskingAttend/SubmitChanges", ReplyAction="http://tempuri.org/DomainServiceIriskingAttend/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class DomainServiceIriskingAttendEntityContainer : EntityContainer
        {
            
            public DomainServiceIriskingAttendEntityContainer()
            {
                this.CreateEntitySet<attend_for_leave>(EntitySetOperations.None);
                this.CreateEntitySet<attend_record_base>(EntitySetOperations.Add);
                this.CreateEntitySet<backup_param>(EntitySetOperations.None);
                this.CreateEntitySet<depart>(EntitySetOperations.None);
                this.CreateEntitySet<DeviceInfo>(EntitySetOperations.Edit);
                this.CreateEntitySet<FestivalInfo>(EntitySetOperations.Edit);
                this.CreateEntitySet<LeaveType>(EntitySetOperations.Edit);
                this.CreateEntitySet<operator_info>(EntitySetOperations.None);
                this.CreateEntitySet<operator_potence>(EntitySetOperations.None);
                this.CreateEntitySet<operator_purview>(EntitySetOperations.None);
                this.CreateEntitySet<OptionInfo>(EntitySetOperations.None);
                this.CreateEntitySet<PersonStopIrisInfo>(EntitySetOperations.Edit);
                this.CreateEntitySet<PrincipalInfo>(EntitySetOperations.Edit);
                this.CreateEntitySet<PrincipalTypeInfo>(EntitySetOperations.Edit);
                this.CreateEntitySet<purview>(EntitySetOperations.None);
                this.CreateEntitySet<system_param>(EntitySetOperations.None);
                this.CreateEntitySet<UserAllPersonRecogLog>(EntitySetOperations.None);
                this.CreateEntitySet<UserAttendForLeave>((EntitySetOperations.Add | EntitySetOperations.Remove));
                this.CreateEntitySet<UserAttendRec>(EntitySetOperations.None);
                this.CreateEntitySet<UserAttendRecDetail>(EntitySetOperations.None);
                this.CreateEntitySet<UserClassOrderInfo>(EntitySetOperations.Edit);
                this.CreateEntitySet<UserClassOrderJiGongShiInfo>(EntitySetOperations.Edit);
                this.CreateEntitySet<UserClassOrderSignInfo>(EntitySetOperations.Edit);
                this.CreateEntitySet<UserClassTypeInfo>(EntitySetOperations.Edit);
                this.CreateEntitySet<UserDepartInfo>(EntitySetOperations.Edit);
                this.CreateEntitySet<UserInWellPerson>(EntitySetOperations.Edit);
                this.CreateEntitySet<UserOperationLog>(EntitySetOperations.Edit);
                this.CreateEntitySet<UserPersonInfo>(EntitySetOperations.Edit);
                this.CreateEntitySet<UserPersonRecogLog>((EntitySetOperations.Add | EntitySetOperations.Edit));
                this.CreateEntitySet<UserPersonSimple>(EntitySetOperations.Edit);
                this.CreateEntitySet<work_cnt_policy>(EntitySetOperations.None);
                this.CreateEntitySet<WorkTypeInfo>(EntitySetOperations.Edit);
                this.CreateEntitySet<XlsUserAttendRec>(EntitySetOperations.None);
                this.CreateEntitySet<AttendDepartInWellDetail>(EntitySetOperations.None);
                this.CreateEntitySet<AttendDepartInWellQuery>(EntitySetOperations.None);
                this.CreateEntitySet<AttendInComplete>(EntitySetOperations.None);
                this.CreateEntitySet<AttendPersonInWellQuery>(EntitySetOperations.None);
                this.CreateEntitySet<GuoDianReportData>(EntitySetOperations.None);
                this.CreateEntitySet<HuFengDayAttendReport>(EntitySetOperations.None);
                this.CreateEntitySet<HuFengMonthAttendReport>(EntitySetOperations.None);
                this.CreateEntitySet<InCompleteRecord>(EntitySetOperations.None);
                this.CreateEntitySet<LeakageAttendance>(EntitySetOperations.None);
                this.CreateEntitySet<LocateRecordAddedEntity>(EntitySetOperations.Edit);
                this.CreateEntitySet<OfficeAttend>(EntitySetOperations.None);
                this.CreateEntitySet<PersonAttend>(EntitySetOperations.None);
                this.CreateEntitySet<PersonAttendRecord>(EntitySetOperations.None);
                this.CreateEntitySet<PersonFullAttendInfo>(EntitySetOperations.None);
                this.CreateEntitySet<PersonLatearrivalInfo>(EntitySetOperations.None);
                this.CreateEntitySet<PersonLeaveListInfo>(EntitySetOperations.None);
                this.CreateEntitySet<PersonMealSuppleInfo>(EntitySetOperations.None);
                this.CreateEntitySet<PersonMonthAttend>(EntitySetOperations.None);
                this.CreateEntitySet<PersonOriginInfo>(EntitySetOperations.None);
                this.CreateEntitySet<ReportPersonMonth>(EntitySetOperations.None);
                this.CreateEntitySet<TotalAttend>(EntitySetOperations.None);
                this.CreateEntitySet<AttendRecordInfo_WuhuShan>(EntitySetOperations.Edit);
                this.CreateEntitySet<XiGouDayAttendReport>(EntitySetOperations.None);
                this.CreateEntitySet<XiGouInWellPerson>(EntitySetOperations.None);
                this.CreateEntitySet<XiGouInWellPersonDetailReport>(EntitySetOperations.None);
                this.CreateEntitySet<XiGouLeaderAttend>(EntitySetOperations.None);
                this.CreateEntitySet<XiGouLeaderSchedule>(EntitySetOperations.None);
                this.CreateEntitySet<XiGouLeaderScheduling>(EntitySetOperations.Edit);
                this.CreateEntitySet<XiGouMonthAttendReport>(EntitySetOperations.None);
                this.CreateEntitySet<XlsAttendWuHuShanPersonList>(EntitySetOperations.None);
                this.CreateEntitySet<DepartMonthAttend>(EntitySetOperations.None);
                this.CreateEntitySet<LunchRecordInfoOnDepart>(EntitySetOperations.Edit);
                this.CreateEntitySet<LunchRecordInfoOnPerson>(EntitySetOperations.Edit);
                this.CreateEntitySet<PersonAttendStatistics>(EntitySetOperations.None);
                this.CreateEntitySet<PersonDayAttend>(EntitySetOperations.None);
                this.CreateEntitySet<ReportRecordInfoOnDepart_ZhouYuanShan>(EntitySetOperations.Edit);
                this.CreateEntitySet<WorkTypeInfo_ZhouYuanShan>(EntitySetOperations.Edit);
                this.CreateEntitySet<ZhuDuanMonthAttendReport>(EntitySetOperations.None);
                this.CreateEntitySet<ZKHBMonthList>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'HuFengDayAttendReport' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class HuFengDayAttendReport : Entity
    {
        
        private string _classOrderName;
        
        private string _departName;
        
        private int _index;
        
        private string _inWellTime;
        
        private string _outWellTime;
        
        private int _personId;
        
        private string _personName;
        
        private string _principalName;
        
        private string _workSn;
        
        private string _workTime;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClassOrderNameChanging(string value);
        partial void OnClassOrderNameChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnInWellTimeChanging(string value);
        partial void OnInWellTimeChanged();
        partial void OnOutWellTimeChanging(string value);
        partial void OnOutWellTimeChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnPrincipalNameChanging(string value);
        partial void OnPrincipalNameChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();
        partial void OnWorkTimeChanging(string value);
        partial void OnWorkTimeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="HuFengDayAttendReport"/> class.
        /// </summary>
        public HuFengDayAttendReport()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClassOrderName' value.
        /// </summary>
        [DataMember()]
        public string ClassOrderName
        {
            get
            {
                return this._classOrderName;
            }
            set
            {
                if ((this._classOrderName != value))
                {
                    this.OnClassOrderNameChanging(value);
                    this.RaiseDataMemberChanging("ClassOrderName");
                    this.ValidateProperty("ClassOrderName", value);
                    this._classOrderName = value;
                    this.RaiseDataMemberChanged("ClassOrderName");
                    this.OnClassOrderNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellTime' value.
        /// </summary>
        [DataMember()]
        public string InWellTime
        {
            get
            {
                return this._inWellTime;
            }
            set
            {
                if ((this._inWellTime != value))
                {
                    this.OnInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("InWellTime");
                    this.ValidateProperty("InWellTime", value);
                    this._inWellTime = value;
                    this.RaiseDataMemberChanged("InWellTime");
                    this.OnInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutWellTime' value.
        /// </summary>
        [DataMember()]
        public string OutWellTime
        {
            get
            {
                return this._outWellTime;
            }
            set
            {
                if ((this._outWellTime != value))
                {
                    this.OnOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("OutWellTime");
                    this.ValidateProperty("OutWellTime", value);
                    this._outWellTime = value;
                    this.RaiseDataMemberChanged("OutWellTime");
                    this.OnOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.RaiseDataMemberChanging("PersonId");
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaiseDataMemberChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PrincipalName' value.
        /// </summary>
        [DataMember()]
        public string PrincipalName
        {
            get
            {
                return this._principalName;
            }
            set
            {
                if ((this._principalName != value))
                {
                    this.OnPrincipalNameChanging(value);
                    this.RaiseDataMemberChanging("PrincipalName");
                    this.ValidateProperty("PrincipalName", value);
                    this._principalName = value;
                    this.RaiseDataMemberChanged("PrincipalName");
                    this.OnPrincipalNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkTime' value.
        /// </summary>
        [DataMember()]
        public string WorkTime
        {
            get
            {
                return this._workTime;
            }
            set
            {
                if ((this._workTime != value))
                {
                    this.OnWorkTimeChanging(value);
                    this.RaiseDataMemberChanging("WorkTime");
                    this.ValidateProperty("WorkTime", value);
                    this._workTime = value;
                    this.RaiseDataMemberChanged("WorkTime");
                    this.OnWorkTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'HuFengMonthAttendReport' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class HuFengMonthAttendReport : Entity
    {
        
        private int _attendCount;
        
        private string[] _classOrderNames;
        
        private string _departName;
        
        private string[] _displayInfo;
        
        private int _index;
        
        private int _personId;
        
        private string _personName;
        
        private string _totalWorkTime;
        
        private string _workSn;
        
        private int[] _workTimes;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttendCountChanging(int value);
        partial void OnAttendCountChanged();
        partial void OnClassOrderNamesChanging(string[] value);
        partial void OnClassOrderNamesChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnDisplayInfoChanging(string[] value);
        partial void OnDisplayInfoChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnTotalWorkTimeChanging(string value);
        partial void OnTotalWorkTimeChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();
        partial void OnWorkTimesChanging(int[] value);
        partial void OnWorkTimesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="HuFengMonthAttendReport"/> class.
        /// </summary>
        public HuFengMonthAttendReport()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AttendCount' value.
        /// </summary>
        [DataMember()]
        public int AttendCount
        {
            get
            {
                return this._attendCount;
            }
            set
            {
                if ((this._attendCount != value))
                {
                    this.OnAttendCountChanging(value);
                    this.RaiseDataMemberChanging("AttendCount");
                    this.ValidateProperty("AttendCount", value);
                    this._attendCount = value;
                    this.RaiseDataMemberChanged("AttendCount");
                    this.OnAttendCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClassOrderNames' value.
        /// </summary>
        [DataMember()]
        public string[] ClassOrderNames
        {
            get
            {
                return this._classOrderNames;
            }
            set
            {
                if ((this._classOrderNames != value))
                {
                    this.OnClassOrderNamesChanging(value);
                    this.RaiseDataMemberChanging("ClassOrderNames");
                    this.ValidateProperty("ClassOrderNames", value);
                    this._classOrderNames = value;
                    this.RaiseDataMemberChanged("ClassOrderNames");
                    this.OnClassOrderNamesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DisplayInfo' value.
        /// </summary>
        [DataMember()]
        public string[] DisplayInfo
        {
            get
            {
                return this._displayInfo;
            }
            set
            {
                if ((this._displayInfo != value))
                {
                    this.OnDisplayInfoChanging(value);
                    this.RaiseDataMemberChanging("DisplayInfo");
                    this.ValidateProperty("DisplayInfo", value);
                    this._displayInfo = value;
                    this.RaiseDataMemberChanged("DisplayInfo");
                    this.OnDisplayInfoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.RaiseDataMemberChanging("PersonId");
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaiseDataMemberChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalWorkTime' value.
        /// </summary>
        [DataMember()]
        public string TotalWorkTime
        {
            get
            {
                return this._totalWorkTime;
            }
            set
            {
                if ((this._totalWorkTime != value))
                {
                    this.OnTotalWorkTimeChanging(value);
                    this.RaiseDataMemberChanging("TotalWorkTime");
                    this.ValidateProperty("TotalWorkTime", value);
                    this._totalWorkTime = value;
                    this.RaiseDataMemberChanged("TotalWorkTime");
                    this.OnTotalWorkTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkTimes' value.
        /// </summary>
        [DataMember()]
        public int[] WorkTimes
        {
            get
            {
                return this._workTimes;
            }
            set
            {
                if ((this._workTimes != value))
                {
                    this.OnWorkTimesChanging(value);
                    this.RaiseDataMemberChanging("WorkTimes");
                    this.ValidateProperty("WorkTimes", value);
                    this._workTimes = value;
                    this.RaiseDataMemberChanged("WorkTimes");
                    this.OnWorkTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'InCompleteRecord' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class InCompleteRecord : Entity
    {
        
        private string _index;
        
        private string _inWellTime;
        
        private string _outWellTime;
        
        private int _recordId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIndexChanging(string value);
        partial void OnIndexChanged();
        partial void OnInWellTimeChanging(string value);
        partial void OnInWellTimeChanged();
        partial void OnOutWellTimeChanging(string value);
        partial void OnOutWellTimeChanged();
        partial void OnRecordIdChanging(int value);
        partial void OnRecordIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="InCompleteRecord"/> class.
        /// </summary>
        public InCompleteRecord()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        public string Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.RaiseDataMemberChanging("Index");
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellTime' value.
        /// </summary>
        [DataMember()]
        public string InWellTime
        {
            get
            {
                return this._inWellTime;
            }
            set
            {
                if ((this._inWellTime != value))
                {
                    this.OnInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("InWellTime");
                    this.ValidateProperty("InWellTime", value);
                    this._inWellTime = value;
                    this.RaiseDataMemberChanged("InWellTime");
                    this.OnInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutWellTime' value.
        /// </summary>
        [DataMember()]
        public string OutWellTime
        {
            get
            {
                return this._outWellTime;
            }
            set
            {
                if ((this._outWellTime != value))
                {
                    this.OnOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("OutWellTime");
                    this.ValidateProperty("OutWellTime", value);
                    this._outWellTime = value;
                    this.RaiseDataMemberChanged("OutWellTime");
                    this.OnOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecordId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int RecordId
        {
            get
            {
                return this._recordId;
            }
            set
            {
                if ((this._recordId != value))
                {
                    this.OnRecordIdChanging(value);
                    this.ValidateProperty("RecordId", value);
                    this._recordId = value;
                    this.RaisePropertyChanged("RecordId");
                    this.OnRecordIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._recordId;
        }
    }
    
    /// <summary>
    /// The 'LeakageAttendance' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class LeakageAttendance : Entity
    {
        
        private string _attendDay;
        
        private string _departName;
        
        private int _index;
        
        private string _inWellTime;
        
        private string _outWellTime;
        
        private int _personId;
        
        private string _personName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttendDayChanging(string value);
        partial void OnAttendDayChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnInWellTimeChanging(string value);
        partial void OnInWellTimeChanged();
        partial void OnOutWellTimeChanging(string value);
        partial void OnOutWellTimeChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LeakageAttendance"/> class.
        /// </summary>
        public LeakageAttendance()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AttendDay' value.
        /// </summary>
        [DataMember()]
        public string AttendDay
        {
            get
            {
                return this._attendDay;
            }
            set
            {
                if ((this._attendDay != value))
                {
                    this.OnAttendDayChanging(value);
                    this.RaiseDataMemberChanging("AttendDay");
                    this.ValidateProperty("AttendDay", value);
                    this._attendDay = value;
                    this.RaiseDataMemberChanged("AttendDay");
                    this.OnAttendDayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellTime' value.
        /// </summary>
        [DataMember()]
        public string InWellTime
        {
            get
            {
                return this._inWellTime;
            }
            set
            {
                if ((this._inWellTime != value))
                {
                    this.OnInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("InWellTime");
                    this.ValidateProperty("InWellTime", value);
                    this._inWellTime = value;
                    this.RaiseDataMemberChanged("InWellTime");
                    this.OnInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutWellTime' value.
        /// </summary>
        [DataMember()]
        public string OutWellTime
        {
            get
            {
                return this._outWellTime;
            }
            set
            {
                if ((this._outWellTime != value))
                {
                    this.OnOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("OutWellTime");
                    this.ValidateProperty("OutWellTime", value);
                    this._outWellTime = value;
                    this.RaiseDataMemberChanged("OutWellTime");
                    this.OnOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.RaiseDataMemberChanging("PersonId");
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaiseDataMemberChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'LocateRecordAddedEntity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class LocateRecordAddedEntity : Entity
    {
        
        private DateTime _attendDay;
        
        private string _departName;
        
        private int _index;
        
        private bool _isSelected;
        
        private DateTime _locateInWellTime;
        
        private DateTime _locateOutWellTime;
        
        private int _locateRecordID;
        
        private string _personName;
        
        private string _workSn;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttendDayChanging(DateTime value);
        partial void OnAttendDayChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void OnLocateInWellTimeChanging(DateTime value);
        partial void OnLocateInWellTimeChanged();
        partial void OnLocateOutWellTimeChanging(DateTime value);
        partial void OnLocateOutWellTimeChanged();
        partial void OnLocateRecordIDChanging(int value);
        partial void OnLocateRecordIDChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LocateRecordAddedEntity"/> class.
        /// </summary>
        public LocateRecordAddedEntity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AttendDay' value.
        /// </summary>
        [DataMember()]
        public DateTime AttendDay
        {
            get
            {
                return this._attendDay;
            }
            set
            {
                if ((this._attendDay != value))
                {
                    this.OnAttendDayChanging(value);
                    this.RaiseDataMemberChanging("AttendDay");
                    this.ValidateProperty("AttendDay", value);
                    this._attendDay = value;
                    this.RaiseDataMemberChanged("AttendDay");
                    this.OnAttendDayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.RaiseDataMemberChanging("Index");
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocateInWellTime' value.
        /// </summary>
        [DataMember()]
        public DateTime LocateInWellTime
        {
            get
            {
                return this._locateInWellTime;
            }
            set
            {
                if ((this._locateInWellTime != value))
                {
                    this.OnLocateInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("LocateInWellTime");
                    this.ValidateProperty("LocateInWellTime", value);
                    this._locateInWellTime = value;
                    this.RaiseDataMemberChanged("LocateInWellTime");
                    this.OnLocateInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocateOutWellTime' value.
        /// </summary>
        [DataMember()]
        public DateTime LocateOutWellTime
        {
            get
            {
                return this._locateOutWellTime;
            }
            set
            {
                if ((this._locateOutWellTime != value))
                {
                    this.OnLocateOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("LocateOutWellTime");
                    this.ValidateProperty("LocateOutWellTime", value);
                    this._locateOutWellTime = value;
                    this.RaiseDataMemberChanged("LocateOutWellTime");
                    this.OnLocateOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocateRecordID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int LocateRecordID
        {
            get
            {
                return this._locateRecordID;
            }
            set
            {
                if ((this._locateRecordID != value))
                {
                    this.OnLocateRecordIDChanging(value);
                    this.ValidateProperty("LocateRecordID", value);
                    this._locateRecordID = value;
                    this.RaisePropertyChanged("LocateRecordID");
                    this.OnLocateRecordIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._locateRecordID;
        }
    }
    
    /// <summary>
    /// The 'OfficeAttend' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class OfficeAttend : Entity
    {
        
        private int _afternoonAttendNum;
        
        private int _askLeaveNum;
        
        private string _classType;
        
        private float _dayAttendNum;
        
        private string _departName;
        
        private int _index;
        
        private int _lateNum;
        
        private int _leaveEarlyNum;
        
        private int _morningAttendNum;
        
        private string _note;
        
        private int _personId;
        
        private string _personName;
        
        private int _shiftHolidayNum;
        
        private string _workSn;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAfternoonAttendNumChanging(int value);
        partial void OnAfternoonAttendNumChanged();
        partial void OnAskLeaveNumChanging(int value);
        partial void OnAskLeaveNumChanged();
        partial void OnClassTypeChanging(string value);
        partial void OnClassTypeChanged();
        partial void OnDayAttendNumChanging(float value);
        partial void OnDayAttendNumChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnLateNumChanging(int value);
        partial void OnLateNumChanged();
        partial void OnLeaveEarlyNumChanging(int value);
        partial void OnLeaveEarlyNumChanged();
        partial void OnMorningAttendNumChanging(int value);
        partial void OnMorningAttendNumChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnShiftHolidayNumChanging(int value);
        partial void OnShiftHolidayNumChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OfficeAttend"/> class.
        /// </summary>
        public OfficeAttend()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AfternoonAttendNum' value.
        /// </summary>
        [DataMember()]
        public int AfternoonAttendNum
        {
            get
            {
                return this._afternoonAttendNum;
            }
            set
            {
                if ((this._afternoonAttendNum != value))
                {
                    this.OnAfternoonAttendNumChanging(value);
                    this.RaiseDataMemberChanging("AfternoonAttendNum");
                    this.ValidateProperty("AfternoonAttendNum", value);
                    this._afternoonAttendNum = value;
                    this.RaiseDataMemberChanged("AfternoonAttendNum");
                    this.OnAfternoonAttendNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AskLeaveNum' value.
        /// </summary>
        [DataMember()]
        public int AskLeaveNum
        {
            get
            {
                return this._askLeaveNum;
            }
            set
            {
                if ((this._askLeaveNum != value))
                {
                    this.OnAskLeaveNumChanging(value);
                    this.RaiseDataMemberChanging("AskLeaveNum");
                    this.ValidateProperty("AskLeaveNum", value);
                    this._askLeaveNum = value;
                    this.RaiseDataMemberChanged("AskLeaveNum");
                    this.OnAskLeaveNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClassType' value.
        /// </summary>
        [DataMember()]
        public string ClassType
        {
            get
            {
                return this._classType;
            }
            set
            {
                if ((this._classType != value))
                {
                    this.OnClassTypeChanging(value);
                    this.RaiseDataMemberChanging("ClassType");
                    this.ValidateProperty("ClassType", value);
                    this._classType = value;
                    this.RaiseDataMemberChanged("ClassType");
                    this.OnClassTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayAttendNum' value.
        /// </summary>
        [DataMember()]
        public float DayAttendNum
        {
            get
            {
                return this._dayAttendNum;
            }
            set
            {
                if ((this._dayAttendNum != value))
                {
                    this.OnDayAttendNumChanging(value);
                    this.RaiseDataMemberChanging("DayAttendNum");
                    this.ValidateProperty("DayAttendNum", value);
                    this._dayAttendNum = value;
                    this.RaiseDataMemberChanged("DayAttendNum");
                    this.OnDayAttendNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LateNum' value.
        /// </summary>
        [DataMember()]
        public int LateNum
        {
            get
            {
                return this._lateNum;
            }
            set
            {
                if ((this._lateNum != value))
                {
                    this.OnLateNumChanging(value);
                    this.RaiseDataMemberChanging("LateNum");
                    this.ValidateProperty("LateNum", value);
                    this._lateNum = value;
                    this.RaiseDataMemberChanged("LateNum");
                    this.OnLateNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LeaveEarlyNum' value.
        /// </summary>
        [DataMember()]
        public int LeaveEarlyNum
        {
            get
            {
                return this._leaveEarlyNum;
            }
            set
            {
                if ((this._leaveEarlyNum != value))
                {
                    this.OnLeaveEarlyNumChanging(value);
                    this.RaiseDataMemberChanging("LeaveEarlyNum");
                    this.ValidateProperty("LeaveEarlyNum", value);
                    this._leaveEarlyNum = value;
                    this.RaiseDataMemberChanged("LeaveEarlyNum");
                    this.OnLeaveEarlyNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MorningAttendNum' value.
        /// </summary>
        [DataMember()]
        public int MorningAttendNum
        {
            get
            {
                return this._morningAttendNum;
            }
            set
            {
                if ((this._morningAttendNum != value))
                {
                    this.OnMorningAttendNumChanging(value);
                    this.RaiseDataMemberChanging("MorningAttendNum");
                    this.ValidateProperty("MorningAttendNum", value);
                    this._morningAttendNum = value;
                    this.RaiseDataMemberChanged("MorningAttendNum");
                    this.OnMorningAttendNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Note' value.
        /// </summary>
        [DataMember()]
        public string Note
        {
            get
            {
                return this._note;
            }
            set
            {
                if ((this._note != value))
                {
                    this.OnNoteChanging(value);
                    this.RaiseDataMemberChanging("Note");
                    this.ValidateProperty("Note", value);
                    this._note = value;
                    this.RaiseDataMemberChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.RaiseDataMemberChanging("PersonId");
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaiseDataMemberChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShiftHolidayNum' value.
        /// </summary>
        [DataMember()]
        public int ShiftHolidayNum
        {
            get
            {
                return this._shiftHolidayNum;
            }
            set
            {
                if ((this._shiftHolidayNum != value))
                {
                    this.OnShiftHolidayNumChanging(value);
                    this.RaiseDataMemberChanging("ShiftHolidayNum");
                    this.ValidateProperty("ShiftHolidayNum", value);
                    this._shiftHolidayNum = value;
                    this.RaiseDataMemberChanged("ShiftHolidayNum");
                    this.OnShiftHolidayNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'PersonAttend' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class PersonAttend : Entity
    {
        
        private string _afternoonInWellTime;
        
        private string _afternoonOutWellTime;
        
        private string _attendDay;
        
        private int _dayType;
        
        private string _departName;
        
        private int _index;
        
        private string _moringInWellTime;
        
        private string _moringOutWellTime;
        
        private string _note;
        
        private string _personName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAfternoonInWellTimeChanging(string value);
        partial void OnAfternoonInWellTimeChanged();
        partial void OnAfternoonOutWellTimeChanging(string value);
        partial void OnAfternoonOutWellTimeChanged();
        partial void OnAttendDayChanging(string value);
        partial void OnAttendDayChanged();
        partial void OnDayTypeChanging(int value);
        partial void OnDayTypeChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnMoringInWellTimeChanging(string value);
        partial void OnMoringInWellTimeChanged();
        partial void OnMoringOutWellTimeChanging(string value);
        partial void OnMoringOutWellTimeChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonAttend"/> class.
        /// </summary>
        public PersonAttend()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AfternoonInWellTime' value.
        /// </summary>
        [DataMember()]
        public string AfternoonInWellTime
        {
            get
            {
                return this._afternoonInWellTime;
            }
            set
            {
                if ((this._afternoonInWellTime != value))
                {
                    this.OnAfternoonInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("AfternoonInWellTime");
                    this.ValidateProperty("AfternoonInWellTime", value);
                    this._afternoonInWellTime = value;
                    this.RaiseDataMemberChanged("AfternoonInWellTime");
                    this.OnAfternoonInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AfternoonOutWellTime' value.
        /// </summary>
        [DataMember()]
        public string AfternoonOutWellTime
        {
            get
            {
                return this._afternoonOutWellTime;
            }
            set
            {
                if ((this._afternoonOutWellTime != value))
                {
                    this.OnAfternoonOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("AfternoonOutWellTime");
                    this.ValidateProperty("AfternoonOutWellTime", value);
                    this._afternoonOutWellTime = value;
                    this.RaiseDataMemberChanged("AfternoonOutWellTime");
                    this.OnAfternoonOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AttendDay' value.
        /// </summary>
        [DataMember()]
        public string AttendDay
        {
            get
            {
                return this._attendDay;
            }
            set
            {
                if ((this._attendDay != value))
                {
                    this.OnAttendDayChanging(value);
                    this.RaiseDataMemberChanging("AttendDay");
                    this.ValidateProperty("AttendDay", value);
                    this._attendDay = value;
                    this.RaiseDataMemberChanged("AttendDay");
                    this.OnAttendDayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayType' value.
        /// </summary>
        [DataMember()]
        public int DayType
        {
            get
            {
                return this._dayType;
            }
            set
            {
                if ((this._dayType != value))
                {
                    this.OnDayTypeChanging(value);
                    this.RaiseDataMemberChanging("DayType");
                    this.ValidateProperty("DayType", value);
                    this._dayType = value;
                    this.RaiseDataMemberChanged("DayType");
                    this.OnDayTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MoringInWellTime' value.
        /// </summary>
        [DataMember()]
        public string MoringInWellTime
        {
            get
            {
                return this._moringInWellTime;
            }
            set
            {
                if ((this._moringInWellTime != value))
                {
                    this.OnMoringInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("MoringInWellTime");
                    this.ValidateProperty("MoringInWellTime", value);
                    this._moringInWellTime = value;
                    this.RaiseDataMemberChanged("MoringInWellTime");
                    this.OnMoringInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MoringOutWellTime' value.
        /// </summary>
        [DataMember()]
        public string MoringOutWellTime
        {
            get
            {
                return this._moringOutWellTime;
            }
            set
            {
                if ((this._moringOutWellTime != value))
                {
                    this.OnMoringOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("MoringOutWellTime");
                    this.ValidateProperty("MoringOutWellTime", value);
                    this._moringOutWellTime = value;
                    this.RaiseDataMemberChanged("MoringOutWellTime");
                    this.OnMoringOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Note' value.
        /// </summary>
        [DataMember()]
        public string Note
        {
            get
            {
                return this._note;
            }
            set
            {
                if ((this._note != value))
                {
                    this.OnNoteChanging(value);
                    this.RaiseDataMemberChanging("Note");
                    this.ValidateProperty("Note", value);
                    this._note = value;
                    this.RaiseDataMemberChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'PersonAttendRecord' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class PersonAttendRecord : Entity
    {
        
        private string _attendDay;
        
        private string _classOrderName;
        
        private string _devGroup;
        
        private string _index;
        
        private string _inLeaveTypeName;
        
        private string _inWellTime;
        
        private string _leaveTypeName;
        
        private string _outLeaveTypeName;
        
        private string _outWellTime;
        
        private int _recordId;
        
        private double _workCnt;
        
        private string _workTime;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttendDayChanging(string value);
        partial void OnAttendDayChanged();
        partial void OnClassOrderNameChanging(string value);
        partial void OnClassOrderNameChanged();
        partial void OnDevGroupChanging(string value);
        partial void OnDevGroupChanged();
        partial void OnIndexChanging(string value);
        partial void OnIndexChanged();
        partial void OnInLeaveTypeNameChanging(string value);
        partial void OnInLeaveTypeNameChanged();
        partial void OnInWellTimeChanging(string value);
        partial void OnInWellTimeChanged();
        partial void OnLeaveTypeNameChanging(string value);
        partial void OnLeaveTypeNameChanged();
        partial void OnOutLeaveTypeNameChanging(string value);
        partial void OnOutLeaveTypeNameChanged();
        partial void OnOutWellTimeChanging(string value);
        partial void OnOutWellTimeChanged();
        partial void OnRecordIdChanging(int value);
        partial void OnRecordIdChanged();
        partial void OnWorkCntChanging(double value);
        partial void OnWorkCntChanged();
        partial void OnWorkTimeChanging(string value);
        partial void OnWorkTimeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonAttendRecord"/> class.
        /// </summary>
        public PersonAttendRecord()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AttendDay' value.
        /// </summary>
        [DataMember()]
        public string AttendDay
        {
            get
            {
                return this._attendDay;
            }
            set
            {
                if ((this._attendDay != value))
                {
                    this.OnAttendDayChanging(value);
                    this.RaiseDataMemberChanging("AttendDay");
                    this.ValidateProperty("AttendDay", value);
                    this._attendDay = value;
                    this.RaiseDataMemberChanged("AttendDay");
                    this.OnAttendDayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClassOrderName' value.
        /// </summary>
        [DataMember()]
        public string ClassOrderName
        {
            get
            {
                return this._classOrderName;
            }
            set
            {
                if ((this._classOrderName != value))
                {
                    this.OnClassOrderNameChanging(value);
                    this.RaiseDataMemberChanging("ClassOrderName");
                    this.ValidateProperty("ClassOrderName", value);
                    this._classOrderName = value;
                    this.RaiseDataMemberChanged("ClassOrderName");
                    this.OnClassOrderNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DevGroup' value.
        /// </summary>
        [DataMember()]
        public string DevGroup
        {
            get
            {
                return this._devGroup;
            }
            set
            {
                if ((this._devGroup != value))
                {
                    this.OnDevGroupChanging(value);
                    this.RaiseDataMemberChanging("DevGroup");
                    this.ValidateProperty("DevGroup", value);
                    this._devGroup = value;
                    this.RaiseDataMemberChanged("DevGroup");
                    this.OnDevGroupChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        public string Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.RaiseDataMemberChanging("Index");
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InLeaveTypeName' value.
        /// </summary>
        [DataMember()]
        public string InLeaveTypeName
        {
            get
            {
                return this._inLeaveTypeName;
            }
            set
            {
                if ((this._inLeaveTypeName != value))
                {
                    this.OnInLeaveTypeNameChanging(value);
                    this.RaiseDataMemberChanging("InLeaveTypeName");
                    this.ValidateProperty("InLeaveTypeName", value);
                    this._inLeaveTypeName = value;
                    this.RaiseDataMemberChanged("InLeaveTypeName");
                    this.OnInLeaveTypeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellTime' value.
        /// </summary>
        [DataMember()]
        public string InWellTime
        {
            get
            {
                return this._inWellTime;
            }
            set
            {
                if ((this._inWellTime != value))
                {
                    this.OnInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("InWellTime");
                    this.ValidateProperty("InWellTime", value);
                    this._inWellTime = value;
                    this.RaiseDataMemberChanged("InWellTime");
                    this.OnInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LeaveTypeName' value.
        /// </summary>
        [DataMember()]
        public string LeaveTypeName
        {
            get
            {
                return this._leaveTypeName;
            }
            set
            {
                if ((this._leaveTypeName != value))
                {
                    this.OnLeaveTypeNameChanging(value);
                    this.RaiseDataMemberChanging("LeaveTypeName");
                    this.ValidateProperty("LeaveTypeName", value);
                    this._leaveTypeName = value;
                    this.RaiseDataMemberChanged("LeaveTypeName");
                    this.OnLeaveTypeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutLeaveTypeName' value.
        /// </summary>
        [DataMember()]
        public string OutLeaveTypeName
        {
            get
            {
                return this._outLeaveTypeName;
            }
            set
            {
                if ((this._outLeaveTypeName != value))
                {
                    this.OnOutLeaveTypeNameChanging(value);
                    this.RaiseDataMemberChanging("OutLeaveTypeName");
                    this.ValidateProperty("OutLeaveTypeName", value);
                    this._outLeaveTypeName = value;
                    this.RaiseDataMemberChanged("OutLeaveTypeName");
                    this.OnOutLeaveTypeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutWellTime' value.
        /// </summary>
        [DataMember()]
        public string OutWellTime
        {
            get
            {
                return this._outWellTime;
            }
            set
            {
                if ((this._outWellTime != value))
                {
                    this.OnOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("OutWellTime");
                    this.ValidateProperty("OutWellTime", value);
                    this._outWellTime = value;
                    this.RaiseDataMemberChanged("OutWellTime");
                    this.OnOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecordId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int RecordId
        {
            get
            {
                return this._recordId;
            }
            set
            {
                if ((this._recordId != value))
                {
                    this.OnRecordIdChanging(value);
                    this.ValidateProperty("RecordId", value);
                    this._recordId = value;
                    this.RaisePropertyChanged("RecordId");
                    this.OnRecordIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkCnt' value.
        /// </summary>
        [DataMember()]
        public double WorkCnt
        {
            get
            {
                return this._workCnt;
            }
            set
            {
                if ((this._workCnt != value))
                {
                    this.OnWorkCntChanging(value);
                    this.RaiseDataMemberChanging("WorkCnt");
                    this.ValidateProperty("WorkCnt", value);
                    this._workCnt = value;
                    this.RaiseDataMemberChanged("WorkCnt");
                    this.OnWorkCntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkTime' value.
        /// </summary>
        [DataMember()]
        public string WorkTime
        {
            get
            {
                return this._workTime;
            }
            set
            {
                if ((this._workTime != value))
                {
                    this.OnWorkTimeChanging(value);
                    this.RaiseDataMemberChanging("WorkTime");
                    this.ValidateProperty("WorkTime", value);
                    this._workTime = value;
                    this.RaiseDataMemberChanged("WorkTime");
                    this.OnWorkTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._recordId;
        }
    }
    
    /// <summary>
    /// The 'PersonFullAttendInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class PersonFullAttendInfo : Entity
    {
        
        private string _departName;
        
        private int _index;
        
        private int _personId;
        
        private string _personName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonFullAttendInfo"/> class.
        /// </summary>
        public PersonFullAttendInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.RaiseDataMemberChanging("PersonId");
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaiseDataMemberChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'PersonLatearrivalInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class PersonLatearrivalInfo : Entity
    {
        
        private int _countTimes;
        
        private int[] _dayType;
        
        private string _departName;
        
        private int _earlyTimes;
        
        private int _index;
        
        private string[] _lateArrivalTimes;
        
        private int _lateTimes;
        
        private int _personId;
        
        private string _personName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCountTimesChanging(int value);
        partial void OnCountTimesChanged();
        partial void OnDayTypeChanging(int[] value);
        partial void OnDayTypeChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnEarlyTimesChanging(int value);
        partial void OnEarlyTimesChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnLateArrivalTimesChanging(string[] value);
        partial void OnLateArrivalTimesChanged();
        partial void OnLateTimesChanging(int value);
        partial void OnLateTimesChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonLatearrivalInfo"/> class.
        /// </summary>
        public PersonLatearrivalInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CountTimes' value.
        /// </summary>
        [DataMember()]
        public int CountTimes
        {
            get
            {
                return this._countTimes;
            }
            set
            {
                if ((this._countTimes != value))
                {
                    this.OnCountTimesChanging(value);
                    this.RaiseDataMemberChanging("CountTimes");
                    this.ValidateProperty("CountTimes", value);
                    this._countTimes = value;
                    this.RaiseDataMemberChanged("CountTimes");
                    this.OnCountTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayType' value.
        /// </summary>
        [DataMember()]
        public int[] DayType
        {
            get
            {
                return this._dayType;
            }
            set
            {
                if ((this._dayType != value))
                {
                    this.OnDayTypeChanging(value);
                    this.RaiseDataMemberChanging("DayType");
                    this.ValidateProperty("DayType", value);
                    this._dayType = value;
                    this.RaiseDataMemberChanged("DayType");
                    this.OnDayTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EarlyTimes' value.
        /// </summary>
        [DataMember()]
        public int EarlyTimes
        {
            get
            {
                return this._earlyTimes;
            }
            set
            {
                if ((this._earlyTimes != value))
                {
                    this.OnEarlyTimesChanging(value);
                    this.RaiseDataMemberChanging("EarlyTimes");
                    this.ValidateProperty("EarlyTimes", value);
                    this._earlyTimes = value;
                    this.RaiseDataMemberChanged("EarlyTimes");
                    this.OnEarlyTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LateArrivalTimes' value.
        /// </summary>
        [DataMember()]
        public string[] LateArrivalTimes
        {
            get
            {
                return this._lateArrivalTimes;
            }
            set
            {
                if ((this._lateArrivalTimes != value))
                {
                    this.OnLateArrivalTimesChanging(value);
                    this.RaiseDataMemberChanging("LateArrivalTimes");
                    this.ValidateProperty("LateArrivalTimes", value);
                    this._lateArrivalTimes = value;
                    this.RaiseDataMemberChanged("LateArrivalTimes");
                    this.OnLateArrivalTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LateTimes' value.
        /// </summary>
        [DataMember()]
        public int LateTimes
        {
            get
            {
                return this._lateTimes;
            }
            set
            {
                if ((this._lateTimes != value))
                {
                    this.OnLateTimesChanging(value);
                    this.RaiseDataMemberChanging("LateTimes");
                    this.ValidateProperty("LateTimes", value);
                    this._lateTimes = value;
                    this.RaiseDataMemberChanged("LateTimes");
                    this.OnLateTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.RaiseDataMemberChanging("PersonId");
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaiseDataMemberChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'PersonLeaveListInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class PersonLeaveListInfo : Entity
    {
        
        private string _attendDay;
        
        private string _departName;
        
        private int _index;
        
        private string _inWellTime;
        
        private int _leaveTimes;
        
        private string _outWellTime;
        
        private int _personId;
        
        private string _personName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttendDayChanging(string value);
        partial void OnAttendDayChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnInWellTimeChanging(string value);
        partial void OnInWellTimeChanged();
        partial void OnLeaveTimesChanging(int value);
        partial void OnLeaveTimesChanged();
        partial void OnOutWellTimeChanging(string value);
        partial void OnOutWellTimeChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonLeaveListInfo"/> class.
        /// </summary>
        public PersonLeaveListInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AttendDay' value.
        /// </summary>
        [DataMember()]
        public string AttendDay
        {
            get
            {
                return this._attendDay;
            }
            set
            {
                if ((this._attendDay != value))
                {
                    this.OnAttendDayChanging(value);
                    this.RaiseDataMemberChanging("AttendDay");
                    this.ValidateProperty("AttendDay", value);
                    this._attendDay = value;
                    this.RaiseDataMemberChanged("AttendDay");
                    this.OnAttendDayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellTime' value.
        /// </summary>
        [DataMember()]
        public string InWellTime
        {
            get
            {
                return this._inWellTime;
            }
            set
            {
                if ((this._inWellTime != value))
                {
                    this.OnInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("InWellTime");
                    this.ValidateProperty("InWellTime", value);
                    this._inWellTime = value;
                    this.RaiseDataMemberChanged("InWellTime");
                    this.OnInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LeaveTimes' value.
        /// </summary>
        [DataMember()]
        public int LeaveTimes
        {
            get
            {
                return this._leaveTimes;
            }
            set
            {
                if ((this._leaveTimes != value))
                {
                    this.OnLeaveTimesChanging(value);
                    this.RaiseDataMemberChanging("LeaveTimes");
                    this.ValidateProperty("LeaveTimes", value);
                    this._leaveTimes = value;
                    this.RaiseDataMemberChanged("LeaveTimes");
                    this.OnLeaveTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutWellTime' value.
        /// </summary>
        [DataMember()]
        public string OutWellTime
        {
            get
            {
                return this._outWellTime;
            }
            set
            {
                if ((this._outWellTime != value))
                {
                    this.OnOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("OutWellTime");
                    this.ValidateProperty("OutWellTime", value);
                    this._outWellTime = value;
                    this.RaiseDataMemberChanged("OutWellTime");
                    this.OnOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.RaiseDataMemberChanging("PersonId");
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaiseDataMemberChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'PersonMealSuppleInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class PersonMealSuppleInfo : Entity
    {
        
        private DateTime[] _attendDay;
        
        private int _countMoney;
        
        private int _countTimes;
        
        private int[] _dayType;
        
        private string _departName;
        
        private int _index;
        
        private string[] _mealSuppTimes;
        
        private string _note;
        
        private int _personId;
        
        private string _personName;
        
        private string _workSn;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttendDayChanging(DateTime[] value);
        partial void OnAttendDayChanged();
        partial void OnCountMoneyChanging(int value);
        partial void OnCountMoneyChanged();
        partial void OnCountTimesChanging(int value);
        partial void OnCountTimesChanged();
        partial void OnDayTypeChanging(int[] value);
        partial void OnDayTypeChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnMealSuppTimesChanging(string[] value);
        partial void OnMealSuppTimesChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonMealSuppleInfo"/> class.
        /// </summary>
        public PersonMealSuppleInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AttendDay' value.
        /// </summary>
        [DataMember()]
        public DateTime[] AttendDay
        {
            get
            {
                return this._attendDay;
            }
            set
            {
                if ((this._attendDay != value))
                {
                    this.OnAttendDayChanging(value);
                    this.RaiseDataMemberChanging("AttendDay");
                    this.ValidateProperty("AttendDay", value);
                    this._attendDay = value;
                    this.RaiseDataMemberChanged("AttendDay");
                    this.OnAttendDayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CountMoney' value.
        /// </summary>
        [DataMember()]
        public int CountMoney
        {
            get
            {
                return this._countMoney;
            }
            set
            {
                if ((this._countMoney != value))
                {
                    this.OnCountMoneyChanging(value);
                    this.RaiseDataMemberChanging("CountMoney");
                    this.ValidateProperty("CountMoney", value);
                    this._countMoney = value;
                    this.RaiseDataMemberChanged("CountMoney");
                    this.OnCountMoneyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CountTimes' value.
        /// </summary>
        [DataMember()]
        public int CountTimes
        {
            get
            {
                return this._countTimes;
            }
            set
            {
                if ((this._countTimes != value))
                {
                    this.OnCountTimesChanging(value);
                    this.RaiseDataMemberChanging("CountTimes");
                    this.ValidateProperty("CountTimes", value);
                    this._countTimes = value;
                    this.RaiseDataMemberChanged("CountTimes");
                    this.OnCountTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayType' value.
        /// </summary>
        [DataMember()]
        public int[] DayType
        {
            get
            {
                return this._dayType;
            }
            set
            {
                if ((this._dayType != value))
                {
                    this.OnDayTypeChanging(value);
                    this.RaiseDataMemberChanging("DayType");
                    this.ValidateProperty("DayType", value);
                    this._dayType = value;
                    this.RaiseDataMemberChanged("DayType");
                    this.OnDayTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MealSuppTimes' value.
        /// </summary>
        [DataMember()]
        public string[] MealSuppTimes
        {
            get
            {
                return this._mealSuppTimes;
            }
            set
            {
                if ((this._mealSuppTimes != value))
                {
                    this.OnMealSuppTimesChanging(value);
                    this.RaiseDataMemberChanging("MealSuppTimes");
                    this.ValidateProperty("MealSuppTimes", value);
                    this._mealSuppTimes = value;
                    this.RaiseDataMemberChanged("MealSuppTimes");
                    this.OnMealSuppTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Note' value.
        /// </summary>
        [DataMember()]
        public string Note
        {
            get
            {
                return this._note;
            }
            set
            {
                if ((this._note != value))
                {
                    this.OnNoteChanging(value);
                    this.RaiseDataMemberChanging("Note");
                    this.ValidateProperty("Note", value);
                    this._note = value;
                    this.RaiseDataMemberChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.RaiseDataMemberChanging("PersonId");
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaiseDataMemberChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'PersonMonthAttend' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class PersonMonthAttend : Entity
    {
        
        private string _absenteeismTimes;
        
        private string _annualLeaveTimes;
        
        private string _bigClassOutTimes;
        
        private string _bigDutyTimes;
        
        private string _bigInWellTimes;
        
        private string[] _classOrder;
        
        private string _departName;
        
        private string _fakeInjuryTimes;
        
        private string _groupBigTimes;
        
        private string _groupMiddleTimes;
        
        private string _groupMorningTimes;
        
        private string _groupNightTimes;
        
        private string[] _groupTimes;
        
        private int _index;
        
        private float _inOutTimes;
        
        private string _inWellMiddleTimes;
        
        private string _inWellMorningTimes;
        
        private string _inWellNightTimes;
        
        private string _leaveTimes;
        
        private string _maternityLeaveTimes;
        
        private string _overTimes;
        
        private string _parentalLeaveTimes;
        
        private int _personId;
        
        private string _personName;
        
        private string _remark;
        
        private string _sickLeaveTimes;
        
        private string _smallInWellTimes;
        
        private string _studyDays;
        
        private string _weddingsTimes;
        
        private string _wellTotalTimes;
        
        private string _workSn;
        
        private string _workTotalTimes;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAbsenteeismTimesChanging(string value);
        partial void OnAbsenteeismTimesChanged();
        partial void OnAnnualLeaveTimesChanging(string value);
        partial void OnAnnualLeaveTimesChanged();
        partial void OnBigClassOutTimesChanging(string value);
        partial void OnBigClassOutTimesChanged();
        partial void OnBigDutyTimesChanging(string value);
        partial void OnBigDutyTimesChanged();
        partial void OnBigInWellTimesChanging(string value);
        partial void OnBigInWellTimesChanged();
        partial void OnClassOrderChanging(string[] value);
        partial void OnClassOrderChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnFakeInjuryTimesChanging(string value);
        partial void OnFakeInjuryTimesChanged();
        partial void OnGroupBigTimesChanging(string value);
        partial void OnGroupBigTimesChanged();
        partial void OnGroupMiddleTimesChanging(string value);
        partial void OnGroupMiddleTimesChanged();
        partial void OnGroupMorningTimesChanging(string value);
        partial void OnGroupMorningTimesChanged();
        partial void OnGroupNightTimesChanging(string value);
        partial void OnGroupNightTimesChanged();
        partial void OnGroupTimesChanging(string[] value);
        partial void OnGroupTimesChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnInOutTimesChanging(float value);
        partial void OnInOutTimesChanged();
        partial void OnInWellMiddleTimesChanging(string value);
        partial void OnInWellMiddleTimesChanged();
        partial void OnInWellMorningTimesChanging(string value);
        partial void OnInWellMorningTimesChanged();
        partial void OnInWellNightTimesChanging(string value);
        partial void OnInWellNightTimesChanged();
        partial void OnLeaveTimesChanging(string value);
        partial void OnLeaveTimesChanged();
        partial void OnMaternityLeaveTimesChanging(string value);
        partial void OnMaternityLeaveTimesChanged();
        partial void OnOverTimesChanging(string value);
        partial void OnOverTimesChanged();
        partial void OnParentalLeaveTimesChanging(string value);
        partial void OnParentalLeaveTimesChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        partial void OnSickLeaveTimesChanging(string value);
        partial void OnSickLeaveTimesChanged();
        partial void OnSmallInWellTimesChanging(string value);
        partial void OnSmallInWellTimesChanged();
        partial void OnStudyDaysChanging(string value);
        partial void OnStudyDaysChanged();
        partial void OnWeddingsTimesChanging(string value);
        partial void OnWeddingsTimesChanged();
        partial void OnWellTotalTimesChanging(string value);
        partial void OnWellTotalTimesChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();
        partial void OnWorkTotalTimesChanging(string value);
        partial void OnWorkTotalTimesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonMonthAttend"/> class.
        /// </summary>
        public PersonMonthAttend()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AbsenteeismTimes' value.
        /// </summary>
        [DataMember()]
        public string AbsenteeismTimes
        {
            get
            {
                return this._absenteeismTimes;
            }
            set
            {
                if ((this._absenteeismTimes != value))
                {
                    this.OnAbsenteeismTimesChanging(value);
                    this.RaiseDataMemberChanging("AbsenteeismTimes");
                    this.ValidateProperty("AbsenteeismTimes", value);
                    this._absenteeismTimes = value;
                    this.RaiseDataMemberChanged("AbsenteeismTimes");
                    this.OnAbsenteeismTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AnnualLeaveTimes' value.
        /// </summary>
        [DataMember()]
        public string AnnualLeaveTimes
        {
            get
            {
                return this._annualLeaveTimes;
            }
            set
            {
                if ((this._annualLeaveTimes != value))
                {
                    this.OnAnnualLeaveTimesChanging(value);
                    this.RaiseDataMemberChanging("AnnualLeaveTimes");
                    this.ValidateProperty("AnnualLeaveTimes", value);
                    this._annualLeaveTimes = value;
                    this.RaiseDataMemberChanged("AnnualLeaveTimes");
                    this.OnAnnualLeaveTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BigClassOutTimes' value.
        /// </summary>
        [DataMember()]
        public string BigClassOutTimes
        {
            get
            {
                return this._bigClassOutTimes;
            }
            set
            {
                if ((this._bigClassOutTimes != value))
                {
                    this.OnBigClassOutTimesChanging(value);
                    this.RaiseDataMemberChanging("BigClassOutTimes");
                    this.ValidateProperty("BigClassOutTimes", value);
                    this._bigClassOutTimes = value;
                    this.RaiseDataMemberChanged("BigClassOutTimes");
                    this.OnBigClassOutTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BigDutyTimes' value.
        /// </summary>
        [DataMember()]
        public string BigDutyTimes
        {
            get
            {
                return this._bigDutyTimes;
            }
            set
            {
                if ((this._bigDutyTimes != value))
                {
                    this.OnBigDutyTimesChanging(value);
                    this.RaiseDataMemberChanging("BigDutyTimes");
                    this.ValidateProperty("BigDutyTimes", value);
                    this._bigDutyTimes = value;
                    this.RaiseDataMemberChanged("BigDutyTimes");
                    this.OnBigDutyTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BigInWellTimes' value.
        /// </summary>
        [DataMember()]
        public string BigInWellTimes
        {
            get
            {
                return this._bigInWellTimes;
            }
            set
            {
                if ((this._bigInWellTimes != value))
                {
                    this.OnBigInWellTimesChanging(value);
                    this.RaiseDataMemberChanging("BigInWellTimes");
                    this.ValidateProperty("BigInWellTimes", value);
                    this._bigInWellTimes = value;
                    this.RaiseDataMemberChanged("BigInWellTimes");
                    this.OnBigInWellTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClassOrder' value.
        /// </summary>
        [DataMember()]
        public string[] ClassOrder
        {
            get
            {
                return this._classOrder;
            }
            set
            {
                if ((this._classOrder != value))
                {
                    this.OnClassOrderChanging(value);
                    this.RaiseDataMemberChanging("ClassOrder");
                    this.ValidateProperty("ClassOrder", value);
                    this._classOrder = value;
                    this.RaiseDataMemberChanged("ClassOrder");
                    this.OnClassOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FakeInjuryTimes' value.
        /// </summary>
        [DataMember()]
        public string FakeInjuryTimes
        {
            get
            {
                return this._fakeInjuryTimes;
            }
            set
            {
                if ((this._fakeInjuryTimes != value))
                {
                    this.OnFakeInjuryTimesChanging(value);
                    this.RaiseDataMemberChanging("FakeInjuryTimes");
                    this.ValidateProperty("FakeInjuryTimes", value);
                    this._fakeInjuryTimes = value;
                    this.RaiseDataMemberChanged("FakeInjuryTimes");
                    this.OnFakeInjuryTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GroupBigTimes' value.
        /// </summary>
        [DataMember()]
        public string GroupBigTimes
        {
            get
            {
                return this._groupBigTimes;
            }
            set
            {
                if ((this._groupBigTimes != value))
                {
                    this.OnGroupBigTimesChanging(value);
                    this.RaiseDataMemberChanging("GroupBigTimes");
                    this.ValidateProperty("GroupBigTimes", value);
                    this._groupBigTimes = value;
                    this.RaiseDataMemberChanged("GroupBigTimes");
                    this.OnGroupBigTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GroupMiddleTimes' value.
        /// </summary>
        [DataMember()]
        public string GroupMiddleTimes
        {
            get
            {
                return this._groupMiddleTimes;
            }
            set
            {
                if ((this._groupMiddleTimes != value))
                {
                    this.OnGroupMiddleTimesChanging(value);
                    this.RaiseDataMemberChanging("GroupMiddleTimes");
                    this.ValidateProperty("GroupMiddleTimes", value);
                    this._groupMiddleTimes = value;
                    this.RaiseDataMemberChanged("GroupMiddleTimes");
                    this.OnGroupMiddleTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GroupMorningTimes' value.
        /// </summary>
        [DataMember()]
        public string GroupMorningTimes
        {
            get
            {
                return this._groupMorningTimes;
            }
            set
            {
                if ((this._groupMorningTimes != value))
                {
                    this.OnGroupMorningTimesChanging(value);
                    this.RaiseDataMemberChanging("GroupMorningTimes");
                    this.ValidateProperty("GroupMorningTimes", value);
                    this._groupMorningTimes = value;
                    this.RaiseDataMemberChanged("GroupMorningTimes");
                    this.OnGroupMorningTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GroupNightTimes' value.
        /// </summary>
        [DataMember()]
        public string GroupNightTimes
        {
            get
            {
                return this._groupNightTimes;
            }
            set
            {
                if ((this._groupNightTimes != value))
                {
                    this.OnGroupNightTimesChanging(value);
                    this.RaiseDataMemberChanging("GroupNightTimes");
                    this.ValidateProperty("GroupNightTimes", value);
                    this._groupNightTimes = value;
                    this.RaiseDataMemberChanged("GroupNightTimes");
                    this.OnGroupNightTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GroupTimes' value.
        /// </summary>
        [DataMember()]
        public string[] GroupTimes
        {
            get
            {
                return this._groupTimes;
            }
            set
            {
                if ((this._groupTimes != value))
                {
                    this.OnGroupTimesChanging(value);
                    this.RaiseDataMemberChanging("GroupTimes");
                    this.ValidateProperty("GroupTimes", value);
                    this._groupTimes = value;
                    this.RaiseDataMemberChanged("GroupTimes");
                    this.OnGroupTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InOutTimes' value.
        /// </summary>
        [DataMember()]
        public float InOutTimes
        {
            get
            {
                return this._inOutTimes;
            }
            set
            {
                if ((this._inOutTimes != value))
                {
                    this.OnInOutTimesChanging(value);
                    this.RaiseDataMemberChanging("InOutTimes");
                    this.ValidateProperty("InOutTimes", value);
                    this._inOutTimes = value;
                    this.RaiseDataMemberChanged("InOutTimes");
                    this.OnInOutTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellMiddleTimes' value.
        /// </summary>
        [DataMember()]
        public string InWellMiddleTimes
        {
            get
            {
                return this._inWellMiddleTimes;
            }
            set
            {
                if ((this._inWellMiddleTimes != value))
                {
                    this.OnInWellMiddleTimesChanging(value);
                    this.RaiseDataMemberChanging("InWellMiddleTimes");
                    this.ValidateProperty("InWellMiddleTimes", value);
                    this._inWellMiddleTimes = value;
                    this.RaiseDataMemberChanged("InWellMiddleTimes");
                    this.OnInWellMiddleTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellMorningTimes' value.
        /// </summary>
        [DataMember()]
        public string InWellMorningTimes
        {
            get
            {
                return this._inWellMorningTimes;
            }
            set
            {
                if ((this._inWellMorningTimes != value))
                {
                    this.OnInWellMorningTimesChanging(value);
                    this.RaiseDataMemberChanging("InWellMorningTimes");
                    this.ValidateProperty("InWellMorningTimes", value);
                    this._inWellMorningTimes = value;
                    this.RaiseDataMemberChanged("InWellMorningTimes");
                    this.OnInWellMorningTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellNightTimes' value.
        /// </summary>
        [DataMember()]
        public string InWellNightTimes
        {
            get
            {
                return this._inWellNightTimes;
            }
            set
            {
                if ((this._inWellNightTimes != value))
                {
                    this.OnInWellNightTimesChanging(value);
                    this.RaiseDataMemberChanging("InWellNightTimes");
                    this.ValidateProperty("InWellNightTimes", value);
                    this._inWellNightTimes = value;
                    this.RaiseDataMemberChanged("InWellNightTimes");
                    this.OnInWellNightTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LeaveTimes' value.
        /// </summary>
        [DataMember()]
        public string LeaveTimes
        {
            get
            {
                return this._leaveTimes;
            }
            set
            {
                if ((this._leaveTimes != value))
                {
                    this.OnLeaveTimesChanging(value);
                    this.RaiseDataMemberChanging("LeaveTimes");
                    this.ValidateProperty("LeaveTimes", value);
                    this._leaveTimes = value;
                    this.RaiseDataMemberChanged("LeaveTimes");
                    this.OnLeaveTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaternityLeaveTimes' value.
        /// </summary>
        [DataMember()]
        public string MaternityLeaveTimes
        {
            get
            {
                return this._maternityLeaveTimes;
            }
            set
            {
                if ((this._maternityLeaveTimes != value))
                {
                    this.OnMaternityLeaveTimesChanging(value);
                    this.RaiseDataMemberChanging("MaternityLeaveTimes");
                    this.ValidateProperty("MaternityLeaveTimes", value);
                    this._maternityLeaveTimes = value;
                    this.RaiseDataMemberChanged("MaternityLeaveTimes");
                    this.OnMaternityLeaveTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OverTimes' value.
        /// </summary>
        [DataMember()]
        public string OverTimes
        {
            get
            {
                return this._overTimes;
            }
            set
            {
                if ((this._overTimes != value))
                {
                    this.OnOverTimesChanging(value);
                    this.RaiseDataMemberChanging("OverTimes");
                    this.ValidateProperty("OverTimes", value);
                    this._overTimes = value;
                    this.RaiseDataMemberChanged("OverTimes");
                    this.OnOverTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentalLeaveTimes' value.
        /// </summary>
        [DataMember()]
        public string ParentalLeaveTimes
        {
            get
            {
                return this._parentalLeaveTimes;
            }
            set
            {
                if ((this._parentalLeaveTimes != value))
                {
                    this.OnParentalLeaveTimesChanging(value);
                    this.RaiseDataMemberChanging("ParentalLeaveTimes");
                    this.ValidateProperty("ParentalLeaveTimes", value);
                    this._parentalLeaveTimes = value;
                    this.RaiseDataMemberChanged("ParentalLeaveTimes");
                    this.OnParentalLeaveTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.RaiseDataMemberChanging("PersonId");
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaiseDataMemberChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Remark' value.
        /// </summary>
        [DataMember()]
        public string Remark
        {
            get
            {
                return this._remark;
            }
            set
            {
                if ((this._remark != value))
                {
                    this.OnRemarkChanging(value);
                    this.RaiseDataMemberChanging("Remark");
                    this.ValidateProperty("Remark", value);
                    this._remark = value;
                    this.RaiseDataMemberChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SickLeaveTimes' value.
        /// </summary>
        [DataMember()]
        public string SickLeaveTimes
        {
            get
            {
                return this._sickLeaveTimes;
            }
            set
            {
                if ((this._sickLeaveTimes != value))
                {
                    this.OnSickLeaveTimesChanging(value);
                    this.RaiseDataMemberChanging("SickLeaveTimes");
                    this.ValidateProperty("SickLeaveTimes", value);
                    this._sickLeaveTimes = value;
                    this.RaiseDataMemberChanged("SickLeaveTimes");
                    this.OnSickLeaveTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SmallInWellTimes' value.
        /// </summary>
        [DataMember()]
        public string SmallInWellTimes
        {
            get
            {
                return this._smallInWellTimes;
            }
            set
            {
                if ((this._smallInWellTimes != value))
                {
                    this.OnSmallInWellTimesChanging(value);
                    this.RaiseDataMemberChanging("SmallInWellTimes");
                    this.ValidateProperty("SmallInWellTimes", value);
                    this._smallInWellTimes = value;
                    this.RaiseDataMemberChanged("SmallInWellTimes");
                    this.OnSmallInWellTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StudyDays' value.
        /// </summary>
        [DataMember()]
        public string StudyDays
        {
            get
            {
                return this._studyDays;
            }
            set
            {
                if ((this._studyDays != value))
                {
                    this.OnStudyDaysChanging(value);
                    this.RaiseDataMemberChanging("StudyDays");
                    this.ValidateProperty("StudyDays", value);
                    this._studyDays = value;
                    this.RaiseDataMemberChanged("StudyDays");
                    this.OnStudyDaysChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WeddingsTimes' value.
        /// </summary>
        [DataMember()]
        public string WeddingsTimes
        {
            get
            {
                return this._weddingsTimes;
            }
            set
            {
                if ((this._weddingsTimes != value))
                {
                    this.OnWeddingsTimesChanging(value);
                    this.RaiseDataMemberChanging("WeddingsTimes");
                    this.ValidateProperty("WeddingsTimes", value);
                    this._weddingsTimes = value;
                    this.RaiseDataMemberChanged("WeddingsTimes");
                    this.OnWeddingsTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WellTotalTimes' value.
        /// </summary>
        [DataMember()]
        public string WellTotalTimes
        {
            get
            {
                return this._wellTotalTimes;
            }
            set
            {
                if ((this._wellTotalTimes != value))
                {
                    this.OnWellTotalTimesChanging(value);
                    this.RaiseDataMemberChanging("WellTotalTimes");
                    this.ValidateProperty("WellTotalTimes", value);
                    this._wellTotalTimes = value;
                    this.RaiseDataMemberChanged("WellTotalTimes");
                    this.OnWellTotalTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkTotalTimes' value.
        /// </summary>
        [DataMember()]
        public string WorkTotalTimes
        {
            get
            {
                return this._workTotalTimes;
            }
            set
            {
                if ((this._workTotalTimes != value))
                {
                    this.OnWorkTotalTimesChanging(value);
                    this.RaiseDataMemberChanging("WorkTotalTimes");
                    this.ValidateProperty("WorkTotalTimes", value);
                    this._workTotalTimes = value;
                    this.RaiseDataMemberChanged("WorkTotalTimes");
                    this.OnWorkTotalTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'PersonOriginInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class PersonOriginInfo : Entity
    {
        
        private string _countTimes;
        
        private int[] _dayType;
        
        private string _departName;
        
        private int _index;
        
        private float _inOutTimes;
        
        private string _note;
        
        private string _overTimes;
        
        private int _personId;
        
        private string _personName;
        
        private string _prvTimes;
        
        private string _workSn;
        
        private string[] _workTimes;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCountTimesChanging(string value);
        partial void OnCountTimesChanged();
        partial void OnDayTypeChanging(int[] value);
        partial void OnDayTypeChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnInOutTimesChanging(float value);
        partial void OnInOutTimesChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnOverTimesChanging(string value);
        partial void OnOverTimesChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnPrvTimesChanging(string value);
        partial void OnPrvTimesChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();
        partial void OnWorkTimesChanging(string[] value);
        partial void OnWorkTimesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonOriginInfo"/> class.
        /// </summary>
        public PersonOriginInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CountTimes' value.
        /// </summary>
        [DataMember()]
        public string CountTimes
        {
            get
            {
                return this._countTimes;
            }
            set
            {
                if ((this._countTimes != value))
                {
                    this.OnCountTimesChanging(value);
                    this.RaiseDataMemberChanging("CountTimes");
                    this.ValidateProperty("CountTimes", value);
                    this._countTimes = value;
                    this.RaiseDataMemberChanged("CountTimes");
                    this.OnCountTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayType' value.
        /// </summary>
        [DataMember()]
        public int[] DayType
        {
            get
            {
                return this._dayType;
            }
            set
            {
                if ((this._dayType != value))
                {
                    this.OnDayTypeChanging(value);
                    this.RaiseDataMemberChanging("DayType");
                    this.ValidateProperty("DayType", value);
                    this._dayType = value;
                    this.RaiseDataMemberChanged("DayType");
                    this.OnDayTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InOutTimes' value.
        /// </summary>
        [DataMember()]
        public float InOutTimes
        {
            get
            {
                return this._inOutTimes;
            }
            set
            {
                if ((this._inOutTimes != value))
                {
                    this.OnInOutTimesChanging(value);
                    this.RaiseDataMemberChanging("InOutTimes");
                    this.ValidateProperty("InOutTimes", value);
                    this._inOutTimes = value;
                    this.RaiseDataMemberChanged("InOutTimes");
                    this.OnInOutTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Note' value.
        /// </summary>
        [DataMember()]
        public string Note
        {
            get
            {
                return this._note;
            }
            set
            {
                if ((this._note != value))
                {
                    this.OnNoteChanging(value);
                    this.RaiseDataMemberChanging("Note");
                    this.ValidateProperty("Note", value);
                    this._note = value;
                    this.RaiseDataMemberChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OverTimes' value.
        /// </summary>
        [DataMember()]
        public string OverTimes
        {
            get
            {
                return this._overTimes;
            }
            set
            {
                if ((this._overTimes != value))
                {
                    this.OnOverTimesChanging(value);
                    this.RaiseDataMemberChanging("OverTimes");
                    this.ValidateProperty("OverTimes", value);
                    this._overTimes = value;
                    this.RaiseDataMemberChanged("OverTimes");
                    this.OnOverTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.RaiseDataMemberChanging("PersonId");
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaiseDataMemberChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PrvTimes' value.
        /// </summary>
        [DataMember()]
        public string PrvTimes
        {
            get
            {
                return this._prvTimes;
            }
            set
            {
                if ((this._prvTimes != value))
                {
                    this.OnPrvTimesChanging(value);
                    this.RaiseDataMemberChanging("PrvTimes");
                    this.ValidateProperty("PrvTimes", value);
                    this._prvTimes = value;
                    this.RaiseDataMemberChanged("PrvTimes");
                    this.OnPrvTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkTimes' value.
        /// </summary>
        [DataMember()]
        public string[] WorkTimes
        {
            get
            {
                return this._workTimes;
            }
            set
            {
                if ((this._workTimes != value))
                {
                    this.OnWorkTimesChanging(value);
                    this.RaiseDataMemberChanging("WorkTimes");
                    this.ValidateProperty("WorkTimes", value);
                    this._workTimes = value;
                    this.RaiseDataMemberChanged("WorkTimes");
                    this.OnWorkTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'ReportPersonMonth' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class ReportPersonMonth : Entity
    {
        
        private string[] _attend_signs;
        
        private string _daily_content_description;
        
        private int _depart_id;
        
        private string _depart_name;
        
        private string[] _display_content;
        
        private int _four_times;
        
        private string _index;
        
        private int _invalid_times;
        
        private string _name;
        
        private int _one_times;
        
        private int _person_id;
        
        private int _sum_0_3;
        
        private int _sum_3_4;
        
        private int _sum_4_6;
        
        private int _sum_6_8;
        
        private int _sum_8;
        
        private int _three_times;
        
        private int _two_times;
        
        private int _valid_times;
        
        private int _wan_times;
        
        private string _work_sn;
        
        private string[] _work_times;
        
        private int _zao_times;
        
        private int _zhong_times;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onattend_signsChanging(string[] value);
        partial void Onattend_signsChanged();
        partial void Ondaily_content_descriptionChanging(string value);
        partial void Ondaily_content_descriptionChanged();
        partial void Ondepart_idChanging(int value);
        partial void Ondepart_idChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Ondisplay_contentChanging(string[] value);
        partial void Ondisplay_contentChanged();
        partial void Onfour_timesChanging(int value);
        partial void Onfour_timesChanged();
        partial void OnIndexChanging(string value);
        partial void OnIndexChanged();
        partial void Oninvalid_timesChanging(int value);
        partial void Oninvalid_timesChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void Onone_timesChanging(int value);
        partial void Onone_timesChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();
        partial void Onsum_0_3Changing(int value);
        partial void Onsum_0_3Changed();
        partial void Onsum_3_4Changing(int value);
        partial void Onsum_3_4Changed();
        partial void Onsum_4_6Changing(int value);
        partial void Onsum_4_6Changed();
        partial void Onsum_6_8Changing(int value);
        partial void Onsum_6_8Changed();
        partial void Onsum_8Changing(int value);
        partial void Onsum_8Changed();
        partial void Onthree_timesChanging(int value);
        partial void Onthree_timesChanged();
        partial void Ontwo_timesChanging(int value);
        partial void Ontwo_timesChanged();
        partial void Onvalid_timesChanging(int value);
        partial void Onvalid_timesChanged();
        partial void Onwan_timesChanging(int value);
        partial void Onwan_timesChanged();
        partial void Onwork_snChanging(string value);
        partial void Onwork_snChanged();
        partial void Onwork_timesChanging(string[] value);
        partial void Onwork_timesChanged();
        partial void Onzao_timesChanging(int value);
        partial void Onzao_timesChanged();
        partial void Onzhong_timesChanging(int value);
        partial void Onzhong_timesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportPersonMonth"/> class.
        /// </summary>
        public ReportPersonMonth()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'attend_signs' value.
        /// </summary>
        [DataMember()]
        public string[] attend_signs
        {
            get
            {
                return this._attend_signs;
            }
            set
            {
                if ((this._attend_signs != value))
                {
                    this.Onattend_signsChanging(value);
                    this.RaiseDataMemberChanging("attend_signs");
                    this.ValidateProperty("attend_signs", value);
                    this._attend_signs = value;
                    this.RaiseDataMemberChanged("attend_signs");
                    this.Onattend_signsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'daily_content_description' value.
        /// </summary>
        [DataMember()]
        public string daily_content_description
        {
            get
            {
                return this._daily_content_description;
            }
            set
            {
                if ((this._daily_content_description != value))
                {
                    this.Ondaily_content_descriptionChanging(value);
                    this.RaiseDataMemberChanging("daily_content_description");
                    this.ValidateProperty("daily_content_description", value);
                    this._daily_content_description = value;
                    this.RaiseDataMemberChanged("daily_content_description");
                    this.Ondaily_content_descriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int depart_id
        {
            get
            {
                return this._depart_id;
            }
            set
            {
                if ((this._depart_id != value))
                {
                    this.Ondepart_idChanging(value);
                    this.ValidateProperty("depart_id", value);
                    this._depart_id = value;
                    this.RaisePropertyChanged("depart_id");
                    this.Ondepart_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'display_content' value.
        /// </summary>
        [DataMember()]
        public string[] display_content
        {
            get
            {
                return this._display_content;
            }
            set
            {
                if ((this._display_content != value))
                {
                    this.Ondisplay_contentChanging(value);
                    this.RaiseDataMemberChanging("display_content");
                    this.ValidateProperty("display_content", value);
                    this._display_content = value;
                    this.RaiseDataMemberChanged("display_content");
                    this.Ondisplay_contentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'four_times' value.
        /// </summary>
        [DataMember()]
        public int four_times
        {
            get
            {
                return this._four_times;
            }
            set
            {
                if ((this._four_times != value))
                {
                    this.Onfour_timesChanging(value);
                    this.RaiseDataMemberChanging("four_times");
                    this.ValidateProperty("four_times", value);
                    this._four_times = value;
                    this.RaiseDataMemberChanged("four_times");
                    this.Onfour_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        public string Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.RaiseDataMemberChanging("Index");
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'invalid_times' value.
        /// </summary>
        [DataMember()]
        public int invalid_times
        {
            get
            {
                return this._invalid_times;
            }
            set
            {
                if ((this._invalid_times != value))
                {
                    this.Oninvalid_timesChanging(value);
                    this.RaiseDataMemberChanging("invalid_times");
                    this.ValidateProperty("invalid_times", value);
                    this._invalid_times = value;
                    this.RaiseDataMemberChanged("invalid_times");
                    this.Oninvalid_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'name' value.
        /// </summary>
        [DataMember()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.RaiseDataMemberChanging("name");
                    this.ValidateProperty("name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("name");
                    this.OnnameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'one_times' value.
        /// </summary>
        [DataMember()]
        public int one_times
        {
            get
            {
                return this._one_times;
            }
            set
            {
                if ((this._one_times != value))
                {
                    this.Onone_timesChanging(value);
                    this.RaiseDataMemberChanging("one_times");
                    this.ValidateProperty("one_times", value);
                    this._one_times = value;
                    this.RaiseDataMemberChanged("one_times");
                    this.Onone_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaisePropertyChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sum_0_3' value.
        /// </summary>
        [DataMember()]
        public int sum_0_3
        {
            get
            {
                return this._sum_0_3;
            }
            set
            {
                if ((this._sum_0_3 != value))
                {
                    this.Onsum_0_3Changing(value);
                    this.RaiseDataMemberChanging("sum_0_3");
                    this.ValidateProperty("sum_0_3", value);
                    this._sum_0_3 = value;
                    this.RaiseDataMemberChanged("sum_0_3");
                    this.Onsum_0_3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sum_3_4' value.
        /// </summary>
        [DataMember()]
        public int sum_3_4
        {
            get
            {
                return this._sum_3_4;
            }
            set
            {
                if ((this._sum_3_4 != value))
                {
                    this.Onsum_3_4Changing(value);
                    this.RaiseDataMemberChanging("sum_3_4");
                    this.ValidateProperty("sum_3_4", value);
                    this._sum_3_4 = value;
                    this.RaiseDataMemberChanged("sum_3_4");
                    this.Onsum_3_4Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sum_4_6' value.
        /// </summary>
        [DataMember()]
        public int sum_4_6
        {
            get
            {
                return this._sum_4_6;
            }
            set
            {
                if ((this._sum_4_6 != value))
                {
                    this.Onsum_4_6Changing(value);
                    this.RaiseDataMemberChanging("sum_4_6");
                    this.ValidateProperty("sum_4_6", value);
                    this._sum_4_6 = value;
                    this.RaiseDataMemberChanged("sum_4_6");
                    this.Onsum_4_6Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sum_6_8' value.
        /// </summary>
        [DataMember()]
        public int sum_6_8
        {
            get
            {
                return this._sum_6_8;
            }
            set
            {
                if ((this._sum_6_8 != value))
                {
                    this.Onsum_6_8Changing(value);
                    this.RaiseDataMemberChanging("sum_6_8");
                    this.ValidateProperty("sum_6_8", value);
                    this._sum_6_8 = value;
                    this.RaiseDataMemberChanged("sum_6_8");
                    this.Onsum_6_8Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sum_8' value.
        /// </summary>
        [DataMember()]
        public int sum_8
        {
            get
            {
                return this._sum_8;
            }
            set
            {
                if ((this._sum_8 != value))
                {
                    this.Onsum_8Changing(value);
                    this.RaiseDataMemberChanging("sum_8");
                    this.ValidateProperty("sum_8", value);
                    this._sum_8 = value;
                    this.RaiseDataMemberChanged("sum_8");
                    this.Onsum_8Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'three_times' value.
        /// </summary>
        [DataMember()]
        public int three_times
        {
            get
            {
                return this._three_times;
            }
            set
            {
                if ((this._three_times != value))
                {
                    this.Onthree_timesChanging(value);
                    this.RaiseDataMemberChanging("three_times");
                    this.ValidateProperty("three_times", value);
                    this._three_times = value;
                    this.RaiseDataMemberChanged("three_times");
                    this.Onthree_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'two_times' value.
        /// </summary>
        [DataMember()]
        public int two_times
        {
            get
            {
                return this._two_times;
            }
            set
            {
                if ((this._two_times != value))
                {
                    this.Ontwo_timesChanging(value);
                    this.RaiseDataMemberChanging("two_times");
                    this.ValidateProperty("two_times", value);
                    this._two_times = value;
                    this.RaiseDataMemberChanged("two_times");
                    this.Ontwo_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'valid_times' value.
        /// </summary>
        [DataMember()]
        public int valid_times
        {
            get
            {
                return this._valid_times;
            }
            set
            {
                if ((this._valid_times != value))
                {
                    this.Onvalid_timesChanging(value);
                    this.RaiseDataMemberChanging("valid_times");
                    this.ValidateProperty("valid_times", value);
                    this._valid_times = value;
                    this.RaiseDataMemberChanged("valid_times");
                    this.Onvalid_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'wan_times' value.
        /// </summary>
        [DataMember()]
        public int wan_times
        {
            get
            {
                return this._wan_times;
            }
            set
            {
                if ((this._wan_times != value))
                {
                    this.Onwan_timesChanging(value);
                    this.RaiseDataMemberChanging("wan_times");
                    this.ValidateProperty("wan_times", value);
                    this._wan_times = value;
                    this.RaiseDataMemberChanged("wan_times");
                    this.Onwan_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_sn' value.
        /// </summary>
        [DataMember()]
        public string work_sn
        {
            get
            {
                return this._work_sn;
            }
            set
            {
                if ((this._work_sn != value))
                {
                    this.Onwork_snChanging(value);
                    this.RaiseDataMemberChanging("work_sn");
                    this.ValidateProperty("work_sn", value);
                    this._work_sn = value;
                    this.RaiseDataMemberChanged("work_sn");
                    this.Onwork_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_times' value.
        /// </summary>
        [DataMember()]
        public string[] work_times
        {
            get
            {
                return this._work_times;
            }
            set
            {
                if ((this._work_times != value))
                {
                    this.Onwork_timesChanging(value);
                    this.RaiseDataMemberChanging("work_times");
                    this.ValidateProperty("work_times", value);
                    this._work_times = value;
                    this.RaiseDataMemberChanged("work_times");
                    this.Onwork_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'zao_times' value.
        /// </summary>
        [DataMember()]
        public int zao_times
        {
            get
            {
                return this._zao_times;
            }
            set
            {
                if ((this._zao_times != value))
                {
                    this.Onzao_timesChanging(value);
                    this.RaiseDataMemberChanging("zao_times");
                    this.ValidateProperty("zao_times", value);
                    this._zao_times = value;
                    this.RaiseDataMemberChanged("zao_times");
                    this.Onzao_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'zhong_times' value.
        /// </summary>
        [DataMember()]
        public int zhong_times
        {
            get
            {
                return this._zhong_times;
            }
            set
            {
                if ((this._zhong_times != value))
                {
                    this.Onzhong_timesChanging(value);
                    this.RaiseDataMemberChanging("zhong_times");
                    this.ValidateProperty("zhong_times", value);
                    this._zhong_times = value;
                    this.RaiseDataMemberChanged("zhong_times");
                    this.Onzhong_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._depart_id, this._person_id);
        }
    }
    
    /// <summary>
    /// The 'TotalAttend' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class TotalAttend : Entity
    {
        
        private float _absentNum;
        
        private float _actualNum;
        
        private string[] _afternoonSignal;
        
        private float _askLeaveNum;
        
        private float _businessNum;
        
        private string _classType;
        
        private int[] _dayType;
        
        private string _departName;
        
        private string[] _displaySignal;
        
        private float _extraNum;
        
        private int _index;
        
        private float _lateNum;
        
        private float _leaveEarlyNum;
        
        private string[] _moringSignal;
        
        private int _personId;
        
        private string _personName;
        
        private float _supposeNum;
        
        private string _workSn;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAbsentNumChanging(float value);
        partial void OnAbsentNumChanged();
        partial void OnActualNumChanging(float value);
        partial void OnActualNumChanged();
        partial void OnAfternoonSignalChanging(string[] value);
        partial void OnAfternoonSignalChanged();
        partial void OnAskLeaveNumChanging(float value);
        partial void OnAskLeaveNumChanged();
        partial void OnBusinessNumChanging(float value);
        partial void OnBusinessNumChanged();
        partial void OnClassTypeChanging(string value);
        partial void OnClassTypeChanged();
        partial void OnDayTypeChanging(int[] value);
        partial void OnDayTypeChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnDisplaySignalChanging(string[] value);
        partial void OnDisplaySignalChanged();
        partial void OnExtraNumChanging(float value);
        partial void OnExtraNumChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnLateNumChanging(float value);
        partial void OnLateNumChanged();
        partial void OnLeaveEarlyNumChanging(float value);
        partial void OnLeaveEarlyNumChanged();
        partial void OnMoringSignalChanging(string[] value);
        partial void OnMoringSignalChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnSupposeNumChanging(float value);
        partial void OnSupposeNumChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TotalAttend"/> class.
        /// </summary>
        public TotalAttend()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AbsentNum' value.
        /// </summary>
        [DataMember()]
        public float AbsentNum
        {
            get
            {
                return this._absentNum;
            }
            set
            {
                if ((this._absentNum != value))
                {
                    this.OnAbsentNumChanging(value);
                    this.RaiseDataMemberChanging("AbsentNum");
                    this.ValidateProperty("AbsentNum", value);
                    this._absentNum = value;
                    this.RaiseDataMemberChanged("AbsentNum");
                    this.OnAbsentNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ActualNum' value.
        /// </summary>
        [DataMember()]
        public float ActualNum
        {
            get
            {
                return this._actualNum;
            }
            set
            {
                if ((this._actualNum != value))
                {
                    this.OnActualNumChanging(value);
                    this.RaiseDataMemberChanging("ActualNum");
                    this.ValidateProperty("ActualNum", value);
                    this._actualNum = value;
                    this.RaiseDataMemberChanged("ActualNum");
                    this.OnActualNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AfternoonSignal' value.
        /// </summary>
        [DataMember()]
        public string[] AfternoonSignal
        {
            get
            {
                return this._afternoonSignal;
            }
            set
            {
                if ((this._afternoonSignal != value))
                {
                    this.OnAfternoonSignalChanging(value);
                    this.RaiseDataMemberChanging("AfternoonSignal");
                    this.ValidateProperty("AfternoonSignal", value);
                    this._afternoonSignal = value;
                    this.RaiseDataMemberChanged("AfternoonSignal");
                    this.OnAfternoonSignalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AskLeaveNum' value.
        /// </summary>
        [DataMember()]
        public float AskLeaveNum
        {
            get
            {
                return this._askLeaveNum;
            }
            set
            {
                if ((this._askLeaveNum != value))
                {
                    this.OnAskLeaveNumChanging(value);
                    this.RaiseDataMemberChanging("AskLeaveNum");
                    this.ValidateProperty("AskLeaveNum", value);
                    this._askLeaveNum = value;
                    this.RaiseDataMemberChanged("AskLeaveNum");
                    this.OnAskLeaveNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BusinessNum' value.
        /// </summary>
        [DataMember()]
        public float BusinessNum
        {
            get
            {
                return this._businessNum;
            }
            set
            {
                if ((this._businessNum != value))
                {
                    this.OnBusinessNumChanging(value);
                    this.RaiseDataMemberChanging("BusinessNum");
                    this.ValidateProperty("BusinessNum", value);
                    this._businessNum = value;
                    this.RaiseDataMemberChanged("BusinessNum");
                    this.OnBusinessNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClassType' value.
        /// </summary>
        [DataMember()]
        public string ClassType
        {
            get
            {
                return this._classType;
            }
            set
            {
                if ((this._classType != value))
                {
                    this.OnClassTypeChanging(value);
                    this.RaiseDataMemberChanging("ClassType");
                    this.ValidateProperty("ClassType", value);
                    this._classType = value;
                    this.RaiseDataMemberChanged("ClassType");
                    this.OnClassTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayType' value.
        /// </summary>
        [DataMember()]
        public int[] DayType
        {
            get
            {
                return this._dayType;
            }
            set
            {
                if ((this._dayType != value))
                {
                    this.OnDayTypeChanging(value);
                    this.RaiseDataMemberChanging("DayType");
                    this.ValidateProperty("DayType", value);
                    this._dayType = value;
                    this.RaiseDataMemberChanged("DayType");
                    this.OnDayTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DisplaySignal' value.
        /// </summary>
        [DataMember()]
        public string[] DisplaySignal
        {
            get
            {
                return this._displaySignal;
            }
            set
            {
                if ((this._displaySignal != value))
                {
                    this.OnDisplaySignalChanging(value);
                    this.RaiseDataMemberChanging("DisplaySignal");
                    this.ValidateProperty("DisplaySignal", value);
                    this._displaySignal = value;
                    this.RaiseDataMemberChanged("DisplaySignal");
                    this.OnDisplaySignalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExtraNum' value.
        /// </summary>
        [DataMember()]
        public float ExtraNum
        {
            get
            {
                return this._extraNum;
            }
            set
            {
                if ((this._extraNum != value))
                {
                    this.OnExtraNumChanging(value);
                    this.RaiseDataMemberChanging("ExtraNum");
                    this.ValidateProperty("ExtraNum", value);
                    this._extraNum = value;
                    this.RaiseDataMemberChanged("ExtraNum");
                    this.OnExtraNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LateNum' value.
        /// </summary>
        [DataMember()]
        public float LateNum
        {
            get
            {
                return this._lateNum;
            }
            set
            {
                if ((this._lateNum != value))
                {
                    this.OnLateNumChanging(value);
                    this.RaiseDataMemberChanging("LateNum");
                    this.ValidateProperty("LateNum", value);
                    this._lateNum = value;
                    this.RaiseDataMemberChanged("LateNum");
                    this.OnLateNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LeaveEarlyNum' value.
        /// </summary>
        [DataMember()]
        public float LeaveEarlyNum
        {
            get
            {
                return this._leaveEarlyNum;
            }
            set
            {
                if ((this._leaveEarlyNum != value))
                {
                    this.OnLeaveEarlyNumChanging(value);
                    this.RaiseDataMemberChanging("LeaveEarlyNum");
                    this.ValidateProperty("LeaveEarlyNum", value);
                    this._leaveEarlyNum = value;
                    this.RaiseDataMemberChanged("LeaveEarlyNum");
                    this.OnLeaveEarlyNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MoringSignal' value.
        /// </summary>
        [DataMember()]
        public string[] MoringSignal
        {
            get
            {
                return this._moringSignal;
            }
            set
            {
                if ((this._moringSignal != value))
                {
                    this.OnMoringSignalChanging(value);
                    this.RaiseDataMemberChanging("MoringSignal");
                    this.ValidateProperty("MoringSignal", value);
                    this._moringSignal = value;
                    this.RaiseDataMemberChanged("MoringSignal");
                    this.OnMoringSignalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.RaiseDataMemberChanging("PersonId");
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaiseDataMemberChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SupposeNum' value.
        /// </summary>
        [DataMember()]
        public float SupposeNum
        {
            get
            {
                return this._supposeNum;
            }
            set
            {
                if ((this._supposeNum != value))
                {
                    this.OnSupposeNumChanging(value);
                    this.RaiseDataMemberChanging("SupposeNum");
                    this.ValidateProperty("SupposeNum", value);
                    this._supposeNum = value;
                    this.RaiseDataMemberChanged("SupposeNum");
                    this.OnSupposeNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'XiGouDayAttendReport' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class XiGouDayAttendReport : Entity
    {
        
        private string _afternoonInWellTime;
        
        private string _afternoonOutWellTime;
        
        private string _departName;
        
        private int _index;
        
        private string[] _leaveTypeName;
        
        private string _morningInWellTime;
        
        private string _morningOutWellTime;
        
        private int _personId;
        
        private string _personName;
        
        private string _principalName;
        
        private string[] _weekendType;
        
        private string _workSn;
        
        private string _workTime;
        
        private string _workType;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAfternoonInWellTimeChanging(string value);
        partial void OnAfternoonInWellTimeChanged();
        partial void OnAfternoonOutWellTimeChanging(string value);
        partial void OnAfternoonOutWellTimeChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnLeaveTypeNameChanging(string[] value);
        partial void OnLeaveTypeNameChanged();
        partial void OnMorningInWellTimeChanging(string value);
        partial void OnMorningInWellTimeChanged();
        partial void OnMorningOutWellTimeChanging(string value);
        partial void OnMorningOutWellTimeChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnPrincipalNameChanging(string value);
        partial void OnPrincipalNameChanged();
        partial void OnWeekendTypeChanging(string[] value);
        partial void OnWeekendTypeChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();
        partial void OnWorkTimeChanging(string value);
        partial void OnWorkTimeChanged();
        partial void OnWorkTypeChanging(string value);
        partial void OnWorkTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="XiGouDayAttendReport"/> class.
        /// </summary>
        public XiGouDayAttendReport()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AfternoonInWellTime' value.
        /// </summary>
        [DataMember()]
        public string AfternoonInWellTime
        {
            get
            {
                return this._afternoonInWellTime;
            }
            set
            {
                if ((this._afternoonInWellTime != value))
                {
                    this.OnAfternoonInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("AfternoonInWellTime");
                    this.ValidateProperty("AfternoonInWellTime", value);
                    this._afternoonInWellTime = value;
                    this.RaiseDataMemberChanged("AfternoonInWellTime");
                    this.OnAfternoonInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AfternoonOutWellTime' value.
        /// </summary>
        [DataMember()]
        public string AfternoonOutWellTime
        {
            get
            {
                return this._afternoonOutWellTime;
            }
            set
            {
                if ((this._afternoonOutWellTime != value))
                {
                    this.OnAfternoonOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("AfternoonOutWellTime");
                    this.ValidateProperty("AfternoonOutWellTime", value);
                    this._afternoonOutWellTime = value;
                    this.RaiseDataMemberChanged("AfternoonOutWellTime");
                    this.OnAfternoonOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LeaveTypeName' value.
        /// </summary>
        [DataMember()]
        public string[] LeaveTypeName
        {
            get
            {
                return this._leaveTypeName;
            }
            set
            {
                if ((this._leaveTypeName != value))
                {
                    this.OnLeaveTypeNameChanging(value);
                    this.RaiseDataMemberChanging("LeaveTypeName");
                    this.ValidateProperty("LeaveTypeName", value);
                    this._leaveTypeName = value;
                    this.RaiseDataMemberChanged("LeaveTypeName");
                    this.OnLeaveTypeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MorningInWellTime' value.
        /// </summary>
        [DataMember()]
        public string MorningInWellTime
        {
            get
            {
                return this._morningInWellTime;
            }
            set
            {
                if ((this._morningInWellTime != value))
                {
                    this.OnMorningInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("MorningInWellTime");
                    this.ValidateProperty("MorningInWellTime", value);
                    this._morningInWellTime = value;
                    this.RaiseDataMemberChanged("MorningInWellTime");
                    this.OnMorningInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MorningOutWellTime' value.
        /// </summary>
        [DataMember()]
        public string MorningOutWellTime
        {
            get
            {
                return this._morningOutWellTime;
            }
            set
            {
                if ((this._morningOutWellTime != value))
                {
                    this.OnMorningOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("MorningOutWellTime");
                    this.ValidateProperty("MorningOutWellTime", value);
                    this._morningOutWellTime = value;
                    this.RaiseDataMemberChanged("MorningOutWellTime");
                    this.OnMorningOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.RaiseDataMemberChanging("PersonId");
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaiseDataMemberChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PrincipalName' value.
        /// </summary>
        [DataMember()]
        public string PrincipalName
        {
            get
            {
                return this._principalName;
            }
            set
            {
                if ((this._principalName != value))
                {
                    this.OnPrincipalNameChanging(value);
                    this.RaiseDataMemberChanging("PrincipalName");
                    this.ValidateProperty("PrincipalName", value);
                    this._principalName = value;
                    this.RaiseDataMemberChanged("PrincipalName");
                    this.OnPrincipalNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WeekendType' value.
        /// </summary>
        [DataMember()]
        public string[] WeekendType
        {
            get
            {
                return this._weekendType;
            }
            set
            {
                if ((this._weekendType != value))
                {
                    this.OnWeekendTypeChanging(value);
                    this.RaiseDataMemberChanging("WeekendType");
                    this.ValidateProperty("WeekendType", value);
                    this._weekendType = value;
                    this.RaiseDataMemberChanged("WeekendType");
                    this.OnWeekendTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkTime' value.
        /// </summary>
        [DataMember()]
        public string WorkTime
        {
            get
            {
                return this._workTime;
            }
            set
            {
                if ((this._workTime != value))
                {
                    this.OnWorkTimeChanging(value);
                    this.RaiseDataMemberChanging("WorkTime");
                    this.ValidateProperty("WorkTime", value);
                    this._workTime = value;
                    this.RaiseDataMemberChanged("WorkTime");
                    this.OnWorkTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkType' value.
        /// </summary>
        [DataMember()]
        public string WorkType
        {
            get
            {
                return this._workType;
            }
            set
            {
                if ((this._workType != value))
                {
                    this.OnWorkTypeChanging(value);
                    this.RaiseDataMemberChanging("WorkType");
                    this.ValidateProperty("WorkType", value);
                    this._workType = value;
                    this.RaiseDataMemberChanged("WorkType");
                    this.OnWorkTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'XiGouInWellPerson' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class XiGouInWellPerson : Entity
    {
        
        private string _beginTime;
        
        private int _downWellNum;
        
        private string _endTime;
        
        private int _inWellNum;
        
        private int _outWellNum;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBeginTimeChanging(string value);
        partial void OnBeginTimeChanged();
        partial void OnDownWellNumChanging(int value);
        partial void OnDownWellNumChanged();
        partial void OnEndTimeChanging(string value);
        partial void OnEndTimeChanged();
        partial void OnInWellNumChanging(int value);
        partial void OnInWellNumChanged();
        partial void OnOutWellNumChanging(int value);
        partial void OnOutWellNumChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="XiGouInWellPerson"/> class.
        /// </summary>
        public XiGouInWellPerson()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BeginTime' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string BeginTime
        {
            get
            {
                return this._beginTime;
            }
            set
            {
                if ((this._beginTime != value))
                {
                    this.OnBeginTimeChanging(value);
                    this.ValidateProperty("BeginTime", value);
                    this._beginTime = value;
                    this.RaisePropertyChanged("BeginTime");
                    this.OnBeginTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DownWellNum' value.
        /// </summary>
        [DataMember()]
        public int DownWellNum
        {
            get
            {
                return this._downWellNum;
            }
            set
            {
                if ((this._downWellNum != value))
                {
                    this.OnDownWellNumChanging(value);
                    this.RaiseDataMemberChanging("DownWellNum");
                    this.ValidateProperty("DownWellNum", value);
                    this._downWellNum = value;
                    this.RaiseDataMemberChanged("DownWellNum");
                    this.OnDownWellNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndTime' value.
        /// </summary>
        [DataMember()]
        public string EndTime
        {
            get
            {
                return this._endTime;
            }
            set
            {
                if ((this._endTime != value))
                {
                    this.OnEndTimeChanging(value);
                    this.RaiseDataMemberChanging("EndTime");
                    this.ValidateProperty("EndTime", value);
                    this._endTime = value;
                    this.RaiseDataMemberChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellNum' value.
        /// </summary>
        [DataMember()]
        public int InWellNum
        {
            get
            {
                return this._inWellNum;
            }
            set
            {
                if ((this._inWellNum != value))
                {
                    this.OnInWellNumChanging(value);
                    this.RaiseDataMemberChanging("InWellNum");
                    this.ValidateProperty("InWellNum", value);
                    this._inWellNum = value;
                    this.RaiseDataMemberChanged("InWellNum");
                    this.OnInWellNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutWellNum' value.
        /// </summary>
        [DataMember()]
        public int OutWellNum
        {
            get
            {
                return this._outWellNum;
            }
            set
            {
                if ((this._outWellNum != value))
                {
                    this.OnOutWellNumChanging(value);
                    this.RaiseDataMemberChanging("OutWellNum");
                    this.ValidateProperty("OutWellNum", value);
                    this._outWellNum = value;
                    this.RaiseDataMemberChanged("OutWellNum");
                    this.OnOutWellNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._beginTime;
        }
    }
    
    /// <summary>
    /// The 'XiGouInWellPersonDetailReport' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class XiGouInWellPersonDetailReport : Entity
    {
        
        private string _classOrderName;
        
        private int _index;
        
        private string _inWellTime;
        
        private string _outWellTime;
        
        private int _personId;
        
        private string _personName;
        
        private string _principalName;
        
        private string _workTime;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClassOrderNameChanging(string value);
        partial void OnClassOrderNameChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnInWellTimeChanging(string value);
        partial void OnInWellTimeChanged();
        partial void OnOutWellTimeChanging(string value);
        partial void OnOutWellTimeChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnPrincipalNameChanging(string value);
        partial void OnPrincipalNameChanged();
        partial void OnWorkTimeChanging(string value);
        partial void OnWorkTimeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="XiGouInWellPersonDetailReport"/> class.
        /// </summary>
        public XiGouInWellPersonDetailReport()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClassOrderName' value.
        /// </summary>
        [DataMember()]
        public string ClassOrderName
        {
            get
            {
                return this._classOrderName;
            }
            set
            {
                if ((this._classOrderName != value))
                {
                    this.OnClassOrderNameChanging(value);
                    this.RaiseDataMemberChanging("ClassOrderName");
                    this.ValidateProperty("ClassOrderName", value);
                    this._classOrderName = value;
                    this.RaiseDataMemberChanged("ClassOrderName");
                    this.OnClassOrderNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellTime' value.
        /// </summary>
        [DataMember()]
        public string InWellTime
        {
            get
            {
                return this._inWellTime;
            }
            set
            {
                if ((this._inWellTime != value))
                {
                    this.OnInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("InWellTime");
                    this.ValidateProperty("InWellTime", value);
                    this._inWellTime = value;
                    this.RaiseDataMemberChanged("InWellTime");
                    this.OnInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutWellTime' value.
        /// </summary>
        [DataMember()]
        public string OutWellTime
        {
            get
            {
                return this._outWellTime;
            }
            set
            {
                if ((this._outWellTime != value))
                {
                    this.OnOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("OutWellTime");
                    this.ValidateProperty("OutWellTime", value);
                    this._outWellTime = value;
                    this.RaiseDataMemberChanged("OutWellTime");
                    this.OnOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.RaiseDataMemberChanging("PersonId");
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaiseDataMemberChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PrincipalName' value.
        /// </summary>
        [DataMember()]
        public string PrincipalName
        {
            get
            {
                return this._principalName;
            }
            set
            {
                if ((this._principalName != value))
                {
                    this.OnPrincipalNameChanging(value);
                    this.RaiseDataMemberChanging("PrincipalName");
                    this.ValidateProperty("PrincipalName", value);
                    this._principalName = value;
                    this.RaiseDataMemberChanged("PrincipalName");
                    this.OnPrincipalNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkTime' value.
        /// </summary>
        [DataMember()]
        public string WorkTime
        {
            get
            {
                return this._workTime;
            }
            set
            {
                if ((this._workTime != value))
                {
                    this.OnWorkTimeChanging(value);
                    this.RaiseDataMemberChanging("WorkTime");
                    this.ValidateProperty("WorkTime", value);
                    this._workTime = value;
                    this.RaiseDataMemberChanged("WorkTime");
                    this.OnWorkTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'XiGouLeaderAttend' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class XiGouLeaderAttend : Entity
    {
        
        private DateTime _attendDay;
        
        private string _attendDayStr;
        
        private int _attendRecordId;
        
        private int _attendTimes;
        
        private string _classOrderName;
        
        private string _classTypeName;
        
        private string _color;
        
        private int _departId;
        
        private string _departName;
        
        private int _index;
        
        private string _inWellTime;
        
        private int _onDutyPersonId;
        
        private int _onDutyPersonId2;
        
        private string _onDutyPersonName;
        
        private string _onDutyPersonName2;
        
        private string _onDutyWorkSn;
        
        private string _onDutyWorkSn2;
        
        private string _outWellTime;
        
        private int _shiftPersonId;
        
        private string _shiftPersonName;
        
        private string _shiftPrincipal;
        
        private string _shiftWorkSn;
        
        private string _shiftWorkType;
        
        private string _workTime;
        
        private int _workTimeMinutes;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttendDayChanging(DateTime value);
        partial void OnAttendDayChanged();
        partial void OnAttendDayStrChanging(string value);
        partial void OnAttendDayStrChanged();
        partial void OnAttendRecordIdChanging(int value);
        partial void OnAttendRecordIdChanged();
        partial void OnAttendTimesChanging(int value);
        partial void OnAttendTimesChanged();
        partial void OnClassOrderNameChanging(string value);
        partial void OnClassOrderNameChanged();
        partial void OnClassTypeNameChanging(string value);
        partial void OnClassTypeNameChanged();
        partial void OncolorChanging(string value);
        partial void OncolorChanged();
        partial void OnDepartIdChanging(int value);
        partial void OnDepartIdChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnindexChanging(int value);
        partial void OnindexChanged();
        partial void OnInWellTimeChanging(string value);
        partial void OnInWellTimeChanged();
        partial void OnOnDutyPersonIdChanging(int value);
        partial void OnOnDutyPersonIdChanged();
        partial void OnOnDutyPersonId2Changing(int value);
        partial void OnOnDutyPersonId2Changed();
        partial void OnOnDutyPersonNameChanging(string value);
        partial void OnOnDutyPersonNameChanged();
        partial void OnOnDutyPersonName2Changing(string value);
        partial void OnOnDutyPersonName2Changed();
        partial void OnOnDutyWorkSnChanging(string value);
        partial void OnOnDutyWorkSnChanged();
        partial void OnOnDutyWorkSn2Changing(string value);
        partial void OnOnDutyWorkSn2Changed();
        partial void OnOutWellTimeChanging(string value);
        partial void OnOutWellTimeChanged();
        partial void OnShiftPersonIdChanging(int value);
        partial void OnShiftPersonIdChanged();
        partial void OnShiftPersonNameChanging(string value);
        partial void OnShiftPersonNameChanged();
        partial void OnShiftPrincipalChanging(string value);
        partial void OnShiftPrincipalChanged();
        partial void OnShiftWorkSnChanging(string value);
        partial void OnShiftWorkSnChanged();
        partial void OnShiftWorkTypeChanging(string value);
        partial void OnShiftWorkTypeChanged();
        partial void OnWorkTimeChanging(string value);
        partial void OnWorkTimeChanged();
        partial void OnWorkTimeMinutesChanging(int value);
        partial void OnWorkTimeMinutesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="XiGouLeaderAttend"/> class.
        /// </summary>
        public XiGouLeaderAttend()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AttendDay' value.
        /// </summary>
        [DataMember()]
        public DateTime AttendDay
        {
            get
            {
                return this._attendDay;
            }
            set
            {
                if ((this._attendDay != value))
                {
                    this.OnAttendDayChanging(value);
                    this.RaiseDataMemberChanging("AttendDay");
                    this.ValidateProperty("AttendDay", value);
                    this._attendDay = value;
                    this.RaiseDataMemberChanged("AttendDay");
                    this.OnAttendDayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AttendDayStr' value.
        /// </summary>
        [DataMember()]
        public string AttendDayStr
        {
            get
            {
                return this._attendDayStr;
            }
            set
            {
                if ((this._attendDayStr != value))
                {
                    this.OnAttendDayStrChanging(value);
                    this.RaiseDataMemberChanging("AttendDayStr");
                    this.ValidateProperty("AttendDayStr", value);
                    this._attendDayStr = value;
                    this.RaiseDataMemberChanged("AttendDayStr");
                    this.OnAttendDayStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AttendRecordId' value.
        /// </summary>
        [DataMember()]
        public int AttendRecordId
        {
            get
            {
                return this._attendRecordId;
            }
            set
            {
                if ((this._attendRecordId != value))
                {
                    this.OnAttendRecordIdChanging(value);
                    this.RaiseDataMemberChanging("AttendRecordId");
                    this.ValidateProperty("AttendRecordId", value);
                    this._attendRecordId = value;
                    this.RaiseDataMemberChanged("AttendRecordId");
                    this.OnAttendRecordIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AttendTimes' value.
        /// </summary>
        [DataMember()]
        public int AttendTimes
        {
            get
            {
                return this._attendTimes;
            }
            set
            {
                if ((this._attendTimes != value))
                {
                    this.OnAttendTimesChanging(value);
                    this.RaiseDataMemberChanging("AttendTimes");
                    this.ValidateProperty("AttendTimes", value);
                    this._attendTimes = value;
                    this.RaiseDataMemberChanged("AttendTimes");
                    this.OnAttendTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClassOrderName' value.
        /// </summary>
        [DataMember()]
        public string ClassOrderName
        {
            get
            {
                return this._classOrderName;
            }
            set
            {
                if ((this._classOrderName != value))
                {
                    this.OnClassOrderNameChanging(value);
                    this.RaiseDataMemberChanging("ClassOrderName");
                    this.ValidateProperty("ClassOrderName", value);
                    this._classOrderName = value;
                    this.RaiseDataMemberChanged("ClassOrderName");
                    this.OnClassOrderNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClassTypeName' value.
        /// </summary>
        [DataMember()]
        public string ClassTypeName
        {
            get
            {
                return this._classTypeName;
            }
            set
            {
                if ((this._classTypeName != value))
                {
                    this.OnClassTypeNameChanging(value);
                    this.RaiseDataMemberChanging("ClassTypeName");
                    this.ValidateProperty("ClassTypeName", value);
                    this._classTypeName = value;
                    this.RaiseDataMemberChanged("ClassTypeName");
                    this.OnClassTypeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'color' value.
        /// </summary>
        [DataMember()]
        public string color
        {
            get
            {
                return this._color;
            }
            set
            {
                if ((this._color != value))
                {
                    this.OncolorChanging(value);
                    this.RaiseDataMemberChanging("color");
                    this.ValidateProperty("color", value);
                    this._color = value;
                    this.RaiseDataMemberChanged("color");
                    this.OncolorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartId' value.
        /// </summary>
        [DataMember()]
        public int DepartId
        {
            get
            {
                return this._departId;
            }
            set
            {
                if ((this._departId != value))
                {
                    this.OnDepartIdChanging(value);
                    this.RaiseDataMemberChanging("DepartId");
                    this.ValidateProperty("DepartId", value);
                    this._departId = value;
                    this.RaiseDataMemberChanged("DepartId");
                    this.OnDepartIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnindexChanging(value);
                    this.ValidateProperty("index", value);
                    this._index = value;
                    this.RaisePropertyChanged("index");
                    this.OnindexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellTime' value.
        /// </summary>
        [DataMember()]
        public string InWellTime
        {
            get
            {
                return this._inWellTime;
            }
            set
            {
                if ((this._inWellTime != value))
                {
                    this.OnInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("InWellTime");
                    this.ValidateProperty("InWellTime", value);
                    this._inWellTime = value;
                    this.RaiseDataMemberChanged("InWellTime");
                    this.OnInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnDutyPersonId' value.
        /// </summary>
        [DataMember()]
        public int OnDutyPersonId
        {
            get
            {
                return this._onDutyPersonId;
            }
            set
            {
                if ((this._onDutyPersonId != value))
                {
                    this.OnOnDutyPersonIdChanging(value);
                    this.RaiseDataMemberChanging("OnDutyPersonId");
                    this.ValidateProperty("OnDutyPersonId", value);
                    this._onDutyPersonId = value;
                    this.RaiseDataMemberChanged("OnDutyPersonId");
                    this.OnOnDutyPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnDutyPersonId2' value.
        /// </summary>
        [DataMember()]
        public int OnDutyPersonId2
        {
            get
            {
                return this._onDutyPersonId2;
            }
            set
            {
                if ((this._onDutyPersonId2 != value))
                {
                    this.OnOnDutyPersonId2Changing(value);
                    this.RaiseDataMemberChanging("OnDutyPersonId2");
                    this.ValidateProperty("OnDutyPersonId2", value);
                    this._onDutyPersonId2 = value;
                    this.RaiseDataMemberChanged("OnDutyPersonId2");
                    this.OnOnDutyPersonId2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnDutyPersonName' value.
        /// </summary>
        [DataMember()]
        public string OnDutyPersonName
        {
            get
            {
                return this._onDutyPersonName;
            }
            set
            {
                if ((this._onDutyPersonName != value))
                {
                    this.OnOnDutyPersonNameChanging(value);
                    this.RaiseDataMemberChanging("OnDutyPersonName");
                    this.ValidateProperty("OnDutyPersonName", value);
                    this._onDutyPersonName = value;
                    this.RaiseDataMemberChanged("OnDutyPersonName");
                    this.OnOnDutyPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnDutyPersonName2' value.
        /// </summary>
        [DataMember()]
        public string OnDutyPersonName2
        {
            get
            {
                return this._onDutyPersonName2;
            }
            set
            {
                if ((this._onDutyPersonName2 != value))
                {
                    this.OnOnDutyPersonName2Changing(value);
                    this.RaiseDataMemberChanging("OnDutyPersonName2");
                    this.ValidateProperty("OnDutyPersonName2", value);
                    this._onDutyPersonName2 = value;
                    this.RaiseDataMemberChanged("OnDutyPersonName2");
                    this.OnOnDutyPersonName2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnDutyWorkSn' value.
        /// </summary>
        [DataMember()]
        public string OnDutyWorkSn
        {
            get
            {
                return this._onDutyWorkSn;
            }
            set
            {
                if ((this._onDutyWorkSn != value))
                {
                    this.OnOnDutyWorkSnChanging(value);
                    this.RaiseDataMemberChanging("OnDutyWorkSn");
                    this.ValidateProperty("OnDutyWorkSn", value);
                    this._onDutyWorkSn = value;
                    this.RaiseDataMemberChanged("OnDutyWorkSn");
                    this.OnOnDutyWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnDutyWorkSn2' value.
        /// </summary>
        [DataMember()]
        public string OnDutyWorkSn2
        {
            get
            {
                return this._onDutyWorkSn2;
            }
            set
            {
                if ((this._onDutyWorkSn2 != value))
                {
                    this.OnOnDutyWorkSn2Changing(value);
                    this.RaiseDataMemberChanging("OnDutyWorkSn2");
                    this.ValidateProperty("OnDutyWorkSn2", value);
                    this._onDutyWorkSn2 = value;
                    this.RaiseDataMemberChanged("OnDutyWorkSn2");
                    this.OnOnDutyWorkSn2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutWellTime' value.
        /// </summary>
        [DataMember()]
        public string OutWellTime
        {
            get
            {
                return this._outWellTime;
            }
            set
            {
                if ((this._outWellTime != value))
                {
                    this.OnOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("OutWellTime");
                    this.ValidateProperty("OutWellTime", value);
                    this._outWellTime = value;
                    this.RaiseDataMemberChanged("OutWellTime");
                    this.OnOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShiftPersonId' value.
        /// </summary>
        [DataMember()]
        public int ShiftPersonId
        {
            get
            {
                return this._shiftPersonId;
            }
            set
            {
                if ((this._shiftPersonId != value))
                {
                    this.OnShiftPersonIdChanging(value);
                    this.RaiseDataMemberChanging("ShiftPersonId");
                    this.ValidateProperty("ShiftPersonId", value);
                    this._shiftPersonId = value;
                    this.RaiseDataMemberChanged("ShiftPersonId");
                    this.OnShiftPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShiftPersonName' value.
        /// </summary>
        [DataMember()]
        public string ShiftPersonName
        {
            get
            {
                return this._shiftPersonName;
            }
            set
            {
                if ((this._shiftPersonName != value))
                {
                    this.OnShiftPersonNameChanging(value);
                    this.RaiseDataMemberChanging("ShiftPersonName");
                    this.ValidateProperty("ShiftPersonName", value);
                    this._shiftPersonName = value;
                    this.RaiseDataMemberChanged("ShiftPersonName");
                    this.OnShiftPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShiftPrincipal' value.
        /// </summary>
        [DataMember()]
        public string ShiftPrincipal
        {
            get
            {
                return this._shiftPrincipal;
            }
            set
            {
                if ((this._shiftPrincipal != value))
                {
                    this.OnShiftPrincipalChanging(value);
                    this.RaiseDataMemberChanging("ShiftPrincipal");
                    this.ValidateProperty("ShiftPrincipal", value);
                    this._shiftPrincipal = value;
                    this.RaiseDataMemberChanged("ShiftPrincipal");
                    this.OnShiftPrincipalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShiftWorkSn' value.
        /// </summary>
        [DataMember()]
        public string ShiftWorkSn
        {
            get
            {
                return this._shiftWorkSn;
            }
            set
            {
                if ((this._shiftWorkSn != value))
                {
                    this.OnShiftWorkSnChanging(value);
                    this.RaiseDataMemberChanging("ShiftWorkSn");
                    this.ValidateProperty("ShiftWorkSn", value);
                    this._shiftWorkSn = value;
                    this.RaiseDataMemberChanged("ShiftWorkSn");
                    this.OnShiftWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShiftWorkType' value.
        /// </summary>
        [DataMember()]
        public string ShiftWorkType
        {
            get
            {
                return this._shiftWorkType;
            }
            set
            {
                if ((this._shiftWorkType != value))
                {
                    this.OnShiftWorkTypeChanging(value);
                    this.RaiseDataMemberChanging("ShiftWorkType");
                    this.ValidateProperty("ShiftWorkType", value);
                    this._shiftWorkType = value;
                    this.RaiseDataMemberChanged("ShiftWorkType");
                    this.OnShiftWorkTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkTime' value.
        /// </summary>
        [DataMember()]
        public string WorkTime
        {
            get
            {
                return this._workTime;
            }
            set
            {
                if ((this._workTime != value))
                {
                    this.OnWorkTimeChanging(value);
                    this.RaiseDataMemberChanging("WorkTime");
                    this.ValidateProperty("WorkTime", value);
                    this._workTime = value;
                    this.RaiseDataMemberChanged("WorkTime");
                    this.OnWorkTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkTimeMinutes' value.
        /// </summary>
        [DataMember()]
        public int WorkTimeMinutes
        {
            get
            {
                return this._workTimeMinutes;
            }
            set
            {
                if ((this._workTimeMinutes != value))
                {
                    this.OnWorkTimeMinutesChanging(value);
                    this.RaiseDataMemberChanging("WorkTimeMinutes");
                    this.ValidateProperty("WorkTimeMinutes", value);
                    this._workTimeMinutes = value;
                    this.RaiseDataMemberChanged("WorkTimeMinutes");
                    this.OnWorkTimeMinutesChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'XiGouLeaderSchedule' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class XiGouLeaderSchedule : Entity
    {
        
        private DateTime _attendDay;
        
        private string _attendDayStr;
        
        private string _companyName;
        
        private int _index;
        
        private string _midClassOrderName;
        
        private string _midClassTypeName;
        
        private string _midColor;
        
        private int _midDepartId;
        
        private string _midDepartName;
        
        private string _midInWellTime;
        
        private string _midOutWellTime;
        
        private int _midPersonId;
        
        private string _midPersonName;
        
        private string _midWorkSn;
        
        private int _midWorkTimeMinutes;
        
        private string _mornClassOrderName;
        
        private string _mornClassTypeName;
        
        private string _mornColor;
        
        private int _mornDepartId;
        
        private string _mornDepartName;
        
        private string _mornInWellTime;
        
        private string _mornOutWellTime;
        
        private int _mornPersonId;
        
        private string _mornPersonName;
        
        private string _mornWorkSn;
        
        private int _mornWorkTimeMinutes;
        
        private string _nightClassOrderName;
        
        private string _nightClassTypeName;
        
        private string _nightColor;
        
        private int _nightDepartId;
        
        private string _nightDepartName;
        
        private string _nightInWellTime;
        
        private string _nightOutWellTime;
        
        private int _nightPersonId;
        
        private string _nightPersonName;
        
        private string _nightWorkSn;
        
        private int _nightWorkTimeMinutes;
        
        private int _onDutyPersonId;
        
        private int _onDutyPersonId2;
        
        private string _onDutyPersonName;
        
        private string _onDutyPersonName2;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttendDayChanging(DateTime value);
        partial void OnAttendDayChanged();
        partial void OnAttendDayStrChanging(string value);
        partial void OnAttendDayStrChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnindexChanging(int value);
        partial void OnindexChanged();
        partial void OnMidClassOrderNameChanging(string value);
        partial void OnMidClassOrderNameChanged();
        partial void OnMidClassTypeNameChanging(string value);
        partial void OnMidClassTypeNameChanged();
        partial void OnMidColorChanging(string value);
        partial void OnMidColorChanged();
        partial void OnMidDepartIdChanging(int value);
        partial void OnMidDepartIdChanged();
        partial void OnMidDepartNameChanging(string value);
        partial void OnMidDepartNameChanged();
        partial void OnMidInWellTimeChanging(string value);
        partial void OnMidInWellTimeChanged();
        partial void OnMidOutWellTimeChanging(string value);
        partial void OnMidOutWellTimeChanged();
        partial void OnMidPersonIdChanging(int value);
        partial void OnMidPersonIdChanged();
        partial void OnMidPersonNameChanging(string value);
        partial void OnMidPersonNameChanged();
        partial void OnMidWorkSnChanging(string value);
        partial void OnMidWorkSnChanged();
        partial void OnMidWorkTimeMinutesChanging(int value);
        partial void OnMidWorkTimeMinutesChanged();
        partial void OnMornClassOrderNameChanging(string value);
        partial void OnMornClassOrderNameChanged();
        partial void OnMornClassTypeNameChanging(string value);
        partial void OnMornClassTypeNameChanged();
        partial void OnMornColorChanging(string value);
        partial void OnMornColorChanged();
        partial void OnMornDepartIdChanging(int value);
        partial void OnMornDepartIdChanged();
        partial void OnMornDepartNameChanging(string value);
        partial void OnMornDepartNameChanged();
        partial void OnMornInWellTimeChanging(string value);
        partial void OnMornInWellTimeChanged();
        partial void OnMornOutWellTimeChanging(string value);
        partial void OnMornOutWellTimeChanged();
        partial void OnMornPersonIdChanging(int value);
        partial void OnMornPersonIdChanged();
        partial void OnMornPersonNameChanging(string value);
        partial void OnMornPersonNameChanged();
        partial void OnMornWorkSnChanging(string value);
        partial void OnMornWorkSnChanged();
        partial void OnMornWorkTimeMinutesChanging(int value);
        partial void OnMornWorkTimeMinutesChanged();
        partial void OnNightClassOrderNameChanging(string value);
        partial void OnNightClassOrderNameChanged();
        partial void OnNightClassTypeNameChanging(string value);
        partial void OnNightClassTypeNameChanged();
        partial void OnNightColorChanging(string value);
        partial void OnNightColorChanged();
        partial void OnNightDepartIdChanging(int value);
        partial void OnNightDepartIdChanged();
        partial void OnNightDepartNameChanging(string value);
        partial void OnNightDepartNameChanged();
        partial void OnNightInWellTimeChanging(string value);
        partial void OnNightInWellTimeChanged();
        partial void OnNightOutWellTimeChanging(string value);
        partial void OnNightOutWellTimeChanged();
        partial void OnNightPersonIdChanging(int value);
        partial void OnNightPersonIdChanged();
        partial void OnNightPersonNameChanging(string value);
        partial void OnNightPersonNameChanged();
        partial void OnNightWorkSnChanging(string value);
        partial void OnNightWorkSnChanged();
        partial void OnNightWorkTimeMinutesChanging(int value);
        partial void OnNightWorkTimeMinutesChanged();
        partial void OnOnDutyPersonIdChanging(int value);
        partial void OnOnDutyPersonIdChanged();
        partial void OnOnDutyPersonId2Changing(int value);
        partial void OnOnDutyPersonId2Changed();
        partial void OnOnDutyPersonNameChanging(string value);
        partial void OnOnDutyPersonNameChanged();
        partial void OnOnDutyPersonName2Changing(string value);
        partial void OnOnDutyPersonName2Changed();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="XiGouLeaderSchedule"/> class.
        /// </summary>
        public XiGouLeaderSchedule()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AttendDay' value.
        /// </summary>
        [DataMember()]
        public DateTime AttendDay
        {
            get
            {
                return this._attendDay;
            }
            set
            {
                if ((this._attendDay != value))
                {
                    this.OnAttendDayChanging(value);
                    this.RaiseDataMemberChanging("AttendDay");
                    this.ValidateProperty("AttendDay", value);
                    this._attendDay = value;
                    this.RaiseDataMemberChanged("AttendDay");
                    this.OnAttendDayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AttendDayStr' value.
        /// </summary>
        [DataMember()]
        public string AttendDayStr
        {
            get
            {
                return this._attendDayStr;
            }
            set
            {
                if ((this._attendDayStr != value))
                {
                    this.OnAttendDayStrChanging(value);
                    this.RaiseDataMemberChanging("AttendDayStr");
                    this.ValidateProperty("AttendDayStr", value);
                    this._attendDayStr = value;
                    this.RaiseDataMemberChanged("AttendDayStr");
                    this.OnAttendDayStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyName' value.
        /// </summary>
        [DataMember()]
        public string CompanyName
        {
            get
            {
                return this._companyName;
            }
            set
            {
                if ((this._companyName != value))
                {
                    this.OnCompanyNameChanging(value);
                    this.RaiseDataMemberChanging("CompanyName");
                    this.ValidateProperty("CompanyName", value);
                    this._companyName = value;
                    this.RaiseDataMemberChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnindexChanging(value);
                    this.ValidateProperty("index", value);
                    this._index = value;
                    this.RaisePropertyChanged("index");
                    this.OnindexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidClassOrderName' value.
        /// </summary>
        [DataMember()]
        public string MidClassOrderName
        {
            get
            {
                return this._midClassOrderName;
            }
            set
            {
                if ((this._midClassOrderName != value))
                {
                    this.OnMidClassOrderNameChanging(value);
                    this.RaiseDataMemberChanging("MidClassOrderName");
                    this.ValidateProperty("MidClassOrderName", value);
                    this._midClassOrderName = value;
                    this.RaiseDataMemberChanged("MidClassOrderName");
                    this.OnMidClassOrderNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidClassTypeName' value.
        /// </summary>
        [DataMember()]
        public string MidClassTypeName
        {
            get
            {
                return this._midClassTypeName;
            }
            set
            {
                if ((this._midClassTypeName != value))
                {
                    this.OnMidClassTypeNameChanging(value);
                    this.RaiseDataMemberChanging("MidClassTypeName");
                    this.ValidateProperty("MidClassTypeName", value);
                    this._midClassTypeName = value;
                    this.RaiseDataMemberChanged("MidClassTypeName");
                    this.OnMidClassTypeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidColor' value.
        /// </summary>
        [DataMember()]
        public string MidColor
        {
            get
            {
                return this._midColor;
            }
            set
            {
                if ((this._midColor != value))
                {
                    this.OnMidColorChanging(value);
                    this.RaiseDataMemberChanging("MidColor");
                    this.ValidateProperty("MidColor", value);
                    this._midColor = value;
                    this.RaiseDataMemberChanged("MidColor");
                    this.OnMidColorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidDepartId' value.
        /// </summary>
        [DataMember()]
        public int MidDepartId
        {
            get
            {
                return this._midDepartId;
            }
            set
            {
                if ((this._midDepartId != value))
                {
                    this.OnMidDepartIdChanging(value);
                    this.RaiseDataMemberChanging("MidDepartId");
                    this.ValidateProperty("MidDepartId", value);
                    this._midDepartId = value;
                    this.RaiseDataMemberChanged("MidDepartId");
                    this.OnMidDepartIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidDepartName' value.
        /// </summary>
        [DataMember()]
        public string MidDepartName
        {
            get
            {
                return this._midDepartName;
            }
            set
            {
                if ((this._midDepartName != value))
                {
                    this.OnMidDepartNameChanging(value);
                    this.RaiseDataMemberChanging("MidDepartName");
                    this.ValidateProperty("MidDepartName", value);
                    this._midDepartName = value;
                    this.RaiseDataMemberChanged("MidDepartName");
                    this.OnMidDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidInWellTime' value.
        /// </summary>
        [DataMember()]
        public string MidInWellTime
        {
            get
            {
                return this._midInWellTime;
            }
            set
            {
                if ((this._midInWellTime != value))
                {
                    this.OnMidInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("MidInWellTime");
                    this.ValidateProperty("MidInWellTime", value);
                    this._midInWellTime = value;
                    this.RaiseDataMemberChanged("MidInWellTime");
                    this.OnMidInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidOutWellTime' value.
        /// </summary>
        [DataMember()]
        public string MidOutWellTime
        {
            get
            {
                return this._midOutWellTime;
            }
            set
            {
                if ((this._midOutWellTime != value))
                {
                    this.OnMidOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("MidOutWellTime");
                    this.ValidateProperty("MidOutWellTime", value);
                    this._midOutWellTime = value;
                    this.RaiseDataMemberChanged("MidOutWellTime");
                    this.OnMidOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidPersonId' value.
        /// </summary>
        [DataMember()]
        public int MidPersonId
        {
            get
            {
                return this._midPersonId;
            }
            set
            {
                if ((this._midPersonId != value))
                {
                    this.OnMidPersonIdChanging(value);
                    this.RaiseDataMemberChanging("MidPersonId");
                    this.ValidateProperty("MidPersonId", value);
                    this._midPersonId = value;
                    this.RaiseDataMemberChanged("MidPersonId");
                    this.OnMidPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidPersonName' value.
        /// </summary>
        [DataMember()]
        public string MidPersonName
        {
            get
            {
                return this._midPersonName;
            }
            set
            {
                if ((this._midPersonName != value))
                {
                    this.OnMidPersonNameChanging(value);
                    this.RaiseDataMemberChanging("MidPersonName");
                    this.ValidateProperty("MidPersonName", value);
                    this._midPersonName = value;
                    this.RaiseDataMemberChanged("MidPersonName");
                    this.OnMidPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidWorkSn' value.
        /// </summary>
        [DataMember()]
        public string MidWorkSn
        {
            get
            {
                return this._midWorkSn;
            }
            set
            {
                if ((this._midWorkSn != value))
                {
                    this.OnMidWorkSnChanging(value);
                    this.RaiseDataMemberChanging("MidWorkSn");
                    this.ValidateProperty("MidWorkSn", value);
                    this._midWorkSn = value;
                    this.RaiseDataMemberChanged("MidWorkSn");
                    this.OnMidWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidWorkTimeMinutes' value.
        /// </summary>
        [DataMember()]
        public int MidWorkTimeMinutes
        {
            get
            {
                return this._midWorkTimeMinutes;
            }
            set
            {
                if ((this._midWorkTimeMinutes != value))
                {
                    this.OnMidWorkTimeMinutesChanging(value);
                    this.RaiseDataMemberChanging("MidWorkTimeMinutes");
                    this.ValidateProperty("MidWorkTimeMinutes", value);
                    this._midWorkTimeMinutes = value;
                    this.RaiseDataMemberChanged("MidWorkTimeMinutes");
                    this.OnMidWorkTimeMinutesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MornClassOrderName' value.
        /// </summary>
        [DataMember()]
        public string MornClassOrderName
        {
            get
            {
                return this._mornClassOrderName;
            }
            set
            {
                if ((this._mornClassOrderName != value))
                {
                    this.OnMornClassOrderNameChanging(value);
                    this.RaiseDataMemberChanging("MornClassOrderName");
                    this.ValidateProperty("MornClassOrderName", value);
                    this._mornClassOrderName = value;
                    this.RaiseDataMemberChanged("MornClassOrderName");
                    this.OnMornClassOrderNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MornClassTypeName' value.
        /// </summary>
        [DataMember()]
        public string MornClassTypeName
        {
            get
            {
                return this._mornClassTypeName;
            }
            set
            {
                if ((this._mornClassTypeName != value))
                {
                    this.OnMornClassTypeNameChanging(value);
                    this.RaiseDataMemberChanging("MornClassTypeName");
                    this.ValidateProperty("MornClassTypeName", value);
                    this._mornClassTypeName = value;
                    this.RaiseDataMemberChanged("MornClassTypeName");
                    this.OnMornClassTypeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MornColor' value.
        /// </summary>
        [DataMember()]
        public string MornColor
        {
            get
            {
                return this._mornColor;
            }
            set
            {
                if ((this._mornColor != value))
                {
                    this.OnMornColorChanging(value);
                    this.RaiseDataMemberChanging("MornColor");
                    this.ValidateProperty("MornColor", value);
                    this._mornColor = value;
                    this.RaiseDataMemberChanged("MornColor");
                    this.OnMornColorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MornDepartId' value.
        /// </summary>
        [DataMember()]
        public int MornDepartId
        {
            get
            {
                return this._mornDepartId;
            }
            set
            {
                if ((this._mornDepartId != value))
                {
                    this.OnMornDepartIdChanging(value);
                    this.RaiseDataMemberChanging("MornDepartId");
                    this.ValidateProperty("MornDepartId", value);
                    this._mornDepartId = value;
                    this.RaiseDataMemberChanged("MornDepartId");
                    this.OnMornDepartIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MornDepartName' value.
        /// </summary>
        [DataMember()]
        public string MornDepartName
        {
            get
            {
                return this._mornDepartName;
            }
            set
            {
                if ((this._mornDepartName != value))
                {
                    this.OnMornDepartNameChanging(value);
                    this.RaiseDataMemberChanging("MornDepartName");
                    this.ValidateProperty("MornDepartName", value);
                    this._mornDepartName = value;
                    this.RaiseDataMemberChanged("MornDepartName");
                    this.OnMornDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MornInWellTime' value.
        /// </summary>
        [DataMember()]
        public string MornInWellTime
        {
            get
            {
                return this._mornInWellTime;
            }
            set
            {
                if ((this._mornInWellTime != value))
                {
                    this.OnMornInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("MornInWellTime");
                    this.ValidateProperty("MornInWellTime", value);
                    this._mornInWellTime = value;
                    this.RaiseDataMemberChanged("MornInWellTime");
                    this.OnMornInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MornOutWellTime' value.
        /// </summary>
        [DataMember()]
        public string MornOutWellTime
        {
            get
            {
                return this._mornOutWellTime;
            }
            set
            {
                if ((this._mornOutWellTime != value))
                {
                    this.OnMornOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("MornOutWellTime");
                    this.ValidateProperty("MornOutWellTime", value);
                    this._mornOutWellTime = value;
                    this.RaiseDataMemberChanged("MornOutWellTime");
                    this.OnMornOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MornPersonId' value.
        /// </summary>
        [DataMember()]
        public int MornPersonId
        {
            get
            {
                return this._mornPersonId;
            }
            set
            {
                if ((this._mornPersonId != value))
                {
                    this.OnMornPersonIdChanging(value);
                    this.RaiseDataMemberChanging("MornPersonId");
                    this.ValidateProperty("MornPersonId", value);
                    this._mornPersonId = value;
                    this.RaiseDataMemberChanged("MornPersonId");
                    this.OnMornPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MornPersonName' value.
        /// </summary>
        [DataMember()]
        public string MornPersonName
        {
            get
            {
                return this._mornPersonName;
            }
            set
            {
                if ((this._mornPersonName != value))
                {
                    this.OnMornPersonNameChanging(value);
                    this.RaiseDataMemberChanging("MornPersonName");
                    this.ValidateProperty("MornPersonName", value);
                    this._mornPersonName = value;
                    this.RaiseDataMemberChanged("MornPersonName");
                    this.OnMornPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MornWorkSn' value.
        /// </summary>
        [DataMember()]
        public string MornWorkSn
        {
            get
            {
                return this._mornWorkSn;
            }
            set
            {
                if ((this._mornWorkSn != value))
                {
                    this.OnMornWorkSnChanging(value);
                    this.RaiseDataMemberChanging("MornWorkSn");
                    this.ValidateProperty("MornWorkSn", value);
                    this._mornWorkSn = value;
                    this.RaiseDataMemberChanged("MornWorkSn");
                    this.OnMornWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MornWorkTimeMinutes' value.
        /// </summary>
        [DataMember()]
        public int MornWorkTimeMinutes
        {
            get
            {
                return this._mornWorkTimeMinutes;
            }
            set
            {
                if ((this._mornWorkTimeMinutes != value))
                {
                    this.OnMornWorkTimeMinutesChanging(value);
                    this.RaiseDataMemberChanging("MornWorkTimeMinutes");
                    this.ValidateProperty("MornWorkTimeMinutes", value);
                    this._mornWorkTimeMinutes = value;
                    this.RaiseDataMemberChanged("MornWorkTimeMinutes");
                    this.OnMornWorkTimeMinutesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NightClassOrderName' value.
        /// </summary>
        [DataMember()]
        public string NightClassOrderName
        {
            get
            {
                return this._nightClassOrderName;
            }
            set
            {
                if ((this._nightClassOrderName != value))
                {
                    this.OnNightClassOrderNameChanging(value);
                    this.RaiseDataMemberChanging("NightClassOrderName");
                    this.ValidateProperty("NightClassOrderName", value);
                    this._nightClassOrderName = value;
                    this.RaiseDataMemberChanged("NightClassOrderName");
                    this.OnNightClassOrderNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NightClassTypeName' value.
        /// </summary>
        [DataMember()]
        public string NightClassTypeName
        {
            get
            {
                return this._nightClassTypeName;
            }
            set
            {
                if ((this._nightClassTypeName != value))
                {
                    this.OnNightClassTypeNameChanging(value);
                    this.RaiseDataMemberChanging("NightClassTypeName");
                    this.ValidateProperty("NightClassTypeName", value);
                    this._nightClassTypeName = value;
                    this.RaiseDataMemberChanged("NightClassTypeName");
                    this.OnNightClassTypeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NightColor' value.
        /// </summary>
        [DataMember()]
        public string NightColor
        {
            get
            {
                return this._nightColor;
            }
            set
            {
                if ((this._nightColor != value))
                {
                    this.OnNightColorChanging(value);
                    this.RaiseDataMemberChanging("NightColor");
                    this.ValidateProperty("NightColor", value);
                    this._nightColor = value;
                    this.RaiseDataMemberChanged("NightColor");
                    this.OnNightColorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NightDepartId' value.
        /// </summary>
        [DataMember()]
        public int NightDepartId
        {
            get
            {
                return this._nightDepartId;
            }
            set
            {
                if ((this._nightDepartId != value))
                {
                    this.OnNightDepartIdChanging(value);
                    this.RaiseDataMemberChanging("NightDepartId");
                    this.ValidateProperty("NightDepartId", value);
                    this._nightDepartId = value;
                    this.RaiseDataMemberChanged("NightDepartId");
                    this.OnNightDepartIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NightDepartName' value.
        /// </summary>
        [DataMember()]
        public string NightDepartName
        {
            get
            {
                return this._nightDepartName;
            }
            set
            {
                if ((this._nightDepartName != value))
                {
                    this.OnNightDepartNameChanging(value);
                    this.RaiseDataMemberChanging("NightDepartName");
                    this.ValidateProperty("NightDepartName", value);
                    this._nightDepartName = value;
                    this.RaiseDataMemberChanged("NightDepartName");
                    this.OnNightDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NightInWellTime' value.
        /// </summary>
        [DataMember()]
        public string NightInWellTime
        {
            get
            {
                return this._nightInWellTime;
            }
            set
            {
                if ((this._nightInWellTime != value))
                {
                    this.OnNightInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("NightInWellTime");
                    this.ValidateProperty("NightInWellTime", value);
                    this._nightInWellTime = value;
                    this.RaiseDataMemberChanged("NightInWellTime");
                    this.OnNightInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NightOutWellTime' value.
        /// </summary>
        [DataMember()]
        public string NightOutWellTime
        {
            get
            {
                return this._nightOutWellTime;
            }
            set
            {
                if ((this._nightOutWellTime != value))
                {
                    this.OnNightOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("NightOutWellTime");
                    this.ValidateProperty("NightOutWellTime", value);
                    this._nightOutWellTime = value;
                    this.RaiseDataMemberChanged("NightOutWellTime");
                    this.OnNightOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NightPersonId' value.
        /// </summary>
        [DataMember()]
        public int NightPersonId
        {
            get
            {
                return this._nightPersonId;
            }
            set
            {
                if ((this._nightPersonId != value))
                {
                    this.OnNightPersonIdChanging(value);
                    this.RaiseDataMemberChanging("NightPersonId");
                    this.ValidateProperty("NightPersonId", value);
                    this._nightPersonId = value;
                    this.RaiseDataMemberChanged("NightPersonId");
                    this.OnNightPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NightPersonName' value.
        /// </summary>
        [DataMember()]
        public string NightPersonName
        {
            get
            {
                return this._nightPersonName;
            }
            set
            {
                if ((this._nightPersonName != value))
                {
                    this.OnNightPersonNameChanging(value);
                    this.RaiseDataMemberChanging("NightPersonName");
                    this.ValidateProperty("NightPersonName", value);
                    this._nightPersonName = value;
                    this.RaiseDataMemberChanged("NightPersonName");
                    this.OnNightPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NightWorkSn' value.
        /// </summary>
        [DataMember()]
        public string NightWorkSn
        {
            get
            {
                return this._nightWorkSn;
            }
            set
            {
                if ((this._nightWorkSn != value))
                {
                    this.OnNightWorkSnChanging(value);
                    this.RaiseDataMemberChanging("NightWorkSn");
                    this.ValidateProperty("NightWorkSn", value);
                    this._nightWorkSn = value;
                    this.RaiseDataMemberChanged("NightWorkSn");
                    this.OnNightWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NightWorkTimeMinutes' value.
        /// </summary>
        [DataMember()]
        public int NightWorkTimeMinutes
        {
            get
            {
                return this._nightWorkTimeMinutes;
            }
            set
            {
                if ((this._nightWorkTimeMinutes != value))
                {
                    this.OnNightWorkTimeMinutesChanging(value);
                    this.RaiseDataMemberChanging("NightWorkTimeMinutes");
                    this.ValidateProperty("NightWorkTimeMinutes", value);
                    this._nightWorkTimeMinutes = value;
                    this.RaiseDataMemberChanged("NightWorkTimeMinutes");
                    this.OnNightWorkTimeMinutesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnDutyPersonId' value.
        /// </summary>
        [DataMember()]
        public int OnDutyPersonId
        {
            get
            {
                return this._onDutyPersonId;
            }
            set
            {
                if ((this._onDutyPersonId != value))
                {
                    this.OnOnDutyPersonIdChanging(value);
                    this.RaiseDataMemberChanging("OnDutyPersonId");
                    this.ValidateProperty("OnDutyPersonId", value);
                    this._onDutyPersonId = value;
                    this.RaiseDataMemberChanged("OnDutyPersonId");
                    this.OnOnDutyPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnDutyPersonId2' value.
        /// </summary>
        [DataMember()]
        public int OnDutyPersonId2
        {
            get
            {
                return this._onDutyPersonId2;
            }
            set
            {
                if ((this._onDutyPersonId2 != value))
                {
                    this.OnOnDutyPersonId2Changing(value);
                    this.RaiseDataMemberChanging("OnDutyPersonId2");
                    this.ValidateProperty("OnDutyPersonId2", value);
                    this._onDutyPersonId2 = value;
                    this.RaiseDataMemberChanged("OnDutyPersonId2");
                    this.OnOnDutyPersonId2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnDutyPersonName' value.
        /// </summary>
        [DataMember()]
        public string OnDutyPersonName
        {
            get
            {
                return this._onDutyPersonName;
            }
            set
            {
                if ((this._onDutyPersonName != value))
                {
                    this.OnOnDutyPersonNameChanging(value);
                    this.RaiseDataMemberChanging("OnDutyPersonName");
                    this.ValidateProperty("OnDutyPersonName", value);
                    this._onDutyPersonName = value;
                    this.RaiseDataMemberChanged("OnDutyPersonName");
                    this.OnOnDutyPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnDutyPersonName2' value.
        /// </summary>
        [DataMember()]
        public string OnDutyPersonName2
        {
            get
            {
                return this._onDutyPersonName2;
            }
            set
            {
                if ((this._onDutyPersonName2 != value))
                {
                    this.OnOnDutyPersonName2Changing(value);
                    this.RaiseDataMemberChanging("OnDutyPersonName2");
                    this.ValidateProperty("OnDutyPersonName2", value);
                    this._onDutyPersonName2 = value;
                    this.RaiseDataMemberChanged("OnDutyPersonName2");
                    this.OnOnDutyPersonName2Changed();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'XiGouLeaderScheduling' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class XiGouLeaderScheduling : Entity
    {
        
        private string _dateId;
        
        private int _midLeaderId;
        
        private int _morningLeaderId;
        
        private int _nigntLeaderId;
        
        private int _todayLeaderId1;
        
        private int _todayLeaderId2;
        
        private string _weekDay;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateIdChanging(string value);
        partial void OnDateIdChanged();
        partial void OnMidLeaderIdChanging(int value);
        partial void OnMidLeaderIdChanged();
        partial void OnMorningLeaderIdChanging(int value);
        partial void OnMorningLeaderIdChanged();
        partial void OnNigntLeaderIdChanging(int value);
        partial void OnNigntLeaderIdChanged();
        partial void OnTodayLeaderId1Changing(int value);
        partial void OnTodayLeaderId1Changed();
        partial void OnTodayLeaderId2Changing(int value);
        partial void OnTodayLeaderId2Changed();
        partial void OnWeekDayChanging(string value);
        partial void OnWeekDayChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="XiGouLeaderScheduling"/> class.
        /// </summary>
        public XiGouLeaderScheduling()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DateId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string DateId
        {
            get
            {
                return this._dateId;
            }
            set
            {
                if ((this._dateId != value))
                {
                    this.OnDateIdChanging(value);
                    this.ValidateProperty("DateId", value);
                    this._dateId = value;
                    this.RaisePropertyChanged("DateId");
                    this.OnDateIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MidLeaderId' value.
        /// </summary>
        [DataMember()]
        public int MidLeaderId
        {
            get
            {
                return this._midLeaderId;
            }
            set
            {
                if ((this._midLeaderId != value))
                {
                    this.OnMidLeaderIdChanging(value);
                    this.RaiseDataMemberChanging("MidLeaderId");
                    this.ValidateProperty("MidLeaderId", value);
                    this._midLeaderId = value;
                    this.RaiseDataMemberChanged("MidLeaderId");
                    this.OnMidLeaderIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MorningLeaderId' value.
        /// </summary>
        [DataMember()]
        public int MorningLeaderId
        {
            get
            {
                return this._morningLeaderId;
            }
            set
            {
                if ((this._morningLeaderId != value))
                {
                    this.OnMorningLeaderIdChanging(value);
                    this.RaiseDataMemberChanging("MorningLeaderId");
                    this.ValidateProperty("MorningLeaderId", value);
                    this._morningLeaderId = value;
                    this.RaiseDataMemberChanged("MorningLeaderId");
                    this.OnMorningLeaderIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NigntLeaderId' value.
        /// </summary>
        [DataMember()]
        public int NigntLeaderId
        {
            get
            {
                return this._nigntLeaderId;
            }
            set
            {
                if ((this._nigntLeaderId != value))
                {
                    this.OnNigntLeaderIdChanging(value);
                    this.RaiseDataMemberChanging("NigntLeaderId");
                    this.ValidateProperty("NigntLeaderId", value);
                    this._nigntLeaderId = value;
                    this.RaiseDataMemberChanged("NigntLeaderId");
                    this.OnNigntLeaderIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TodayLeaderId1' value.
        /// </summary>
        [DataMember()]
        public int TodayLeaderId1
        {
            get
            {
                return this._todayLeaderId1;
            }
            set
            {
                if ((this._todayLeaderId1 != value))
                {
                    this.OnTodayLeaderId1Changing(value);
                    this.RaiseDataMemberChanging("TodayLeaderId1");
                    this.ValidateProperty("TodayLeaderId1", value);
                    this._todayLeaderId1 = value;
                    this.RaiseDataMemberChanged("TodayLeaderId1");
                    this.OnTodayLeaderId1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TodayLeaderId2' value.
        /// </summary>
        [DataMember()]
        public int TodayLeaderId2
        {
            get
            {
                return this._todayLeaderId2;
            }
            set
            {
                if ((this._todayLeaderId2 != value))
                {
                    this.OnTodayLeaderId2Changing(value);
                    this.RaiseDataMemberChanging("TodayLeaderId2");
                    this.ValidateProperty("TodayLeaderId2", value);
                    this._todayLeaderId2 = value;
                    this.RaiseDataMemberChanged("TodayLeaderId2");
                    this.OnTodayLeaderId2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WeekDay' value.
        /// </summary>
        [DataMember()]
        public string WeekDay
        {
            get
            {
                return this._weekDay;
            }
            set
            {
                if ((this._weekDay != value))
                {
                    this.OnWeekDayChanging(value);
                    this.RaiseDataMemberChanging("WeekDay");
                    this.ValidateProperty("WeekDay", value);
                    this._weekDay = value;
                    this.RaiseDataMemberChanged("WeekDay");
                    this.OnWeekDayChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._dateId;
        }
    }
    
    /// <summary>
    /// The 'XiGouMonthAttendReport' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class XiGouMonthAttendReport : Entity
    {
        
        private string _afternoonInWellTime;
        
        private string _afternoonOutWellTime;
        
        private string _departName;
        
        private int _index;
        
        private string[] _leaveTypeName;
        
        private string _morningInWellTime;
        
        private string _morningOutWellTime;
        
        private int _personId;
        
        private string _personName;
        
        private string _principalName;
        
        private string _sumLeave;
        
        private string[] _weekendType;
        
        private string _workSn;
        
        private string _workTime;
        
        private string _workType;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAfternoonInWellTimeChanging(string value);
        partial void OnAfternoonInWellTimeChanged();
        partial void OnAfternoonOutWellTimeChanging(string value);
        partial void OnAfternoonOutWellTimeChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnLeaveTypeNameChanging(string[] value);
        partial void OnLeaveTypeNameChanged();
        partial void OnMorningInWellTimeChanging(string value);
        partial void OnMorningInWellTimeChanged();
        partial void OnMorningOutWellTimeChanging(string value);
        partial void OnMorningOutWellTimeChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnPrincipalNameChanging(string value);
        partial void OnPrincipalNameChanged();
        partial void OnSumLeaveChanging(string value);
        partial void OnSumLeaveChanged();
        partial void OnWeekendTypeChanging(string[] value);
        partial void OnWeekendTypeChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();
        partial void OnWorkTimeChanging(string value);
        partial void OnWorkTimeChanged();
        partial void OnWorkTypeChanging(string value);
        partial void OnWorkTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="XiGouMonthAttendReport"/> class.
        /// </summary>
        public XiGouMonthAttendReport()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AfternoonInWellTime' value.
        /// </summary>
        [DataMember()]
        public string AfternoonInWellTime
        {
            get
            {
                return this._afternoonInWellTime;
            }
            set
            {
                if ((this._afternoonInWellTime != value))
                {
                    this.OnAfternoonInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("AfternoonInWellTime");
                    this.ValidateProperty("AfternoonInWellTime", value);
                    this._afternoonInWellTime = value;
                    this.RaiseDataMemberChanged("AfternoonInWellTime");
                    this.OnAfternoonInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AfternoonOutWellTime' value.
        /// </summary>
        [DataMember()]
        public string AfternoonOutWellTime
        {
            get
            {
                return this._afternoonOutWellTime;
            }
            set
            {
                if ((this._afternoonOutWellTime != value))
                {
                    this.OnAfternoonOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("AfternoonOutWellTime");
                    this.ValidateProperty("AfternoonOutWellTime", value);
                    this._afternoonOutWellTime = value;
                    this.RaiseDataMemberChanged("AfternoonOutWellTime");
                    this.OnAfternoonOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LeaveTypeName' value.
        /// </summary>
        [DataMember()]
        public string[] LeaveTypeName
        {
            get
            {
                return this._leaveTypeName;
            }
            set
            {
                if ((this._leaveTypeName != value))
                {
                    this.OnLeaveTypeNameChanging(value);
                    this.RaiseDataMemberChanging("LeaveTypeName");
                    this.ValidateProperty("LeaveTypeName", value);
                    this._leaveTypeName = value;
                    this.RaiseDataMemberChanged("LeaveTypeName");
                    this.OnLeaveTypeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MorningInWellTime' value.
        /// </summary>
        [DataMember()]
        public string MorningInWellTime
        {
            get
            {
                return this._morningInWellTime;
            }
            set
            {
                if ((this._morningInWellTime != value))
                {
                    this.OnMorningInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("MorningInWellTime");
                    this.ValidateProperty("MorningInWellTime", value);
                    this._morningInWellTime = value;
                    this.RaiseDataMemberChanged("MorningInWellTime");
                    this.OnMorningInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MorningOutWellTime' value.
        /// </summary>
        [DataMember()]
        public string MorningOutWellTime
        {
            get
            {
                return this._morningOutWellTime;
            }
            set
            {
                if ((this._morningOutWellTime != value))
                {
                    this.OnMorningOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("MorningOutWellTime");
                    this.ValidateProperty("MorningOutWellTime", value);
                    this._morningOutWellTime = value;
                    this.RaiseDataMemberChanged("MorningOutWellTime");
                    this.OnMorningOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.RaiseDataMemberChanging("PersonId");
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaiseDataMemberChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PrincipalName' value.
        /// </summary>
        [DataMember()]
        public string PrincipalName
        {
            get
            {
                return this._principalName;
            }
            set
            {
                if ((this._principalName != value))
                {
                    this.OnPrincipalNameChanging(value);
                    this.RaiseDataMemberChanging("PrincipalName");
                    this.ValidateProperty("PrincipalName", value);
                    this._principalName = value;
                    this.RaiseDataMemberChanged("PrincipalName");
                    this.OnPrincipalNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SumLeave' value.
        /// </summary>
        [DataMember()]
        public string SumLeave
        {
            get
            {
                return this._sumLeave;
            }
            set
            {
                if ((this._sumLeave != value))
                {
                    this.OnSumLeaveChanging(value);
                    this.RaiseDataMemberChanging("SumLeave");
                    this.ValidateProperty("SumLeave", value);
                    this._sumLeave = value;
                    this.RaiseDataMemberChanged("SumLeave");
                    this.OnSumLeaveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WeekendType' value.
        /// </summary>
        [DataMember()]
        public string[] WeekendType
        {
            get
            {
                return this._weekendType;
            }
            set
            {
                if ((this._weekendType != value))
                {
                    this.OnWeekendTypeChanging(value);
                    this.RaiseDataMemberChanging("WeekendType");
                    this.ValidateProperty("WeekendType", value);
                    this._weekendType = value;
                    this.RaiseDataMemberChanged("WeekendType");
                    this.OnWeekendTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkTime' value.
        /// </summary>
        [DataMember()]
        public string WorkTime
        {
            get
            {
                return this._workTime;
            }
            set
            {
                if ((this._workTime != value))
                {
                    this.OnWorkTimeChanging(value);
                    this.RaiseDataMemberChanging("WorkTime");
                    this.ValidateProperty("WorkTime", value);
                    this._workTime = value;
                    this.RaiseDataMemberChanged("WorkTime");
                    this.OnWorkTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkType' value.
        /// </summary>
        [DataMember()]
        public string WorkType
        {
            get
            {
                return this._workType;
            }
            set
            {
                if ((this._workType != value))
                {
                    this.OnWorkTypeChanging(value);
                    this.RaiseDataMemberChanging("WorkType");
                    this.ValidateProperty("WorkType", value);
                    this._workType = value;
                    this.RaiseDataMemberChanged("WorkType");
                    this.OnWorkTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'XlsAttendWuHuShanPersonList' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class XlsAttendWuHuShanPersonList : Entity
    {
        
        private DateTime _attendDay;
        
        private int _attendRecordId;
        
        private int _attendTimes;
        
        private string _classOrderName;
        
        private string _classTypeName;
        
        private string _departName;
        
        private Nullable<DateTime> _inLocateTime;
        
        private Nullable<DateTime> _inWellTime;
        
        private Nullable<TimeSpan> _irisWorkTime;
        
        private Nullable<TimeSpan> _locateWorkTime;
        
        private Nullable<DateTime> _outLocateTime;
        
        private Nullable<DateTime> _outWellTime;
        
        private int _personId;
        
        private string _personName;
        
        private string _principal;
        
        private string _workSn;
        
        private int _workTime;
        
        private string _workType;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttendDayChanging(DateTime value);
        partial void OnAttendDayChanged();
        partial void OnAttendRecordIdChanging(int value);
        partial void OnAttendRecordIdChanged();
        partial void OnAttendTimesChanging(int value);
        partial void OnAttendTimesChanged();
        partial void OnClassOrderNameChanging(string value);
        partial void OnClassOrderNameChanged();
        partial void OnClassTypeNameChanging(string value);
        partial void OnClassTypeNameChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnInLocateTimeChanging(Nullable<DateTime> value);
        partial void OnInLocateTimeChanged();
        partial void OnInWellTimeChanging(Nullable<DateTime> value);
        partial void OnInWellTimeChanged();
        partial void OnIrisWorkTimeChanging(Nullable<TimeSpan> value);
        partial void OnIrisWorkTimeChanged();
        partial void OnLocateWorkTimeChanging(Nullable<TimeSpan> value);
        partial void OnLocateWorkTimeChanged();
        partial void OnOutLocateTimeChanging(Nullable<DateTime> value);
        partial void OnOutLocateTimeChanged();
        partial void OnOutWellTimeChanging(Nullable<DateTime> value);
        partial void OnOutWellTimeChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnPrincipalChanging(string value);
        partial void OnPrincipalChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();
        partial void OnWorkTimeChanging(int value);
        partial void OnWorkTimeChanged();
        partial void OnWorkTypeChanging(string value);
        partial void OnWorkTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="XlsAttendWuHuShanPersonList"/> class.
        /// </summary>
        public XlsAttendWuHuShanPersonList()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AttendDay' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public DateTime AttendDay
        {
            get
            {
                return this._attendDay;
            }
            set
            {
                if ((this._attendDay != value))
                {
                    this.OnAttendDayChanging(value);
                    this.ValidateProperty("AttendDay", value);
                    this._attendDay = value;
                    this.RaisePropertyChanged("AttendDay");
                    this.OnAttendDayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AttendRecordId' value.
        /// </summary>
        [DataMember()]
        public int AttendRecordId
        {
            get
            {
                return this._attendRecordId;
            }
            set
            {
                if ((this._attendRecordId != value))
                {
                    this.OnAttendRecordIdChanging(value);
                    this.RaiseDataMemberChanging("AttendRecordId");
                    this.ValidateProperty("AttendRecordId", value);
                    this._attendRecordId = value;
                    this.RaiseDataMemberChanged("AttendRecordId");
                    this.OnAttendRecordIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AttendTimes' value.
        /// </summary>
        [DataMember()]
        public int AttendTimes
        {
            get
            {
                return this._attendTimes;
            }
            set
            {
                if ((this._attendTimes != value))
                {
                    this.OnAttendTimesChanging(value);
                    this.RaiseDataMemberChanging("AttendTimes");
                    this.ValidateProperty("AttendTimes", value);
                    this._attendTimes = value;
                    this.RaiseDataMemberChanged("AttendTimes");
                    this.OnAttendTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClassOrderName' value.
        /// </summary>
        [DataMember()]
        public string ClassOrderName
        {
            get
            {
                return this._classOrderName;
            }
            set
            {
                if ((this._classOrderName != value))
                {
                    this.OnClassOrderNameChanging(value);
                    this.RaiseDataMemberChanging("ClassOrderName");
                    this.ValidateProperty("ClassOrderName", value);
                    this._classOrderName = value;
                    this.RaiseDataMemberChanged("ClassOrderName");
                    this.OnClassOrderNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClassTypeName' value.
        /// </summary>
        [DataMember()]
        public string ClassTypeName
        {
            get
            {
                return this._classTypeName;
            }
            set
            {
                if ((this._classTypeName != value))
                {
                    this.OnClassTypeNameChanging(value);
                    this.RaiseDataMemberChanging("ClassTypeName");
                    this.ValidateProperty("ClassTypeName", value);
                    this._classTypeName = value;
                    this.RaiseDataMemberChanged("ClassTypeName");
                    this.OnClassTypeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InLocateTime' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> InLocateTime
        {
            get
            {
                return this._inLocateTime;
            }
            set
            {
                if ((this._inLocateTime != value))
                {
                    this.OnInLocateTimeChanging(value);
                    this.RaiseDataMemberChanging("InLocateTime");
                    this.ValidateProperty("InLocateTime", value);
                    this._inLocateTime = value;
                    this.RaiseDataMemberChanged("InLocateTime");
                    this.OnInLocateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellTime' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> InWellTime
        {
            get
            {
                return this._inWellTime;
            }
            set
            {
                if ((this._inWellTime != value))
                {
                    this.OnInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("InWellTime");
                    this.ValidateProperty("InWellTime", value);
                    this._inWellTime = value;
                    this.RaiseDataMemberChanged("InWellTime");
                    this.OnInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IrisWorkTime' value.
        /// </summary>
        [DataMember()]
        public Nullable<TimeSpan> IrisWorkTime
        {
            get
            {
                return this._irisWorkTime;
            }
            set
            {
                if ((this._irisWorkTime != value))
                {
                    this.OnIrisWorkTimeChanging(value);
                    this.RaiseDataMemberChanging("IrisWorkTime");
                    this.ValidateProperty("IrisWorkTime", value);
                    this._irisWorkTime = value;
                    this.RaiseDataMemberChanged("IrisWorkTime");
                    this.OnIrisWorkTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocateWorkTime' value.
        /// </summary>
        [DataMember()]
        public Nullable<TimeSpan> LocateWorkTime
        {
            get
            {
                return this._locateWorkTime;
            }
            set
            {
                if ((this._locateWorkTime != value))
                {
                    this.OnLocateWorkTimeChanging(value);
                    this.RaiseDataMemberChanging("LocateWorkTime");
                    this.ValidateProperty("LocateWorkTime", value);
                    this._locateWorkTime = value;
                    this.RaiseDataMemberChanged("LocateWorkTime");
                    this.OnLocateWorkTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutLocateTime' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> OutLocateTime
        {
            get
            {
                return this._outLocateTime;
            }
            set
            {
                if ((this._outLocateTime != value))
                {
                    this.OnOutLocateTimeChanging(value);
                    this.RaiseDataMemberChanging("OutLocateTime");
                    this.ValidateProperty("OutLocateTime", value);
                    this._outLocateTime = value;
                    this.RaiseDataMemberChanged("OutLocateTime");
                    this.OnOutLocateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutWellTime' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> OutWellTime
        {
            get
            {
                return this._outWellTime;
            }
            set
            {
                if ((this._outWellTime != value))
                {
                    this.OnOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("OutWellTime");
                    this.ValidateProperty("OutWellTime", value);
                    this._outWellTime = value;
                    this.RaiseDataMemberChanged("OutWellTime");
                    this.OnOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaisePropertyChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Principal' value.
        /// </summary>
        [DataMember()]
        public string Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                if ((this._principal != value))
                {
                    this.OnPrincipalChanging(value);
                    this.RaiseDataMemberChanging("Principal");
                    this.ValidateProperty("Principal", value);
                    this._principal = value;
                    this.RaiseDataMemberChanged("Principal");
                    this.OnPrincipalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkTime' value.
        /// </summary>
        [DataMember()]
        public int WorkTime
        {
            get
            {
                return this._workTime;
            }
            set
            {
                if ((this._workTime != value))
                {
                    this.OnWorkTimeChanging(value);
                    this.RaiseDataMemberChanging("WorkTime");
                    this.ValidateProperty("WorkTime", value);
                    this._workTime = value;
                    this.RaiseDataMemberChanged("WorkTime");
                    this.OnWorkTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkType' value.
        /// </summary>
        [DataMember()]
        public string WorkType
        {
            get
            {
                return this._workType;
            }
            set
            {
                if ((this._workType != value))
                {
                    this.OnWorkTypeChanging(value);
                    this.RaiseDataMemberChanging("WorkType");
                    this.ValidateProperty("WorkType", value);
                    this._workType = value;
                    this.RaiseDataMemberChanged("WorkType");
                    this.OnWorkTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._attendDay, this._personId);
        }
    }
    
    /// <summary>
    /// The 'ZhuDuanMonthAttendReport' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class ZhuDuanMonthAttendReport : Entity
    {
        
        private float _attendCount;
        
        private string _classType;
        
        private string _departName;
        
        private string[] _displaySignal;
        
        private int _index;
        
        private int _personId;
        
        private string _personName;
        
        private string _workSn;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttendCountChanging(float value);
        partial void OnAttendCountChanged();
        partial void OnClassTypeChanging(string value);
        partial void OnClassTypeChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnDisplaySignalChanging(string[] value);
        partial void OnDisplaySignalChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnPersonIdChanging(int value);
        partial void OnPersonIdChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ZhuDuanMonthAttendReport"/> class.
        /// </summary>
        public ZhuDuanMonthAttendReport()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AttendCount' value.
        /// </summary>
        [DataMember()]
        public float AttendCount
        {
            get
            {
                return this._attendCount;
            }
            set
            {
                if ((this._attendCount != value))
                {
                    this.OnAttendCountChanging(value);
                    this.RaiseDataMemberChanging("AttendCount");
                    this.ValidateProperty("AttendCount", value);
                    this._attendCount = value;
                    this.RaiseDataMemberChanged("AttendCount");
                    this.OnAttendCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClassType' value.
        /// </summary>
        [DataMember()]
        public string ClassType
        {
            get
            {
                return this._classType;
            }
            set
            {
                if ((this._classType != value))
                {
                    this.OnClassTypeChanging(value);
                    this.RaiseDataMemberChanging("ClassType");
                    this.ValidateProperty("ClassType", value);
                    this._classType = value;
                    this.RaiseDataMemberChanged("ClassType");
                    this.OnClassTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DisplaySignal' value.
        /// </summary>
        [DataMember()]
        public string[] DisplaySignal
        {
            get
            {
                return this._displaySignal;
            }
            set
            {
                if ((this._displaySignal != value))
                {
                    this.OnDisplaySignalChanging(value);
                    this.RaiseDataMemberChanging("DisplaySignal");
                    this.ValidateProperty("DisplaySignal", value);
                    this._displaySignal = value;
                    this.RaiseDataMemberChanged("DisplaySignal");
                    this.OnDisplaySignalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.RaiseDataMemberChanging("Index");
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PersonId
        {
            get
            {
                return this._personId;
            }
            set
            {
                if ((this._personId != value))
                {
                    this.OnPersonIdChanging(value);
                    this.ValidateProperty("PersonId", value);
                    this._personId = value;
                    this.RaisePropertyChanged("PersonId");
                    this.OnPersonIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._personId;
        }
    }
    
    /// <summary>
    /// The 'ZKHBMonthList' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web")]
    public sealed partial class ZKHBMonthList : Entity
    {
        
        private int _dateId;
        
        private int _flag;
        
        private int _index;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateIdChanging(int value);
        partial void OnDateIdChanged();
        partial void OnFlagChanging(int value);
        partial void OnFlagChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ZKHBMonthList"/> class.
        /// </summary>
        public ZKHBMonthList()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DateId' value.
        /// </summary>
        [DataMember()]
        public int DateId
        {
            get
            {
                return this._dateId;
            }
            set
            {
                if ((this._dateId != value))
                {
                    this.OnDateIdChanging(value);
                    this.RaiseDataMemberChanging("DateId");
                    this.ValidateProperty("DateId", value);
                    this._dateId = value;
                    this.RaiseDataMemberChanged("DateId");
                    this.OnDateIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Flag' value.
        /// </summary>
        [DataMember()]
        public int Flag
        {
            get
            {
                return this._flag;
            }
            set
            {
                if ((this._flag != value))
                {
                    this.OnFlagChanging(value);
                    this.RaiseDataMemberChanging("Flag");
                    this.ValidateProperty("Flag", value);
                    this._flag = value;
                    this.RaiseDataMemberChanged("Flag");
                    this.OnFlagChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
}
namespace IriskingAttend.Web.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'GuoDianReportData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web.DataModel")]
    public sealed partial class GuoDianReportData : Entity
    {
        
        private string _customCol;
        
        private string _customColName;
        
        private IEnumerable<string> _dailyContent;
        
        private IEnumerable<int> _dailyState;
        
        private int _index;
        
        private int _personID;
        
        private string _personName;
        
        private string _title;
        
        private int _vaildAttendCount;
        
        private string _workSn;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCustomColChanging(string value);
        partial void OnCustomColChanged();
        partial void OnCustomColNameChanging(string value);
        partial void OnCustomColNameChanged();
        partial void OnDailyContentChanging(IEnumerable<string> value);
        partial void OnDailyContentChanged();
        partial void OnDailyStateChanging(IEnumerable<int> value);
        partial void OnDailyStateChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnPersonIDChanging(int value);
        partial void OnPersonIDChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnVaildAttendCountChanging(int value);
        partial void OnVaildAttendCountChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GuoDianReportData"/> class.
        /// </summary>
        public GuoDianReportData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CustomCol' value.
        /// </summary>
        [DataMember()]
        public string CustomCol
        {
            get
            {
                return this._customCol;
            }
            set
            {
                if ((this._customCol != value))
                {
                    this.OnCustomColChanging(value);
                    this.RaiseDataMemberChanging("CustomCol");
                    this.ValidateProperty("CustomCol", value);
                    this._customCol = value;
                    this.RaiseDataMemberChanged("CustomCol");
                    this.OnCustomColChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomColName' value.
        /// </summary>
        [DataMember()]
        public string CustomColName
        {
            get
            {
                return this._customColName;
            }
            set
            {
                if ((this._customColName != value))
                {
                    this.OnCustomColNameChanging(value);
                    this.RaiseDataMemberChanging("CustomColName");
                    this.ValidateProperty("CustomColName", value);
                    this._customColName = value;
                    this.RaiseDataMemberChanged("CustomColName");
                    this.OnCustomColNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DailyContent' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<string> DailyContent
        {
            get
            {
                return this._dailyContent;
            }
            set
            {
                if ((this._dailyContent != value))
                {
                    this.OnDailyContentChanging(value);
                    this.RaiseDataMemberChanging("DailyContent");
                    this.ValidateProperty("DailyContent", value);
                    this._dailyContent = value;
                    this.RaiseDataMemberChanged("DailyContent");
                    this.OnDailyContentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DailyState' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<int> DailyState
        {
            get
            {
                return this._dailyState;
            }
            set
            {
                if ((this._dailyState != value))
                {
                    this.OnDailyStateChanging(value);
                    this.RaiseDataMemberChanging("DailyState");
                    this.ValidateProperty("DailyState", value);
                    this._dailyState = value;
                    this.RaiseDataMemberChanged("DailyState");
                    this.OnDailyStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonID' value.
        /// </summary>
        [DataMember()]
        public int PersonID
        {
            get
            {
                return this._personID;
            }
            set
            {
                if ((this._personID != value))
                {
                    this.OnPersonIDChanging(value);
                    this.RaiseDataMemberChanging("PersonID");
                    this.ValidateProperty("PersonID", value);
                    this._personID = value;
                    this.RaiseDataMemberChanged("PersonID");
                    this.OnPersonIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Title' value.
        /// </summary>
        [DataMember()]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VaildAttendCount' value.
        /// </summary>
        [DataMember()]
        public int VaildAttendCount
        {
            get
            {
                return this._vaildAttendCount;
            }
            set
            {
                if ((this._vaildAttendCount != value))
                {
                    this.OnVaildAttendCountChanging(value);
                    this.RaiseDataMemberChanging("VaildAttendCount");
                    this.ValidateProperty("VaildAttendCount", value);
                    this._vaildAttendCount = value;
                    this.RaiseDataMemberChanged("VaildAttendCount");
                    this.OnVaildAttendCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
}
namespace IriskingAttend.Web.WuHuShan
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'AttendRecordInfo_WuhuShan' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web.WuHuShan")]
    public sealed partial class AttendRecordInfo_WuhuShan : Entity
    {
        
        private Nullable<DateTime> _attend_day;
        
        private int _attend_record_id;
        
        private int _attend_state;
        
        private string _class_order_name;
        
        private string _class_type_name;
        
        private string _depart_name;
        
        private Nullable<DateTime> _in_locate_time;
        
        private Nullable<DateTime> _in_well_time;
        
        private Nullable<TimeSpan> _iris_work_time;
        
        private bool _isSelected;
        
        private Nullable<TimeSpan> _locate_work_time;
        
        private string _name;
        
        private Nullable<DateTime> _out_locate_time;
        
        private Nullable<DateTime> _out_well_time;
        
        private int _person_id;
        
        private string _principal_name;
        
        private int _visibility1;
        
        private int _whs_locate_id;
        
        private string _work_sn;
        
        private string _work_type_name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onattend_dayChanging(Nullable<DateTime> value);
        partial void Onattend_dayChanged();
        partial void Onattend_record_idChanging(int value);
        partial void Onattend_record_idChanged();
        partial void Onattend_stateChanging(int value);
        partial void Onattend_stateChanged();
        partial void Onclass_order_nameChanging(string value);
        partial void Onclass_order_nameChanged();
        partial void Onclass_type_nameChanging(string value);
        partial void Onclass_type_nameChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Onin_locate_timeChanging(Nullable<DateTime> value);
        partial void Onin_locate_timeChanged();
        partial void Onin_well_timeChanging(Nullable<DateTime> value);
        partial void Onin_well_timeChanged();
        partial void Oniris_work_timeChanging(Nullable<TimeSpan> value);
        partial void Oniris_work_timeChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void Onlocate_work_timeChanging(Nullable<TimeSpan> value);
        partial void Onlocate_work_timeChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void Onout_locate_timeChanging(Nullable<DateTime> value);
        partial void Onout_locate_timeChanged();
        partial void Onout_well_timeChanging(Nullable<DateTime> value);
        partial void Onout_well_timeChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();
        partial void Onprincipal_nameChanging(string value);
        partial void Onprincipal_nameChanged();
        partial void OnVisibility1Changing(int value);
        partial void OnVisibility1Changed();
        partial void Onwhs_locate_idChanging(int value);
        partial void Onwhs_locate_idChanged();
        partial void Onwork_snChanging(string value);
        partial void Onwork_snChanged();
        partial void Onwork_type_nameChanging(string value);
        partial void Onwork_type_nameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AttendRecordInfo_WuhuShan"/> class.
        /// </summary>
        public AttendRecordInfo_WuhuShan()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'attend_day' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> attend_day
        {
            get
            {
                return this._attend_day;
            }
            set
            {
                if ((this._attend_day != value))
                {
                    this.Onattend_dayChanging(value);
                    this.RaiseDataMemberChanging("attend_day");
                    this.ValidateProperty("attend_day", value);
                    this._attend_day = value;
                    this.RaiseDataMemberChanged("attend_day");
                    this.Onattend_dayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_record_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int attend_record_id
        {
            get
            {
                return this._attend_record_id;
            }
            set
            {
                if ((this._attend_record_id != value))
                {
                    this.Onattend_record_idChanging(value);
                    this.ValidateProperty("attend_record_id", value);
                    this._attend_record_id = value;
                    this.RaisePropertyChanged("attend_record_id");
                    this.Onattend_record_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_state' value.
        /// </summary>
        [DataMember()]
        public int attend_state
        {
            get
            {
                return this._attend_state;
            }
            set
            {
                if ((this._attend_state != value))
                {
                    this.Onattend_stateChanging(value);
                    this.RaiseDataMemberChanging("attend_state");
                    this.ValidateProperty("attend_state", value);
                    this._attend_state = value;
                    this.RaiseDataMemberChanged("attend_state");
                    this.Onattend_stateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_order_name' value.
        /// </summary>
        [DataMember()]
        public string class_order_name
        {
            get
            {
                return this._class_order_name;
            }
            set
            {
                if ((this._class_order_name != value))
                {
                    this.Onclass_order_nameChanging(value);
                    this.RaiseDataMemberChanging("class_order_name");
                    this.ValidateProperty("class_order_name", value);
                    this._class_order_name = value;
                    this.RaiseDataMemberChanged("class_order_name");
                    this.Onclass_order_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_type_name' value.
        /// </summary>
        [DataMember()]
        public string class_type_name
        {
            get
            {
                return this._class_type_name;
            }
            set
            {
                if ((this._class_type_name != value))
                {
                    this.Onclass_type_nameChanging(value);
                    this.RaiseDataMemberChanging("class_type_name");
                    this.ValidateProperty("class_type_name", value);
                    this._class_type_name = value;
                    this.RaiseDataMemberChanged("class_type_name");
                    this.Onclass_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_locate_time' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> in_locate_time
        {
            get
            {
                return this._in_locate_time;
            }
            set
            {
                if ((this._in_locate_time != value))
                {
                    this.Onin_locate_timeChanging(value);
                    this.RaiseDataMemberChanging("in_locate_time");
                    this.ValidateProperty("in_locate_time", value);
                    this._in_locate_time = value;
                    this.RaiseDataMemberChanged("in_locate_time");
                    this.Onin_locate_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'in_well_time' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> in_well_time
        {
            get
            {
                return this._in_well_time;
            }
            set
            {
                if ((this._in_well_time != value))
                {
                    this.Onin_well_timeChanging(value);
                    this.RaiseDataMemberChanging("in_well_time");
                    this.ValidateProperty("in_well_time", value);
                    this._in_well_time = value;
                    this.RaiseDataMemberChanged("in_well_time");
                    this.Onin_well_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'iris_work_time' value.
        /// </summary>
        [DataMember()]
        public Nullable<TimeSpan> iris_work_time
        {
            get
            {
                return this._iris_work_time;
            }
            set
            {
                if ((this._iris_work_time != value))
                {
                    this.Oniris_work_timeChanging(value);
                    this.RaiseDataMemberChanging("iris_work_time");
                    this.ValidateProperty("iris_work_time", value);
                    this._iris_work_time = value;
                    this.RaiseDataMemberChanged("iris_work_time");
                    this.Oniris_work_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'locate_work_time' value.
        /// </summary>
        [DataMember()]
        public Nullable<TimeSpan> locate_work_time
        {
            get
            {
                return this._locate_work_time;
            }
            set
            {
                if ((this._locate_work_time != value))
                {
                    this.Onlocate_work_timeChanging(value);
                    this.RaiseDataMemberChanging("locate_work_time");
                    this.ValidateProperty("locate_work_time", value);
                    this._locate_work_time = value;
                    this.RaiseDataMemberChanged("locate_work_time");
                    this.Onlocate_work_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'name' value.
        /// </summary>
        [DataMember()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.RaiseDataMemberChanging("name");
                    this.ValidateProperty("name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("name");
                    this.OnnameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'out_locate_time' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> out_locate_time
        {
            get
            {
                return this._out_locate_time;
            }
            set
            {
                if ((this._out_locate_time != value))
                {
                    this.Onout_locate_timeChanging(value);
                    this.RaiseDataMemberChanging("out_locate_time");
                    this.ValidateProperty("out_locate_time", value);
                    this._out_locate_time = value;
                    this.RaiseDataMemberChanged("out_locate_time");
                    this.Onout_locate_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'out_well_time' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> out_well_time
        {
            get
            {
                return this._out_well_time;
            }
            set
            {
                if ((this._out_well_time != value))
                {
                    this.Onout_well_timeChanging(value);
                    this.RaiseDataMemberChanging("out_well_time");
                    this.ValidateProperty("out_well_time", value);
                    this._out_well_time = value;
                    this.RaiseDataMemberChanged("out_well_time");
                    this.Onout_well_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.RaiseDataMemberChanging("person_id");
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaiseDataMemberChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'principal_name' value.
        /// </summary>
        [DataMember()]
        public string principal_name
        {
            get
            {
                return this._principal_name;
            }
            set
            {
                if ((this._principal_name != value))
                {
                    this.Onprincipal_nameChanging(value);
                    this.RaiseDataMemberChanging("principal_name");
                    this.ValidateProperty("principal_name", value);
                    this._principal_name = value;
                    this.RaiseDataMemberChanged("principal_name");
                    this.Onprincipal_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Visibility1' value.
        /// </summary>
        [DataMember()]
        public int Visibility1
        {
            get
            {
                return this._visibility1;
            }
            set
            {
                if ((this._visibility1 != value))
                {
                    this.OnVisibility1Changing(value);
                    this.RaiseDataMemberChanging("Visibility1");
                    this.ValidateProperty("Visibility1", value);
                    this._visibility1 = value;
                    this.RaiseDataMemberChanged("Visibility1");
                    this.OnVisibility1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'whs_locate_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int whs_locate_id
        {
            get
            {
                return this._whs_locate_id;
            }
            set
            {
                if ((this._whs_locate_id != value))
                {
                    this.Onwhs_locate_idChanging(value);
                    this.ValidateProperty("whs_locate_id", value);
                    this._whs_locate_id = value;
                    this.RaisePropertyChanged("whs_locate_id");
                    this.Onwhs_locate_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_sn' value.
        /// </summary>
        [DataMember()]
        public string work_sn
        {
            get
            {
                return this._work_sn;
            }
            set
            {
                if ((this._work_sn != value))
                {
                    this.Onwork_snChanging(value);
                    this.RaiseDataMemberChanging("work_sn");
                    this.ValidateProperty("work_sn", value);
                    this._work_sn = value;
                    this.RaiseDataMemberChanged("work_sn");
                    this.Onwork_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_type_name' value.
        /// </summary>
        [DataMember()]
        public string work_type_name
        {
            get
            {
                return this._work_type_name;
            }
            set
            {
                if ((this._work_type_name != value))
                {
                    this.Onwork_type_nameChanging(value);
                    this.RaiseDataMemberChanging("work_type_name");
                    this.ValidateProperty("work_type_name", value);
                    this._work_type_name = value;
                    this.RaiseDataMemberChanged("work_type_name");
                    this.Onwork_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._attend_record_id, this._whs_locate_id);
        }
    }
}
namespace IriskingAttend.Web.ZhouYuanShan
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'DepartMonthAttend' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web.ZhouYuanShan")]
    public sealed partial class DepartMonthAttend : Entity
    {
        
        private string _attendMonth;
        
        private int _avgWorkTime;
        
        private int[] _classOrderCount;
        
        private string _departName;
        
        private string _index;
        
        private int _invalidTimes;
        
        private int _keyIndex;
        
        private int _lessAvailTimes;
        
        private int _sum0To2;
        
        private int _sum12Up;
        
        private int _sum2To4;
        
        private int _sum4To8;
        
        private int _sum8To12;
        
        private int _totalTimes;
        
        private int _totalWorkTime;
        
        private int _validTimes;
        
        private int _wanTimes;
        
        private int _zaoTimes;
        
        private int _zhongTimes;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttendMonthChanging(string value);
        partial void OnAttendMonthChanged();
        partial void OnAvgWorkTimeChanging(int value);
        partial void OnAvgWorkTimeChanged();
        partial void OnclassOrderCountChanging(int[] value);
        partial void OnclassOrderCountChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnIndexChanging(string value);
        partial void OnIndexChanged();
        partial void OnInvalidTimesChanging(int value);
        partial void OnInvalidTimesChanged();
        partial void OnKeyIndexChanging(int value);
        partial void OnKeyIndexChanged();
        partial void OnLessAvailTimesChanging(int value);
        partial void OnLessAvailTimesChanged();
        partial void OnSum0To2Changing(int value);
        partial void OnSum0To2Changed();
        partial void OnSum12UpChanging(int value);
        partial void OnSum12UpChanged();
        partial void OnSum2To4Changing(int value);
        partial void OnSum2To4Changed();
        partial void OnSum4To8Changing(int value);
        partial void OnSum4To8Changed();
        partial void OnSum8To12Changing(int value);
        partial void OnSum8To12Changed();
        partial void OnTotalTimesChanging(int value);
        partial void OnTotalTimesChanged();
        partial void OnTotalWorkTimeChanging(int value);
        partial void OnTotalWorkTimeChanged();
        partial void OnValidTimesChanging(int value);
        partial void OnValidTimesChanged();
        partial void OnWanTimesChanging(int value);
        partial void OnWanTimesChanged();
        partial void OnZaoTimesChanging(int value);
        partial void OnZaoTimesChanged();
        partial void OnZhongTimesChanging(int value);
        partial void OnZhongTimesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartMonthAttend"/> class.
        /// </summary>
        public DepartMonthAttend()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AttendMonth' value.
        /// </summary>
        [DataMember()]
        public string AttendMonth
        {
            get
            {
                return this._attendMonth;
            }
            set
            {
                if ((this._attendMonth != value))
                {
                    this.OnAttendMonthChanging(value);
                    this.RaiseDataMemberChanging("AttendMonth");
                    this.ValidateProperty("AttendMonth", value);
                    this._attendMonth = value;
                    this.RaiseDataMemberChanged("AttendMonth");
                    this.OnAttendMonthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AvgWorkTime' value.
        /// </summary>
        [DataMember()]
        public int AvgWorkTime
        {
            get
            {
                return this._avgWorkTime;
            }
            set
            {
                if ((this._avgWorkTime != value))
                {
                    this.OnAvgWorkTimeChanging(value);
                    this.RaiseDataMemberChanging("AvgWorkTime");
                    this.ValidateProperty("AvgWorkTime", value);
                    this._avgWorkTime = value;
                    this.RaiseDataMemberChanged("AvgWorkTime");
                    this.OnAvgWorkTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'classOrderCount' value.
        /// </summary>
        [DataMember()]
        public int[] classOrderCount
        {
            get
            {
                return this._classOrderCount;
            }
            set
            {
                if ((this._classOrderCount != value))
                {
                    this.OnclassOrderCountChanging(value);
                    this.RaiseDataMemberChanging("classOrderCount");
                    this.ValidateProperty("classOrderCount", value);
                    this._classOrderCount = value;
                    this.RaiseDataMemberChanged("classOrderCount");
                    this.OnclassOrderCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        public string Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.RaiseDataMemberChanging("Index");
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InvalidTimes' value.
        /// </summary>
        [DataMember()]
        public int InvalidTimes
        {
            get
            {
                return this._invalidTimes;
            }
            set
            {
                if ((this._invalidTimes != value))
                {
                    this.OnInvalidTimesChanging(value);
                    this.RaiseDataMemberChanging("InvalidTimes");
                    this.ValidateProperty("InvalidTimes", value);
                    this._invalidTimes = value;
                    this.RaiseDataMemberChanged("InvalidTimes");
                    this.OnInvalidTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'KeyIndex' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int KeyIndex
        {
            get
            {
                return this._keyIndex;
            }
            set
            {
                if ((this._keyIndex != value))
                {
                    this.OnKeyIndexChanging(value);
                    this.ValidateProperty("KeyIndex", value);
                    this._keyIndex = value;
                    this.RaisePropertyChanged("KeyIndex");
                    this.OnKeyIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LessAvailTimes' value.
        /// </summary>
        [DataMember()]
        public int LessAvailTimes
        {
            get
            {
                return this._lessAvailTimes;
            }
            set
            {
                if ((this._lessAvailTimes != value))
                {
                    this.OnLessAvailTimesChanging(value);
                    this.RaiseDataMemberChanging("LessAvailTimes");
                    this.ValidateProperty("LessAvailTimes", value);
                    this._lessAvailTimes = value;
                    this.RaiseDataMemberChanged("LessAvailTimes");
                    this.OnLessAvailTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sum0To2' value.
        /// </summary>
        [DataMember()]
        public int Sum0To2
        {
            get
            {
                return this._sum0To2;
            }
            set
            {
                if ((this._sum0To2 != value))
                {
                    this.OnSum0To2Changing(value);
                    this.RaiseDataMemberChanging("Sum0To2");
                    this.ValidateProperty("Sum0To2", value);
                    this._sum0To2 = value;
                    this.RaiseDataMemberChanged("Sum0To2");
                    this.OnSum0To2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sum12Up' value.
        /// </summary>
        [DataMember()]
        public int Sum12Up
        {
            get
            {
                return this._sum12Up;
            }
            set
            {
                if ((this._sum12Up != value))
                {
                    this.OnSum12UpChanging(value);
                    this.RaiseDataMemberChanging("Sum12Up");
                    this.ValidateProperty("Sum12Up", value);
                    this._sum12Up = value;
                    this.RaiseDataMemberChanged("Sum12Up");
                    this.OnSum12UpChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sum2To4' value.
        /// </summary>
        [DataMember()]
        public int Sum2To4
        {
            get
            {
                return this._sum2To4;
            }
            set
            {
                if ((this._sum2To4 != value))
                {
                    this.OnSum2To4Changing(value);
                    this.RaiseDataMemberChanging("Sum2To4");
                    this.ValidateProperty("Sum2To4", value);
                    this._sum2To4 = value;
                    this.RaiseDataMemberChanged("Sum2To4");
                    this.OnSum2To4Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sum4To8' value.
        /// </summary>
        [DataMember()]
        public int Sum4To8
        {
            get
            {
                return this._sum4To8;
            }
            set
            {
                if ((this._sum4To8 != value))
                {
                    this.OnSum4To8Changing(value);
                    this.RaiseDataMemberChanging("Sum4To8");
                    this.ValidateProperty("Sum4To8", value);
                    this._sum4To8 = value;
                    this.RaiseDataMemberChanged("Sum4To8");
                    this.OnSum4To8Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sum8To12' value.
        /// </summary>
        [DataMember()]
        public int Sum8To12
        {
            get
            {
                return this._sum8To12;
            }
            set
            {
                if ((this._sum8To12 != value))
                {
                    this.OnSum8To12Changing(value);
                    this.RaiseDataMemberChanging("Sum8To12");
                    this.ValidateProperty("Sum8To12", value);
                    this._sum8To12 = value;
                    this.RaiseDataMemberChanged("Sum8To12");
                    this.OnSum8To12Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalTimes' value.
        /// </summary>
        [DataMember()]
        public int TotalTimes
        {
            get
            {
                return this._totalTimes;
            }
            set
            {
                if ((this._totalTimes != value))
                {
                    this.OnTotalTimesChanging(value);
                    this.RaiseDataMemberChanging("TotalTimes");
                    this.ValidateProperty("TotalTimes", value);
                    this._totalTimes = value;
                    this.RaiseDataMemberChanged("TotalTimes");
                    this.OnTotalTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalWorkTime' value.
        /// </summary>
        [DataMember()]
        public int TotalWorkTime
        {
            get
            {
                return this._totalWorkTime;
            }
            set
            {
                if ((this._totalWorkTime != value))
                {
                    this.OnTotalWorkTimeChanging(value);
                    this.RaiseDataMemberChanging("TotalWorkTime");
                    this.ValidateProperty("TotalWorkTime", value);
                    this._totalWorkTime = value;
                    this.RaiseDataMemberChanged("TotalWorkTime");
                    this.OnTotalWorkTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ValidTimes' value.
        /// </summary>
        [DataMember()]
        public int ValidTimes
        {
            get
            {
                return this._validTimes;
            }
            set
            {
                if ((this._validTimes != value))
                {
                    this.OnValidTimesChanging(value);
                    this.RaiseDataMemberChanging("ValidTimes");
                    this.ValidateProperty("ValidTimes", value);
                    this._validTimes = value;
                    this.RaiseDataMemberChanged("ValidTimes");
                    this.OnValidTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WanTimes' value.
        /// </summary>
        [DataMember()]
        public int WanTimes
        {
            get
            {
                return this._wanTimes;
            }
            set
            {
                if ((this._wanTimes != value))
                {
                    this.OnWanTimesChanging(value);
                    this.RaiseDataMemberChanging("WanTimes");
                    this.ValidateProperty("WanTimes", value);
                    this._wanTimes = value;
                    this.RaiseDataMemberChanged("WanTimes");
                    this.OnWanTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ZaoTimes' value.
        /// </summary>
        [DataMember()]
        public int ZaoTimes
        {
            get
            {
                return this._zaoTimes;
            }
            set
            {
                if ((this._zaoTimes != value))
                {
                    this.OnZaoTimesChanging(value);
                    this.RaiseDataMemberChanging("ZaoTimes");
                    this.ValidateProperty("ZaoTimes", value);
                    this._zaoTimes = value;
                    this.RaiseDataMemberChanged("ZaoTimes");
                    this.OnZaoTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ZhongTimes' value.
        /// </summary>
        [DataMember()]
        public int ZhongTimes
        {
            get
            {
                return this._zhongTimes;
            }
            set
            {
                if ((this._zhongTimes != value))
                {
                    this.OnZhongTimesChanging(value);
                    this.RaiseDataMemberChanging("ZhongTimes");
                    this.ValidateProperty("ZhongTimes", value);
                    this._zhongTimes = value;
                    this.RaiseDataMemberChanged("ZhongTimes");
                    this.OnZhongTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._keyIndex;
        }
    }
    
    /// <summary>
    /// The 'LunchRecordInfoOnDepart' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web.ZhouYuanShan")]
    public sealed partial class LunchRecordInfoOnDepart : Entity
    {
        
        private int _attend_person_count;
        
        private int[] _attend_person_ids;
        
        private string[] _attend_person_names;
        
        private int _depart_id;
        
        private string _depart_name;
        
        private int[] _diff_count_per_person;
        
        private int _diff_person_count;
        
        private int[] _diff_person_ids;
        
        private string[] _diff_person_names;
        
        private DateTime _end_day;
        
        private bool _isSelected;
        
        private int[] _report_record_ids;
        
        private int _reported_count;
        
        private DateTime _start_day;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onattend_person_countChanging(int value);
        partial void Onattend_person_countChanged();
        partial void Onattend_person_idsChanging(int[] value);
        partial void Onattend_person_idsChanged();
        partial void Onattend_person_namesChanging(string[] value);
        partial void Onattend_person_namesChanged();
        partial void Ondepart_idChanging(int value);
        partial void Ondepart_idChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Ondiff_count_per_personChanging(int[] value);
        partial void Ondiff_count_per_personChanged();
        partial void Ondiff_person_countChanging(int value);
        partial void Ondiff_person_countChanged();
        partial void Ondiff_person_idsChanging(int[] value);
        partial void Ondiff_person_idsChanged();
        partial void Ondiff_person_namesChanging(string[] value);
        partial void Ondiff_person_namesChanged();
        partial void Onend_dayChanging(DateTime value);
        partial void Onend_dayChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void Onreport_record_idsChanging(int[] value);
        partial void Onreport_record_idsChanged();
        partial void Onreported_countChanging(int value);
        partial void Onreported_countChanged();
        partial void Onstart_dayChanging(DateTime value);
        partial void Onstart_dayChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LunchRecordInfoOnDepart"/> class.
        /// </summary>
        public LunchRecordInfoOnDepart()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'attend_person_count' value.
        /// </summary>
        [DataMember()]
        public int attend_person_count
        {
            get
            {
                return this._attend_person_count;
            }
            set
            {
                if ((this._attend_person_count != value))
                {
                    this.Onattend_person_countChanging(value);
                    this.RaiseDataMemberChanging("attend_person_count");
                    this.ValidateProperty("attend_person_count", value);
                    this._attend_person_count = value;
                    this.RaiseDataMemberChanged("attend_person_count");
                    this.Onattend_person_countChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_person_ids' value.
        /// </summary>
        [DataMember()]
        public int[] attend_person_ids
        {
            get
            {
                return this._attend_person_ids;
            }
            set
            {
                if ((this._attend_person_ids != value))
                {
                    this.Onattend_person_idsChanging(value);
                    this.RaiseDataMemberChanging("attend_person_ids");
                    this.ValidateProperty("attend_person_ids", value);
                    this._attend_person_ids = value;
                    this.RaiseDataMemberChanged("attend_person_ids");
                    this.Onattend_person_idsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_person_names' value.
        /// </summary>
        [DataMember()]
        public string[] attend_person_names
        {
            get
            {
                return this._attend_person_names;
            }
            set
            {
                if ((this._attend_person_names != value))
                {
                    this.Onattend_person_namesChanging(value);
                    this.RaiseDataMemberChanging("attend_person_names");
                    this.ValidateProperty("attend_person_names", value);
                    this._attend_person_names = value;
                    this.RaiseDataMemberChanged("attend_person_names");
                    this.Onattend_person_namesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int depart_id
        {
            get
            {
                return this._depart_id;
            }
            set
            {
                if ((this._depart_id != value))
                {
                    this.Ondepart_idChanging(value);
                    this.ValidateProperty("depart_id", value);
                    this._depart_id = value;
                    this.RaisePropertyChanged("depart_id");
                    this.Ondepart_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'diff_count_per_person' value.
        /// </summary>
        [DataMember()]
        public int[] diff_count_per_person
        {
            get
            {
                return this._diff_count_per_person;
            }
            set
            {
                if ((this._diff_count_per_person != value))
                {
                    this.Ondiff_count_per_personChanging(value);
                    this.RaiseDataMemberChanging("diff_count_per_person");
                    this.ValidateProperty("diff_count_per_person", value);
                    this._diff_count_per_person = value;
                    this.RaiseDataMemberChanged("diff_count_per_person");
                    this.Ondiff_count_per_personChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'diff_person_count' value.
        /// </summary>
        [DataMember()]
        public int diff_person_count
        {
            get
            {
                return this._diff_person_count;
            }
            set
            {
                if ((this._diff_person_count != value))
                {
                    this.Ondiff_person_countChanging(value);
                    this.RaiseDataMemberChanging("diff_person_count");
                    this.ValidateProperty("diff_person_count", value);
                    this._diff_person_count = value;
                    this.RaiseDataMemberChanged("diff_person_count");
                    this.Ondiff_person_countChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'diff_person_ids' value.
        /// </summary>
        [DataMember()]
        public int[] diff_person_ids
        {
            get
            {
                return this._diff_person_ids;
            }
            set
            {
                if ((this._diff_person_ids != value))
                {
                    this.Ondiff_person_idsChanging(value);
                    this.RaiseDataMemberChanging("diff_person_ids");
                    this.ValidateProperty("diff_person_ids", value);
                    this._diff_person_ids = value;
                    this.RaiseDataMemberChanged("diff_person_ids");
                    this.Ondiff_person_idsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'diff_person_names' value.
        /// </summary>
        [DataMember()]
        public string[] diff_person_names
        {
            get
            {
                return this._diff_person_names;
            }
            set
            {
                if ((this._diff_person_names != value))
                {
                    this.Ondiff_person_namesChanging(value);
                    this.RaiseDataMemberChanging("diff_person_names");
                    this.ValidateProperty("diff_person_names", value);
                    this._diff_person_names = value;
                    this.RaiseDataMemberChanged("diff_person_names");
                    this.Ondiff_person_namesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'end_day' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public DateTime end_day
        {
            get
            {
                return this._end_day;
            }
            set
            {
                if ((this._end_day != value))
                {
                    this.Onend_dayChanging(value);
                    this.ValidateProperty("end_day", value);
                    this._end_day = value;
                    this.RaisePropertyChanged("end_day");
                    this.Onend_dayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'report_record_ids' value.
        /// </summary>
        [DataMember()]
        public int[] report_record_ids
        {
            get
            {
                return this._report_record_ids;
            }
            set
            {
                if ((this._report_record_ids != value))
                {
                    this.Onreport_record_idsChanging(value);
                    this.RaiseDataMemberChanging("report_record_ids");
                    this.ValidateProperty("report_record_ids", value);
                    this._report_record_ids = value;
                    this.RaiseDataMemberChanged("report_record_ids");
                    this.Onreport_record_idsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'reported_count' value.
        /// </summary>
        [DataMember()]
        public int reported_count
        {
            get
            {
                return this._reported_count;
            }
            set
            {
                if ((this._reported_count != value))
                {
                    this.Onreported_countChanging(value);
                    this.RaiseDataMemberChanging("reported_count");
                    this.ValidateProperty("reported_count", value);
                    this._reported_count = value;
                    this.RaiseDataMemberChanged("reported_count");
                    this.Onreported_countChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'start_day' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public DateTime start_day
        {
            get
            {
                return this._start_day;
            }
            set
            {
                if ((this._start_day != value))
                {
                    this.Onstart_dayChanging(value);
                    this.ValidateProperty("start_day", value);
                    this._start_day = value;
                    this.RaisePropertyChanged("start_day");
                    this.Onstart_dayChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._depart_id, this._end_day, this._start_day);
        }
    }
    
    /// <summary>
    /// The 'LunchRecordInfoOnPerson' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web.ZhouYuanShan")]
    public sealed partial class LunchRecordInfoOnPerson : Entity
    {
        
        private string _attend_sign;
        
        private string _class_order_name;
        
        private int _depart_id;
        
        private string _depart_name;
        
        private int _diff_count;
        
        private bool _isSelected;
        
        private string _name;
        
        private int _person_id;
        
        private int _report_class_order_id;
        
        private DateTime _report_day;
        
        private int _report_depart_id;
        
        private string _report_depart_name;
        
        private string _work_sn;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onattend_signChanging(string value);
        partial void Onattend_signChanged();
        partial void Onclass_order_nameChanging(string value);
        partial void Onclass_order_nameChanged();
        partial void Ondepart_idChanging(int value);
        partial void Ondepart_idChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Ondiff_countChanging(int value);
        partial void Ondiff_countChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();
        partial void Onreport_class_order_idChanging(int value);
        partial void Onreport_class_order_idChanged();
        partial void Onreport_dayChanging(DateTime value);
        partial void Onreport_dayChanged();
        partial void Onreport_depart_idChanging(int value);
        partial void Onreport_depart_idChanged();
        partial void Onreport_depart_nameChanging(string value);
        partial void Onreport_depart_nameChanged();
        partial void Onwork_snChanging(string value);
        partial void Onwork_snChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LunchRecordInfoOnPerson"/> class.
        /// </summary>
        public LunchRecordInfoOnPerson()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'attend_sign' value.
        /// </summary>
        [DataMember()]
        public string attend_sign
        {
            get
            {
                return this._attend_sign;
            }
            set
            {
                if ((this._attend_sign != value))
                {
                    this.Onattend_signChanging(value);
                    this.RaiseDataMemberChanging("attend_sign");
                    this.ValidateProperty("attend_sign", value);
                    this._attend_sign = value;
                    this.RaiseDataMemberChanged("attend_sign");
                    this.Onattend_signChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_order_name' value.
        /// </summary>
        [DataMember()]
        public string class_order_name
        {
            get
            {
                return this._class_order_name;
            }
            set
            {
                if ((this._class_order_name != value))
                {
                    this.Onclass_order_nameChanging(value);
                    this.RaiseDataMemberChanging("class_order_name");
                    this.ValidateProperty("class_order_name", value);
                    this._class_order_name = value;
                    this.RaiseDataMemberChanged("class_order_name");
                    this.Onclass_order_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_id' value.
        /// </summary>
        [DataMember()]
        public int depart_id
        {
            get
            {
                return this._depart_id;
            }
            set
            {
                if ((this._depart_id != value))
                {
                    this.Ondepart_idChanging(value);
                    this.RaiseDataMemberChanging("depart_id");
                    this.ValidateProperty("depart_id", value);
                    this._depart_id = value;
                    this.RaiseDataMemberChanged("depart_id");
                    this.Ondepart_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'diff_count' value.
        /// </summary>
        [DataMember()]
        public int diff_count
        {
            get
            {
                return this._diff_count;
            }
            set
            {
                if ((this._diff_count != value))
                {
                    this.Ondiff_countChanging(value);
                    this.RaiseDataMemberChanging("diff_count");
                    this.ValidateProperty("diff_count", value);
                    this._diff_count = value;
                    this.RaiseDataMemberChanged("diff_count");
                    this.Ondiff_countChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'name' value.
        /// </summary>
        [DataMember()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.RaiseDataMemberChanging("name");
                    this.ValidateProperty("name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("name");
                    this.OnnameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaisePropertyChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'report_class_order_id' value.
        /// </summary>
        [DataMember()]
        public int report_class_order_id
        {
            get
            {
                return this._report_class_order_id;
            }
            set
            {
                if ((this._report_class_order_id != value))
                {
                    this.Onreport_class_order_idChanging(value);
                    this.RaiseDataMemberChanging("report_class_order_id");
                    this.ValidateProperty("report_class_order_id", value);
                    this._report_class_order_id = value;
                    this.RaiseDataMemberChanged("report_class_order_id");
                    this.Onreport_class_order_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'report_day' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public DateTime report_day
        {
            get
            {
                return this._report_day;
            }
            set
            {
                if ((this._report_day != value))
                {
                    this.Onreport_dayChanging(value);
                    this.ValidateProperty("report_day", value);
                    this._report_day = value;
                    this.RaisePropertyChanged("report_day");
                    this.Onreport_dayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'report_depart_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int report_depart_id
        {
            get
            {
                return this._report_depart_id;
            }
            set
            {
                if ((this._report_depart_id != value))
                {
                    this.Onreport_depart_idChanging(value);
                    this.ValidateProperty("report_depart_id", value);
                    this._report_depart_id = value;
                    this.RaisePropertyChanged("report_depart_id");
                    this.Onreport_depart_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'report_depart_name' value.
        /// </summary>
        [DataMember()]
        public string report_depart_name
        {
            get
            {
                return this._report_depart_name;
            }
            set
            {
                if ((this._report_depart_name != value))
                {
                    this.Onreport_depart_nameChanging(value);
                    this.RaiseDataMemberChanging("report_depart_name");
                    this.ValidateProperty("report_depart_name", value);
                    this._report_depart_name = value;
                    this.RaiseDataMemberChanged("report_depart_name");
                    this.Onreport_depart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_sn' value.
        /// </summary>
        [DataMember()]
        public string work_sn
        {
            get
            {
                return this._work_sn;
            }
            set
            {
                if ((this._work_sn != value))
                {
                    this.Onwork_snChanging(value);
                    this.RaiseDataMemberChanging("work_sn");
                    this.ValidateProperty("work_sn", value);
                    this._work_sn = value;
                    this.RaiseDataMemberChanged("work_sn");
                    this.Onwork_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._person_id, this._report_day, this._report_depart_id);
        }
    }
    
    /// <summary>
    /// The 'PersonAttendStatistics' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web.ZhouYuanShan")]
    public sealed partial class PersonAttendStatistics : Entity
    {
        
        private string[] _attend_signs;
        
        private int _avg_work_time;
        
        private int[] _classOrderCount;
        
        private string _daily_content_description;
        
        private int _depart_id;
        
        private string _depart_name;
        
        private string[] _display_content;
        
        private string[] _display_content_color;
        
        private int _invalid_times;
        
        private int _less_avail_times;
        
        private string _month;
        
        private string _name;
        
        private int _person_id;
        
        private int _sum_0_2;
        
        private int _sum_12;
        
        private int _sum_2_4;
        
        private int _sum_4_8;
        
        private int _sum_8_12;
        
        private string[] _time_descriptions;
        
        private int _total_times;
        
        private int _total_work_time;
        
        private int _valid_times;
        
        private int _wan_times;
        
        private string _work_sn;
        
        private string[] _work_times;
        
        private int _work_type_id;
        
        private string _work_type_name;
        
        private int _zao_times;
        
        private int _zhong_times;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onattend_signsChanging(string[] value);
        partial void Onattend_signsChanged();
        partial void Onavg_work_timeChanging(int value);
        partial void Onavg_work_timeChanged();
        partial void OnclassOrderCountChanging(int[] value);
        partial void OnclassOrderCountChanged();
        partial void Ondaily_content_descriptionChanging(string value);
        partial void Ondaily_content_descriptionChanged();
        partial void Ondepart_idChanging(int value);
        partial void Ondepart_idChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Ondisplay_contentChanging(string[] value);
        partial void Ondisplay_contentChanged();
        partial void Ondisplay_content_colorChanging(string[] value);
        partial void Ondisplay_content_colorChanged();
        partial void Oninvalid_timesChanging(int value);
        partial void Oninvalid_timesChanged();
        partial void Onless_avail_timesChanging(int value);
        partial void Onless_avail_timesChanged();
        partial void OnmonthChanging(string value);
        partial void OnmonthChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void Onperson_idChanging(int value);
        partial void Onperson_idChanged();
        partial void Onsum_0_2Changing(int value);
        partial void Onsum_0_2Changed();
        partial void Onsum_12Changing(int value);
        partial void Onsum_12Changed();
        partial void Onsum_2_4Changing(int value);
        partial void Onsum_2_4Changed();
        partial void Onsum_4_8Changing(int value);
        partial void Onsum_4_8Changed();
        partial void Onsum_8_12Changing(int value);
        partial void Onsum_8_12Changed();
        partial void Ontime_descriptionsChanging(string[] value);
        partial void Ontime_descriptionsChanged();
        partial void Ontotal_timesChanging(int value);
        partial void Ontotal_timesChanged();
        partial void Ontotal_work_timeChanging(int value);
        partial void Ontotal_work_timeChanged();
        partial void Onvalid_timesChanging(int value);
        partial void Onvalid_timesChanged();
        partial void Onwan_timesChanging(int value);
        partial void Onwan_timesChanged();
        partial void Onwork_snChanging(string value);
        partial void Onwork_snChanged();
        partial void Onwork_timesChanging(string[] value);
        partial void Onwork_timesChanged();
        partial void Onwork_type_idChanging(int value);
        partial void Onwork_type_idChanged();
        partial void Onwork_type_nameChanging(string value);
        partial void Onwork_type_nameChanged();
        partial void Onzao_timesChanging(int value);
        partial void Onzao_timesChanged();
        partial void Onzhong_timesChanging(int value);
        partial void Onzhong_timesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonAttendStatistics"/> class.
        /// </summary>
        public PersonAttendStatistics()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'attend_signs' value.
        /// </summary>
        [DataMember()]
        public string[] attend_signs
        {
            get
            {
                return this._attend_signs;
            }
            set
            {
                if ((this._attend_signs != value))
                {
                    this.Onattend_signsChanging(value);
                    this.RaiseDataMemberChanging("attend_signs");
                    this.ValidateProperty("attend_signs", value);
                    this._attend_signs = value;
                    this.RaiseDataMemberChanged("attend_signs");
                    this.Onattend_signsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'avg_work_time' value.
        /// </summary>
        [DataMember()]
        public int avg_work_time
        {
            get
            {
                return this._avg_work_time;
            }
            set
            {
                if ((this._avg_work_time != value))
                {
                    this.Onavg_work_timeChanging(value);
                    this.RaiseDataMemberChanging("avg_work_time");
                    this.ValidateProperty("avg_work_time", value);
                    this._avg_work_time = value;
                    this.RaiseDataMemberChanged("avg_work_time");
                    this.Onavg_work_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'classOrderCount' value.
        /// </summary>
        [DataMember()]
        public int[] classOrderCount
        {
            get
            {
                return this._classOrderCount;
            }
            set
            {
                if ((this._classOrderCount != value))
                {
                    this.OnclassOrderCountChanging(value);
                    this.RaiseDataMemberChanging("classOrderCount");
                    this.ValidateProperty("classOrderCount", value);
                    this._classOrderCount = value;
                    this.RaiseDataMemberChanged("classOrderCount");
                    this.OnclassOrderCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'daily_content_description' value.
        /// </summary>
        [DataMember()]
        public string daily_content_description
        {
            get
            {
                return this._daily_content_description;
            }
            set
            {
                if ((this._daily_content_description != value))
                {
                    this.Ondaily_content_descriptionChanging(value);
                    this.RaiseDataMemberChanging("daily_content_description");
                    this.ValidateProperty("daily_content_description", value);
                    this._daily_content_description = value;
                    this.RaiseDataMemberChanged("daily_content_description");
                    this.Ondaily_content_descriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_id' value.
        /// </summary>
        [DataMember()]
        public int depart_id
        {
            get
            {
                return this._depart_id;
            }
            set
            {
                if ((this._depart_id != value))
                {
                    this.Ondepart_idChanging(value);
                    this.RaiseDataMemberChanging("depart_id");
                    this.ValidateProperty("depart_id", value);
                    this._depart_id = value;
                    this.RaiseDataMemberChanged("depart_id");
                    this.Ondepart_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'display_content' value.
        /// </summary>
        [DataMember()]
        public string[] display_content
        {
            get
            {
                return this._display_content;
            }
            set
            {
                if ((this._display_content != value))
                {
                    this.Ondisplay_contentChanging(value);
                    this.RaiseDataMemberChanging("display_content");
                    this.ValidateProperty("display_content", value);
                    this._display_content = value;
                    this.RaiseDataMemberChanged("display_content");
                    this.Ondisplay_contentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'display_content_color' value.
        /// </summary>
        [DataMember()]
        public string[] display_content_color
        {
            get
            {
                return this._display_content_color;
            }
            set
            {
                if ((this._display_content_color != value))
                {
                    this.Ondisplay_content_colorChanging(value);
                    this.RaiseDataMemberChanging("display_content_color");
                    this.ValidateProperty("display_content_color", value);
                    this._display_content_color = value;
                    this.RaiseDataMemberChanged("display_content_color");
                    this.Ondisplay_content_colorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'invalid_times' value.
        /// </summary>
        [DataMember()]
        public int invalid_times
        {
            get
            {
                return this._invalid_times;
            }
            set
            {
                if ((this._invalid_times != value))
                {
                    this.Oninvalid_timesChanging(value);
                    this.RaiseDataMemberChanging("invalid_times");
                    this.ValidateProperty("invalid_times", value);
                    this._invalid_times = value;
                    this.RaiseDataMemberChanged("invalid_times");
                    this.Oninvalid_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'less_avail_times' value.
        /// </summary>
        [DataMember()]
        public int less_avail_times
        {
            get
            {
                return this._less_avail_times;
            }
            set
            {
                if ((this._less_avail_times != value))
                {
                    this.Onless_avail_timesChanging(value);
                    this.RaiseDataMemberChanging("less_avail_times");
                    this.ValidateProperty("less_avail_times", value);
                    this._less_avail_times = value;
                    this.RaiseDataMemberChanged("less_avail_times");
                    this.Onless_avail_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'month' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string month
        {
            get
            {
                return this._month;
            }
            set
            {
                if ((this._month != value))
                {
                    this.OnmonthChanging(value);
                    this.ValidateProperty("month", value);
                    this._month = value;
                    this.RaisePropertyChanged("month");
                    this.OnmonthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'name' value.
        /// </summary>
        [DataMember()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.RaiseDataMemberChanging("name");
                    this.ValidateProperty("name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("name");
                    this.OnnameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'person_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int person_id
        {
            get
            {
                return this._person_id;
            }
            set
            {
                if ((this._person_id != value))
                {
                    this.Onperson_idChanging(value);
                    this.ValidateProperty("person_id", value);
                    this._person_id = value;
                    this.RaisePropertyChanged("person_id");
                    this.Onperson_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sum_0_2' value.
        /// </summary>
        [DataMember()]
        public int sum_0_2
        {
            get
            {
                return this._sum_0_2;
            }
            set
            {
                if ((this._sum_0_2 != value))
                {
                    this.Onsum_0_2Changing(value);
                    this.RaiseDataMemberChanging("sum_0_2");
                    this.ValidateProperty("sum_0_2", value);
                    this._sum_0_2 = value;
                    this.RaiseDataMemberChanged("sum_0_2");
                    this.Onsum_0_2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sum_12' value.
        /// </summary>
        [DataMember()]
        public int sum_12
        {
            get
            {
                return this._sum_12;
            }
            set
            {
                if ((this._sum_12 != value))
                {
                    this.Onsum_12Changing(value);
                    this.RaiseDataMemberChanging("sum_12");
                    this.ValidateProperty("sum_12", value);
                    this._sum_12 = value;
                    this.RaiseDataMemberChanged("sum_12");
                    this.Onsum_12Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sum_2_4' value.
        /// </summary>
        [DataMember()]
        public int sum_2_4
        {
            get
            {
                return this._sum_2_4;
            }
            set
            {
                if ((this._sum_2_4 != value))
                {
                    this.Onsum_2_4Changing(value);
                    this.RaiseDataMemberChanging("sum_2_4");
                    this.ValidateProperty("sum_2_4", value);
                    this._sum_2_4 = value;
                    this.RaiseDataMemberChanged("sum_2_4");
                    this.Onsum_2_4Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sum_4_8' value.
        /// </summary>
        [DataMember()]
        public int sum_4_8
        {
            get
            {
                return this._sum_4_8;
            }
            set
            {
                if ((this._sum_4_8 != value))
                {
                    this.Onsum_4_8Changing(value);
                    this.RaiseDataMemberChanging("sum_4_8");
                    this.ValidateProperty("sum_4_8", value);
                    this._sum_4_8 = value;
                    this.RaiseDataMemberChanged("sum_4_8");
                    this.Onsum_4_8Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sum_8_12' value.
        /// </summary>
        [DataMember()]
        public int sum_8_12
        {
            get
            {
                return this._sum_8_12;
            }
            set
            {
                if ((this._sum_8_12 != value))
                {
                    this.Onsum_8_12Changing(value);
                    this.RaiseDataMemberChanging("sum_8_12");
                    this.ValidateProperty("sum_8_12", value);
                    this._sum_8_12 = value;
                    this.RaiseDataMemberChanged("sum_8_12");
                    this.Onsum_8_12Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'time_descriptions' value.
        /// </summary>
        [DataMember()]
        public string[] time_descriptions
        {
            get
            {
                return this._time_descriptions;
            }
            set
            {
                if ((this._time_descriptions != value))
                {
                    this.Ontime_descriptionsChanging(value);
                    this.RaiseDataMemberChanging("time_descriptions");
                    this.ValidateProperty("time_descriptions", value);
                    this._time_descriptions = value;
                    this.RaiseDataMemberChanged("time_descriptions");
                    this.Ontime_descriptionsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'total_times' value.
        /// </summary>
        [DataMember()]
        public int total_times
        {
            get
            {
                return this._total_times;
            }
            set
            {
                if ((this._total_times != value))
                {
                    this.Ontotal_timesChanging(value);
                    this.RaiseDataMemberChanging("total_times");
                    this.ValidateProperty("total_times", value);
                    this._total_times = value;
                    this.RaiseDataMemberChanged("total_times");
                    this.Ontotal_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'total_work_time' value.
        /// </summary>
        [DataMember()]
        public int total_work_time
        {
            get
            {
                return this._total_work_time;
            }
            set
            {
                if ((this._total_work_time != value))
                {
                    this.Ontotal_work_timeChanging(value);
                    this.RaiseDataMemberChanging("total_work_time");
                    this.ValidateProperty("total_work_time", value);
                    this._total_work_time = value;
                    this.RaiseDataMemberChanged("total_work_time");
                    this.Ontotal_work_timeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'valid_times' value.
        /// </summary>
        [DataMember()]
        public int valid_times
        {
            get
            {
                return this._valid_times;
            }
            set
            {
                if ((this._valid_times != value))
                {
                    this.Onvalid_timesChanging(value);
                    this.RaiseDataMemberChanging("valid_times");
                    this.ValidateProperty("valid_times", value);
                    this._valid_times = value;
                    this.RaiseDataMemberChanged("valid_times");
                    this.Onvalid_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'wan_times' value.
        /// </summary>
        [DataMember()]
        public int wan_times
        {
            get
            {
                return this._wan_times;
            }
            set
            {
                if ((this._wan_times != value))
                {
                    this.Onwan_timesChanging(value);
                    this.RaiseDataMemberChanging("wan_times");
                    this.ValidateProperty("wan_times", value);
                    this._wan_times = value;
                    this.RaiseDataMemberChanged("wan_times");
                    this.Onwan_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_sn' value.
        /// </summary>
        [DataMember()]
        public string work_sn
        {
            get
            {
                return this._work_sn;
            }
            set
            {
                if ((this._work_sn != value))
                {
                    this.Onwork_snChanging(value);
                    this.RaiseDataMemberChanging("work_sn");
                    this.ValidateProperty("work_sn", value);
                    this._work_sn = value;
                    this.RaiseDataMemberChanged("work_sn");
                    this.Onwork_snChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_times' value.
        /// </summary>
        [DataMember()]
        public string[] work_times
        {
            get
            {
                return this._work_times;
            }
            set
            {
                if ((this._work_times != value))
                {
                    this.Onwork_timesChanging(value);
                    this.RaiseDataMemberChanging("work_times");
                    this.ValidateProperty("work_times", value);
                    this._work_times = value;
                    this.RaiseDataMemberChanged("work_times");
                    this.Onwork_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_type_id' value.
        /// </summary>
        [DataMember()]
        public int work_type_id
        {
            get
            {
                return this._work_type_id;
            }
            set
            {
                if ((this._work_type_id != value))
                {
                    this.Onwork_type_idChanging(value);
                    this.RaiseDataMemberChanging("work_type_id");
                    this.ValidateProperty("work_type_id", value);
                    this._work_type_id = value;
                    this.RaiseDataMemberChanged("work_type_id");
                    this.Onwork_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_type_name' value.
        /// </summary>
        [DataMember()]
        public string work_type_name
        {
            get
            {
                return this._work_type_name;
            }
            set
            {
                if ((this._work_type_name != value))
                {
                    this.Onwork_type_nameChanging(value);
                    this.RaiseDataMemberChanging("work_type_name");
                    this.ValidateProperty("work_type_name", value);
                    this._work_type_name = value;
                    this.RaiseDataMemberChanged("work_type_name");
                    this.Onwork_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'zao_times' value.
        /// </summary>
        [DataMember()]
        public int zao_times
        {
            get
            {
                return this._zao_times;
            }
            set
            {
                if ((this._zao_times != value))
                {
                    this.Onzao_timesChanging(value);
                    this.RaiseDataMemberChanging("zao_times");
                    this.ValidateProperty("zao_times", value);
                    this._zao_times = value;
                    this.RaiseDataMemberChanged("zao_times");
                    this.Onzao_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'zhong_times' value.
        /// </summary>
        [DataMember()]
        public int zhong_times
        {
            get
            {
                return this._zhong_times;
            }
            set
            {
                if ((this._zhong_times != value))
                {
                    this.Onzhong_timesChanging(value);
                    this.RaiseDataMemberChanging("zhong_times");
                    this.ValidateProperty("zhong_times", value);
                    this._zhong_times = value;
                    this.RaiseDataMemberChanged("zhong_times");
                    this.Onzhong_timesChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._month == null))
            {
                return null;
            }
            return EntityKey.Create(this._month, this._person_id);
        }
    }
    
    /// <summary>
    /// The 'PersonDayAttend' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web.ZhouYuanShan")]
    public sealed partial class PersonDayAttend : Entity
    {
        
        private string _attendDay;
        
        private string _departName;
        
        private int _index;
        
        private string _inWellTime;
        
        private string _outWellTime;
        
        private string _personName;
        
        private string _principal;
        
        private float _workCnt;
        
        private string _workSn;
        
        private int _workTime;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttendDayChanging(string value);
        partial void OnAttendDayChanged();
        partial void OnDepartNameChanging(string value);
        partial void OnDepartNameChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnInWellTimeChanging(string value);
        partial void OnInWellTimeChanged();
        partial void OnOutWellTimeChanging(string value);
        partial void OnOutWellTimeChanged();
        partial void OnPersonNameChanging(string value);
        partial void OnPersonNameChanged();
        partial void OnPrincipalChanging(string value);
        partial void OnPrincipalChanged();
        partial void OnWorkCntChanging(float value);
        partial void OnWorkCntChanged();
        partial void OnWorkSnChanging(string value);
        partial void OnWorkSnChanged();
        partial void OnWorkTimeChanging(int value);
        partial void OnWorkTimeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonDayAttend"/> class.
        /// </summary>
        public PersonDayAttend()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AttendDay' value.
        /// </summary>
        [DataMember()]
        public string AttendDay
        {
            get
            {
                return this._attendDay;
            }
            set
            {
                if ((this._attendDay != value))
                {
                    this.OnAttendDayChanging(value);
                    this.RaiseDataMemberChanging("AttendDay");
                    this.ValidateProperty("AttendDay", value);
                    this._attendDay = value;
                    this.RaiseDataMemberChanged("AttendDay");
                    this.OnAttendDayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartName' value.
        /// </summary>
        [DataMember()]
        public string DepartName
        {
            get
            {
                return this._departName;
            }
            set
            {
                if ((this._departName != value))
                {
                    this.OnDepartNameChanging(value);
                    this.RaiseDataMemberChanging("DepartName");
                    this.ValidateProperty("DepartName", value);
                    this._departName = value;
                    this.RaiseDataMemberChanged("DepartName");
                    this.OnDepartNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaisePropertyChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InWellTime' value.
        /// </summary>
        [DataMember()]
        public string InWellTime
        {
            get
            {
                return this._inWellTime;
            }
            set
            {
                if ((this._inWellTime != value))
                {
                    this.OnInWellTimeChanging(value);
                    this.RaiseDataMemberChanging("InWellTime");
                    this.ValidateProperty("InWellTime", value);
                    this._inWellTime = value;
                    this.RaiseDataMemberChanged("InWellTime");
                    this.OnInWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutWellTime' value.
        /// </summary>
        [DataMember()]
        public string OutWellTime
        {
            get
            {
                return this._outWellTime;
            }
            set
            {
                if ((this._outWellTime != value))
                {
                    this.OnOutWellTimeChanging(value);
                    this.RaiseDataMemberChanging("OutWellTime");
                    this.ValidateProperty("OutWellTime", value);
                    this._outWellTime = value;
                    this.RaiseDataMemberChanged("OutWellTime");
                    this.OnOutWellTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PersonName' value.
        /// </summary>
        [DataMember()]
        public string PersonName
        {
            get
            {
                return this._personName;
            }
            set
            {
                if ((this._personName != value))
                {
                    this.OnPersonNameChanging(value);
                    this.RaiseDataMemberChanging("PersonName");
                    this.ValidateProperty("PersonName", value);
                    this._personName = value;
                    this.RaiseDataMemberChanged("PersonName");
                    this.OnPersonNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Principal' value.
        /// </summary>
        [DataMember()]
        public string Principal
        {
            get
            {
                return this._principal;
            }
            set
            {
                if ((this._principal != value))
                {
                    this.OnPrincipalChanging(value);
                    this.RaiseDataMemberChanging("Principal");
                    this.ValidateProperty("Principal", value);
                    this._principal = value;
                    this.RaiseDataMemberChanged("Principal");
                    this.OnPrincipalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkCnt' value.
        /// </summary>
        [DataMember()]
        public float WorkCnt
        {
            get
            {
                return this._workCnt;
            }
            set
            {
                if ((this._workCnt != value))
                {
                    this.OnWorkCntChanging(value);
                    this.RaiseDataMemberChanging("WorkCnt");
                    this.ValidateProperty("WorkCnt", value);
                    this._workCnt = value;
                    this.RaiseDataMemberChanged("WorkCnt");
                    this.OnWorkCntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkSn' value.
        /// </summary>
        [DataMember()]
        public string WorkSn
        {
            get
            {
                return this._workSn;
            }
            set
            {
                if ((this._workSn != value))
                {
                    this.OnWorkSnChanging(value);
                    this.RaiseDataMemberChanging("WorkSn");
                    this.ValidateProperty("WorkSn", value);
                    this._workSn = value;
                    this.RaiseDataMemberChanged("WorkSn");
                    this.OnWorkSnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkTime' value.
        /// </summary>
        [DataMember()]
        public int WorkTime
        {
            get
            {
                return this._workTime;
            }
            set
            {
                if ((this._workTime != value))
                {
                    this.OnWorkTimeChanging(value);
                    this.RaiseDataMemberChanging("WorkTime");
                    this.ValidateProperty("WorkTime", value);
                    this._workTime = value;
                    this.RaiseDataMemberChanged("WorkTime");
                    this.OnWorkTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._index;
        }
    }
    
    /// <summary>
    /// The 'ReportRecordInfoOnDepart_ZhouYuanShan' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web.ZhouYuanShan")]
    public sealed partial class ReportRecordInfoOnDepart_ZhouYuanShan : Entity
    {
        
        private DateTime _attend_day;
        
        private int _attend_person_count;
        
        private int[] _attend_person_ids;
        
        private string[] _attend_person_names;
        
        private int[] _attend_record_ids;
        
        private string _attend_sign;
        
        private int _class_order_id;
        
        private string _class_order_name;
        
        private int _depart_id;
        
        private string _depart_name;
        
        private int[] _diff_person_ids;
        
        private string[] _diff_person_names;
        
        private bool _isSelected;
        
        private int[] _report_record_ids;
        
        private int _reported_count;
        
        private string _state;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onattend_dayChanging(DateTime value);
        partial void Onattend_dayChanged();
        partial void Onattend_person_countChanging(int value);
        partial void Onattend_person_countChanged();
        partial void Onattend_person_idsChanging(int[] value);
        partial void Onattend_person_idsChanged();
        partial void Onattend_person_namesChanging(string[] value);
        partial void Onattend_person_namesChanged();
        partial void Onattend_record_idsChanging(int[] value);
        partial void Onattend_record_idsChanged();
        partial void Onattend_signChanging(string value);
        partial void Onattend_signChanged();
        partial void Onclass_order_idChanging(int value);
        partial void Onclass_order_idChanged();
        partial void Onclass_order_nameChanging(string value);
        partial void Onclass_order_nameChanged();
        partial void Ondepart_idChanging(int value);
        partial void Ondepart_idChanged();
        partial void Ondepart_nameChanging(string value);
        partial void Ondepart_nameChanged();
        partial void Ondiff_person_idsChanging(int[] value);
        partial void Ondiff_person_idsChanged();
        partial void Ondiff_person_namesChanging(string[] value);
        partial void Ondiff_person_namesChanged();
        partial void OnisSelectedChanging(bool value);
        partial void OnisSelectedChanged();
        partial void Onreport_record_idsChanging(int[] value);
        partial void Onreport_record_idsChanged();
        partial void Onreported_countChanging(int value);
        partial void Onreported_countChanged();
        partial void OnstateChanging(string value);
        partial void OnstateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportRecordInfoOnDepart_ZhouYuanShan"/> class.
        /// </summary>
        public ReportRecordInfoOnDepart_ZhouYuanShan()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'attend_day' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public DateTime attend_day
        {
            get
            {
                return this._attend_day;
            }
            set
            {
                if ((this._attend_day != value))
                {
                    this.Onattend_dayChanging(value);
                    this.ValidateProperty("attend_day", value);
                    this._attend_day = value;
                    this.RaisePropertyChanged("attend_day");
                    this.Onattend_dayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_person_count' value.
        /// </summary>
        [DataMember()]
        public int attend_person_count
        {
            get
            {
                return this._attend_person_count;
            }
            set
            {
                if ((this._attend_person_count != value))
                {
                    this.Onattend_person_countChanging(value);
                    this.RaiseDataMemberChanging("attend_person_count");
                    this.ValidateProperty("attend_person_count", value);
                    this._attend_person_count = value;
                    this.RaiseDataMemberChanged("attend_person_count");
                    this.Onattend_person_countChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_person_ids' value.
        /// </summary>
        [DataMember()]
        public int[] attend_person_ids
        {
            get
            {
                return this._attend_person_ids;
            }
            set
            {
                if ((this._attend_person_ids != value))
                {
                    this.Onattend_person_idsChanging(value);
                    this.RaiseDataMemberChanging("attend_person_ids");
                    this.ValidateProperty("attend_person_ids", value);
                    this._attend_person_ids = value;
                    this.RaiseDataMemberChanged("attend_person_ids");
                    this.Onattend_person_idsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_person_names' value.
        /// </summary>
        [DataMember()]
        public string[] attend_person_names
        {
            get
            {
                return this._attend_person_names;
            }
            set
            {
                if ((this._attend_person_names != value))
                {
                    this.Onattend_person_namesChanging(value);
                    this.RaiseDataMemberChanging("attend_person_names");
                    this.ValidateProperty("attend_person_names", value);
                    this._attend_person_names = value;
                    this.RaiseDataMemberChanged("attend_person_names");
                    this.Onattend_person_namesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_record_ids' value.
        /// </summary>
        [DataMember()]
        public int[] attend_record_ids
        {
            get
            {
                return this._attend_record_ids;
            }
            set
            {
                if ((this._attend_record_ids != value))
                {
                    this.Onattend_record_idsChanging(value);
                    this.RaiseDataMemberChanging("attend_record_ids");
                    this.ValidateProperty("attend_record_ids", value);
                    this._attend_record_ids = value;
                    this.RaiseDataMemberChanged("attend_record_ids");
                    this.Onattend_record_idsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'attend_sign' value.
        /// </summary>
        [DataMember()]
        public string attend_sign
        {
            get
            {
                return this._attend_sign;
            }
            set
            {
                if ((this._attend_sign != value))
                {
                    this.Onattend_signChanging(value);
                    this.RaiseDataMemberChanging("attend_sign");
                    this.ValidateProperty("attend_sign", value);
                    this._attend_sign = value;
                    this.RaiseDataMemberChanged("attend_sign");
                    this.Onattend_signChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_order_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int class_order_id
        {
            get
            {
                return this._class_order_id;
            }
            set
            {
                if ((this._class_order_id != value))
                {
                    this.Onclass_order_idChanging(value);
                    this.ValidateProperty("class_order_id", value);
                    this._class_order_id = value;
                    this.RaisePropertyChanged("class_order_id");
                    this.Onclass_order_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'class_order_name' value.
        /// </summary>
        [DataMember()]
        public string class_order_name
        {
            get
            {
                return this._class_order_name;
            }
            set
            {
                if ((this._class_order_name != value))
                {
                    this.Onclass_order_nameChanging(value);
                    this.RaiseDataMemberChanging("class_order_name");
                    this.ValidateProperty("class_order_name", value);
                    this._class_order_name = value;
                    this.RaiseDataMemberChanged("class_order_name");
                    this.Onclass_order_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int depart_id
        {
            get
            {
                return this._depart_id;
            }
            set
            {
                if ((this._depart_id != value))
                {
                    this.Ondepart_idChanging(value);
                    this.ValidateProperty("depart_id", value);
                    this._depart_id = value;
                    this.RaisePropertyChanged("depart_id");
                    this.Ondepart_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'depart_name' value.
        /// </summary>
        [DataMember()]
        public string depart_name
        {
            get
            {
                return this._depart_name;
            }
            set
            {
                if ((this._depart_name != value))
                {
                    this.Ondepart_nameChanging(value);
                    this.RaiseDataMemberChanging("depart_name");
                    this.ValidateProperty("depart_name", value);
                    this._depart_name = value;
                    this.RaiseDataMemberChanged("depart_name");
                    this.Ondepart_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'diff_person_ids' value.
        /// </summary>
        [DataMember()]
        public int[] diff_person_ids
        {
            get
            {
                return this._diff_person_ids;
            }
            set
            {
                if ((this._diff_person_ids != value))
                {
                    this.Ondiff_person_idsChanging(value);
                    this.RaiseDataMemberChanging("diff_person_ids");
                    this.ValidateProperty("diff_person_ids", value);
                    this._diff_person_ids = value;
                    this.RaiseDataMemberChanged("diff_person_ids");
                    this.Ondiff_person_idsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'diff_person_names' value.
        /// </summary>
        [DataMember()]
        public string[] diff_person_names
        {
            get
            {
                return this._diff_person_names;
            }
            set
            {
                if ((this._diff_person_names != value))
                {
                    this.Ondiff_person_namesChanging(value);
                    this.RaiseDataMemberChanging("diff_person_names");
                    this.ValidateProperty("diff_person_names", value);
                    this._diff_person_names = value;
                    this.RaiseDataMemberChanged("diff_person_names");
                    this.Ondiff_person_namesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSelected' value.
        /// </summary>
        [DataMember()]
        public bool isSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnisSelectedChanging(value);
                    this.RaiseDataMemberChanging("isSelected");
                    this.ValidateProperty("isSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("isSelected");
                    this.OnisSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'report_record_ids' value.
        /// </summary>
        [DataMember()]
        public int[] report_record_ids
        {
            get
            {
                return this._report_record_ids;
            }
            set
            {
                if ((this._report_record_ids != value))
                {
                    this.Onreport_record_idsChanging(value);
                    this.RaiseDataMemberChanging("report_record_ids");
                    this.ValidateProperty("report_record_ids", value);
                    this._report_record_ids = value;
                    this.RaiseDataMemberChanged("report_record_ids");
                    this.Onreport_record_idsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'reported_count' value.
        /// </summary>
        [DataMember()]
        public int reported_count
        {
            get
            {
                return this._reported_count;
            }
            set
            {
                if ((this._reported_count != value))
                {
                    this.Onreported_countChanging(value);
                    this.RaiseDataMemberChanging("reported_count");
                    this.ValidateProperty("reported_count", value);
                    this._reported_count = value;
                    this.RaiseDataMemberChanged("reported_count");
                    this.Onreported_countChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'state' value.
        /// </summary>
        [DataMember()]
        public string state
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnstateChanging(value);
                    this.RaiseDataMemberChanging("state");
                    this.ValidateProperty("state", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("state");
                    this.OnstateChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._attend_day, this._class_order_id, this._depart_id);
        }
    }
    
    /// <summary>
    /// The 'WorkTypeInfo_ZhouYuanShan' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/IriskingAttend.Web.ZhouYuanShan")]
    public sealed partial class WorkTypeInfo_ZhouYuanShan : Entity
    {
        
        private int _depart_id;
        
        private string _memo;
        
        private int _work_type_id;
        
        private string _work_type_name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Ondepart_idChanging(int value);
        partial void Ondepart_idChanged();
        partial void OnmemoChanging(string value);
        partial void OnmemoChanged();
        partial void Onwork_type_idChanging(int value);
        partial void Onwork_type_idChanged();
        partial void Onwork_type_nameChanging(string value);
        partial void Onwork_type_nameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkTypeInfo_ZhouYuanShan"/> class.
        /// </summary>
        public WorkTypeInfo_ZhouYuanShan()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'depart_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int depart_id
        {
            get
            {
                return this._depart_id;
            }
            set
            {
                if ((this._depart_id != value))
                {
                    this.Ondepart_idChanging(value);
                    this.ValidateProperty("depart_id", value);
                    this._depart_id = value;
                    this.RaisePropertyChanged("depart_id");
                    this.Ondepart_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'memo' value.
        /// </summary>
        [DataMember()]
        public string memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnmemoChanging(value);
                    this.RaiseDataMemberChanging("memo");
                    this.ValidateProperty("memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("memo");
                    this.OnmemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_type_id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int work_type_id
        {
            get
            {
                return this._work_type_id;
            }
            set
            {
                if ((this._work_type_id != value))
                {
                    this.Onwork_type_idChanging(value);
                    this.ValidateProperty("work_type_id", value);
                    this._work_type_id = value;
                    this.RaisePropertyChanged("work_type_id");
                    this.Onwork_type_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'work_type_name' value.
        /// </summary>
        [DataMember()]
        public string work_type_name
        {
            get
            {
                return this._work_type_name;
            }
            set
            {
                if ((this._work_type_name != value))
                {
                    this.Onwork_type_nameChanging(value);
                    this.RaiseDataMemberChanging("work_type_name");
                    this.ValidateProperty("work_type_name", value);
                    this._work_type_name = value;
                    this.RaiseDataMemberChanged("work_type_name");
                    this.Onwork_type_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._depart_id, this._work_type_id);
        }
    }
}
